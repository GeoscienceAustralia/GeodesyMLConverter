from __future__ import print_function
import time
import re
import os
import math
import argparse
import textwrap
from cStringIO import StringIO
import iso3166
from pyxb.utils.six.moves.urllib import request as urllib_request
import geodesymltositelog_bindings   # Bindings generated by PyXB
import pyxb.utils.domutils as domutils

################################################################################
class SiteLog(object):

    def __init__(self, xml):
        doc = domutils.StringToDOM(xml)
        response = geodesymltositelog_bindings.CreateFromDOM(doc.documentElement)
        if len(response.AbstractSiteLog) == 1:
            self.siteLog = response.AbstractSiteLog[0]
        else:
            self.siteLog = None
            raise Exception('XML format probably is incorrect')

    def siteLogType(self):
        return self.siteLog

    @classmethod
    def complexValue(cls, item):
        return "" if item is None else item.value()

    @classmethod
    def simpleValue(cls, item):
        return "" if item is None else item

    @classmethod
    def dateTime(cls, text):
        pattern = re.compile(r'(?P<date>\d{4}-\d{2}-\d{2}) (?P<hour>\d{2}):(?P<minute>\d{2}):(?P<second>\d{2})', re.IGNORECASE)
        ok = re.match(pattern, text)
        if ok:
            return ok.group('date') + 'T' + ok.group('hour') + ':' + ok.group('minute') + 'Z'
        else:
            return "(CCYY-MM-DDThh:mmZ)"

    @classmethod
    def date(cls, text):
        pattern = re.compile(r'(?P<date>\d{4}-\d{2}-\d{2})', re.IGNORECASE)
        ok = re.match(pattern, text)
        if ok:
            return ok.group('date')
        else:
            return "(CCYY-MM-DD)"

    @classmethod
    def toMultiple(cls, line):
        """ To handle field span multiple lines """
        if not line:
            return  "\n"

        padding = ' ' * 32
        # 48 = 80 - 32 padding
        length = 48

        return ('\n'+padding).join(textwrap.wrap(line, 48)) + '\n'

    @classmethod
    def country(cls, code):
        shard = iso3166.countries.get(code)
        if shard:
            return shard.name
        else:
            return code


################################################################################
class Introduction(object):
    Content = """     XXXX Site Information Form (site log)
     International GNSS Service
     See Instructions at:
       ftp://igs.org/pub/station/general/sitelog_instr.txt

    """

    def __init__(self, fourCharacterID):
        content = type(self).Content
        self.default = content.replace("XXXX", fourCharacterID.upper(), 1)

    def output(self):
        return self.default


################################################################################
class FormInformation(object):
    Extra = """     If Update:
      Previous Site Log       : (ssss_ccyymmdd.log)
      Modified/Added Sections : (n.n,n.n,...)
    """

    def __init__(self, siteLog):
        formInformation = siteLog.formInformation
        self.reportType = SiteLog.simpleValue(formInformation.reportType)
        self.preparedBy = SiteLog.simpleValue(formInformation.preparedBy)
        self.datePrepared = SiteLog.date(str(SiteLog.complexValue(formInformation.datePrepared)))

    def output(self):
        io = StringIO()
        io.write("0.   Form\n")
        io.write("\n")
        io.write("     Prepared by (full name)  : " + SiteLog.toMultiple(self.preparedBy))
        io.write("     Date Prepared            : " + self.datePrepared + "\n")
        io.write("     Report Type              : " + self.reportType + "\n")
        io.write(type(self).Extra)
        io.write("\n")
        text = io.getvalue()
        io.close()
        return text


################################################################################
class SiteIdentification(object):

    def __init__(self, siteLog):
        siteIdentification = siteLog.siteIdentification
        self.siteName = SiteLog.simpleValue(siteIdentification.siteName)
        self.fourCharacterID = SiteLog.simpleValue(siteIdentification.fourCharacterID)
        self.monumentInscription = SiteLog.simpleValue(siteIdentification.monumentInscription)
        self.iersDOMESNumber = SiteLog.simpleValue(siteIdentification.iersDOMESNumber)
        self.cdpNumber = SiteLog.simpleValue(siteIdentification.cdpNumber)

        self.monumentDescription = SiteLog.complexValue(siteIdentification.monumentDescription)
        self.heightOfTheMonument = str(SiteLog.simpleValue(siteIdentification.heightOfTheMonument))
        if str(self.heightOfTheMonument):
            self.heightOfTheMonument += " m"

        self.monumentFoundation = SiteLog.simpleValue(siteIdentification.monumentFoundation)
        self.foundationDepth = str(SiteLog.simpleValue(siteIdentification.foundationDepth))
        if str(self.foundationDepth):
            self.foundationDepth += " m"

        self.markerDescription = SiteLog.simpleValue(siteIdentification.markerDescription)
        self.dateInstalled = SiteLog.dateTime(str(SiteLog.complexValue(siteIdentification.dateInstalled)))

        self.geologicCharacteristic = SiteLog.complexValue(siteIdentification.geologicCharacteristic)
        self.bedrockType = SiteLog.simpleValue(siteIdentification.bedrockType)

        self.bedrockCondition = SiteLog.simpleValue(siteIdentification.bedrockCondition)
        self.fractureSpacing = SiteLog.simpleValue(siteIdentification.fractureSpacing)
        self.faultZonesNearby = SiteLog.complexValue(siteIdentification.faultZonesNearby)
        self.distance_Activity = SiteLog.simpleValue(siteIdentification.distance_Activity)
        self.notes = SiteLog.simpleValue(siteIdentification.notes)

    def output(self):
        io = StringIO()
        io.write("1.   Site Identification of the GNSS Monument\n")
        io.write("\n")
        io.write("     Site Name                : " + self.siteName + "\n")
        io.write("     Four Character ID        : " + self.fourCharacterID + "\n")
        io.write("     Monument Inscription     : " + SiteLog.toMultiple(self.monumentInscription))
        io.write("     IERS DOMES Number        : " + self.iersDOMESNumber + "\n")
        io.write("     CDP Number               : " + self.cdpNumber + "\n")
        io.write("     Monument Description     : " + SiteLog.toMultiple(self.monumentDescription))
        io.write("       Height of the Monument : " + self.heightOfTheMonument + "\n")
        io.write("       Monument Foundation    : " + SiteLog.toMultiple(self.monumentFoundation))
        io.write("       Foundation Depth       : " + self.foundationDepth + "\n")
        io.write("     Marker Description       : " + SiteLog.toMultiple(self.markerDescription))
        io.write("     Date Installed           : " + self.dateInstalled + "\n")
        io.write("     Geologic Characteristic  : " + SiteLog.toMultiple(self.geologicCharacteristic))
        io.write("       Bedrock Type           : " + SiteLog.toMultiple(self.bedrockType))
        io.write("       Bedrock Condition      : " + SiteLog.toMultiple(self.bedrockCondition))
        io.write("       Fracture Spacing       : " + SiteLog.toMultiple(self.fractureSpacing))
        io.write("       Fault zones nearby     : " + self.faultZonesNearby + "\n")
        io.write("         Distance/activity    : " + SiteLog.toMultiple(self.distance_Activity))
        io.write("     Additional Information   : " + SiteLog.toMultiple(self.notes))
        io.write("\n")
        text = io.getvalue()
        io.close()
        return text


################################################################################
class SiteLocation(object):

    def __init__(self, siteLog):
        siteLocation = siteLog.siteLocation
        self.city = SiteLog.simpleValue(siteLocation.city)
        self.state = SiteLog.simpleValue(siteLocation.state)
        self.countryCodeISO = SiteLog.complexValue(siteLocation.countryCodeISO)
        self.tectonicPlate = SiteLog.complexValue(siteLocation.tectonicPlate)

        try:
            self.x = str(siteLocation.approximatePositionITRF.cartesianPosition.Point.pos.value()[0])
        except:
            self.x = ""

        try:
            self.y = str(siteLocation.approximatePositionITRF.cartesianPosition.Point.pos.value()[1])
        except:
            self.y = ""

        try:
            self.z = str(siteLocation.approximatePositionITRF.cartesianPosition.Point.pos.value()[2])
        except:
            self.z = ""

        try:
            latitude = siteLocation.approximatePositionITRF.geodeticPosition.Point.pos.value()[0]
            value = math.fabs(latitude)
            degree = math.floor(value)
            temp = (value - degree) * 60.0 
            minute = math.floor(temp)
            second = (temp - minute) * 60.0
            if latitude < 0.0:
                self.lat = "-" + '{:02d}'.format(int(degree)) + '{:02d}'.format(int(minute)) + '{:05.2f}'.format(second)
            else:
                self.lat = "+" + '{:02d}'.format(int(degree)) + '{:02d}'.format(int(minute)) + '{:05.2f}'.format(second)
        except:
            self.lat = ""

        try:
            longitude = siteLocation.approximatePositionITRF.geodeticPosition.Point.pos.value()[1]
            value = math.fabs(longitude)
            degree = math.floor(value)
            temp = (value - degree) * 60.0
            minute = math.floor(temp)
            second = (temp - minute) * 60.0
            if longitude < 0.0:
                self.lng = "-" + '{:03d}'.format(int(degree)) + '{:02d}'.format(int(minute)) + '{:05.2f}'.format(second)
            else:
                self.lng = "+" + '{:03d}'.format(int(degree)) + '{:02d}'.format(int(minute)) + '{:05.2f}'.format(second)
        except:
            self.lng = ""

        try:
            self.hgt = '{:<7.1f}'.format(siteLocation.approximatePositionITRF.geodeticPosition.Point.pos.value()[2])
        except:
            self.hgt = ""

        self.notes = SiteLog.simpleValue(siteLocation.notes)

    def output(self):
        io = StringIO()
        io.write("2.   Site Location Information\n")
        io.write("\n")
        io.write("     City or Town             : " + self.city + "\n")
        io.write("     State or Province        : " + self.state + "\n")
        io.write("     Country                  : " + SiteLog.country(self.countryCodeISO) + "\n")
        io.write("     Tectonic Plate           : " + SiteLog.toMultiple(self.tectonicPlate))
        io.write("     Approximate Position (ITRF)" + "\n")
        io.write("       X coordinate (m)       : " + self.x + "\n")
        io.write("       Y coordinate (m)       : " + self.y + "\n")
        io.write("       Z coordinate (m)       : " + self.z + "\n")
        io.write("       Latitude (N is +)      : " + self.lat + "\n")
        io.write("       Longitude (E is +)     : " + self.lng + "\n")
        io.write("       Elevation (m,ellips.)  : " + self.hgt + "\n")
        io.write("     Additional Information   : " + SiteLog.toMultiple(self.notes))
        io.write("\n")
        text = io.getvalue()
        io.close()
        return text


################################################################################
class GnssReceiverProperty(object):

    Title = "3.   GNSS Receiver Information\n"

    Default = """3.x  Receiver Type            : (A20, from rcvr_ant.tab; see instructions)
     Satellite System         : (GPS+GLO+GAL+BDS+QZSS+SBAS)
     Serial Number            : (A20, but note the first A5 is used in SINEX)
     Firmware Version         : (A11)
     Elevation Cutoff Setting : (deg)
     Date Installed           : (CCYY-MM-DDThh:mmZ)
     Date Removed             : (CCYY-MM-DDThh:mmZ)
     Temperature Stabiliz.    : (none or tolerance in degrees C)
     Additional Information   : (multiple lines)
        """

    def __init__(self, siteLog):
        self.allReceivers = []

        itemList = siteLog.gnssReceiver
        if itemList:
            i = 1
            for item in itemList:
                gnssReceiver = self.GnssReceiver(item.GnssReceiver)
                gnssReceiver.updateIndex(i)
                self.allReceivers.append(gnssReceiver)
                i += 1

    def output(self):
        io = StringIO()
        io.write(type(self).Title)
        io.write("\n")

        for receiver in self.allReceivers:
            io.write(receiver.output())

        io.write(type(self).Default)
        io.write("\n")
        text = io.getvalue()
        io.close()
        return text

    class GnssReceiver(object):

        ReceiverType =      "3.x  Receiver Type            : "
        Satellite =         "     Satellite System         : "
        SerialNumber =      "     Serial Number            : "
        Firmware =          "     Firmware Version         : "
        Cutoff =            "     Elevation Cutoff Setting : "
        Installed =         "     Date Installed           : "
        Removed =           "     Date Removed             : "
        Stabilizer =        "     Temperature Stabiliz.    : "
        Additional =        "     Additional Information   : "

        def __init__(self, receiver):
            self.receiverModel = SiteLog.complexValue(receiver.igsModelCode)

            gnss = ""
            for system in receiver.satelliteSystem:
                satellite = SiteLog.complexValue(system)
                if gnss:
                    gnss += "+" + str(satellite)
                else:
                    gnss += str(satellite)
            self.satelliteSystem = gnss

            self.manufacturerSerialNumber = SiteLog.simpleValue(receiver.manufacturerSerialNumber)
            self.firmwareVersion = SiteLog.simpleValue(receiver.firmwareVersion)
            cutoff = SiteLog.simpleValue(receiver.elevationCutoffSetting)
            self.elevationCutoffSetting = str(int(cutoff)) + " deg" if str(cutoff) else ""
            self.dateInstalled = SiteLog.dateTime(str(SiteLog.complexValue(receiver.dateInstalled)))
            self.dateRemoved = SiteLog.dateTime(str(SiteLog.complexValue(receiver.dateRemoved)))
            stabilizer = SiteLog.simpleValue(receiver.temperatureStabilization)
            self.temperatureStabilization = str(stabilizer) if (stabilizer > 0.0 or stabilizer < 0.0) else "none" 
            self.notes = SiteLog.simpleValue(receiver.notes)

            self.typeOfReceiver = type(self).ReceiverType

        def output(self):
            io = StringIO()
            io.write(self.typeOfReceiver + self.receiverModel + "\n")
            io.write(type(self).Satellite  + self.satelliteSystem + "\n")
            io.write(type(self).SerialNumber + self.manufacturerSerialNumber + "\n")
            io.write(type(self).Firmware + self.firmwareVersion + "\n")
            io.write(type(self).Cutoff + self.elevationCutoffSetting + "\n")
            io.write(type(self).Installed + self.dateInstalled + "\n")
            io.write(type(self).Removed + self.dateRemoved + "\n")
            io.write(type(self).Stabilizer + self.temperatureStabilization + "\n")
            io.write(type(self).Additional + SiteLog.toMultiple(self.notes))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "3." + str(index)
            self.typeOfReceiver = text + self.typeOfReceiver[len(text):]


################################################################################
class GnssAntennaProperty(object):

    Title = "4.   GNSS Antenna Information\n"

    Default = """4.x  Antenna Type             : (A20, from rcvr_ant.tab; see instructions)
     Serial Number            : (A*, but note the first A5 is used in SINEX)
     Antenna Reference Point  : (BPA/BCR/XXX from "antenna.gra"; see instr.)
     Marker->ARP Up Ecc. (m)  : (F8.4)
     Marker->ARP North Ecc(m) : (F8.4)
     Marker->ARP East Ecc(m)  : (F8.4)
     Alignment from True N    : (deg; + is clockwise/east)
     Antenna Radome Type      : (A4 from rcvr_ant.tab; see instructions)
     Radome Serial Number     : 
     Antenna Cable Type       : (vendor & type number)
     Antenna Cable Length     : (m)
     Date Installed           : (CCYY-MM-DDThh:mmZ)
     Date Removed             : (CCYY-MM-DDThh:mmZ)
     Additional Information   : (multiple lines)
    """

    def __init__(self, siteLog):
        self.allAntennas = []

        itemList = siteLog.gnssAntenna
        if itemList:
            i = 1
            for item in itemList:
                gnssAntenna = self.GnssAntenna(item.GnssAntenna)
                gnssAntenna.updateIndex(i)
                self.allAntennas.append(gnssAntenna)
                i += 1

    def output(self):
        io = StringIO()
        io.write(type(self).Title)
        io.write("\n")

        for antenna in self.allAntennas:
            io.write(antenna.output())

        io.write(type(self).Default)
        io.write("\n")
        text = io.getvalue()
        io.close()
        return text

    class GnssAntenna(object):

        AntennaType =          "4.x  Antenna Type             : "
        SerialNumber =         "     Serial Number            : "
        ReferencePoint =       "     Antenna Reference Point  : "
        Up =                   "     Marker->ARP Up Ecc. (m)  : "
        North =                "     Marker->ARP North Ecc(m) : "
        East =                 "     Marker->ARP East Ecc(m)  : "
        Alignment =            "     Alignment from True N    : "
        RadomeType =           "     Antenna Radome Type      : "
        RadomeSerialNumber =   "     Radome Serial Number     : "
        CableType =            "     Antenna Cable Type       : "
        CableLength =          "     Antenna Cable Length     : "
        Installed =            "     Date Installed           : "
        Removed =              "     Date Removed             : "
        Additional =           "     Additional Information   : "

        def __init__(self, antenna):
            self.antennaModel = SiteLog.complexValue(antenna.igsModelCode)
            self.manufacturerSerialNumber = SiteLog.simpleValue(antenna.manufacturerSerialNumber)
            self.antennaReferencePoint = SiteLog.complexValue(antenna.antennaReferencePoint)
            self.marker_arpUpEcc = '{:08.4f}'.format(SiteLog.simpleValue(antenna.marker_arpUpEcc))
            self.marker_arpNorthEcc = '{:08.4f}'.format(SiteLog.simpleValue(antenna.marker_arpNorthEcc))
            self.marker_arpEastEcc = '{:08.4f}'.format(SiteLog.simpleValue(antenna.marker_arpEastEcc))
            trueNorth = SiteLog.simpleValue(antenna.alignmentFromTrueNorth)
            if trueNorth > 0.0 or trueNorth < 0.0:
                self.alignmentFromTrueNorth = '{:+d}'.format(int(trueNorth)) + " deg" if str(trueNorth) else ""
            else:
                self.alignmentFromTrueNorth = '{:d}'.format(int(trueNorth)) + " deg" if str(trueNorth) else ""
            self.antennaRadomeType = SiteLog.complexValue(antenna.antennaRadomeType)
            self.radomeSerialNumber = SiteLog.simpleValue(antenna.radomeSerialNumber)
            self.antennaCableType = SiteLog.simpleValue(antenna.antennaCableType)
            length = SiteLog.simpleValue(antenna.antennaCableLength)
            self.antennaCableLength = (str(length) + " m") if length > 0.0 else ""
            self.dateInstalled = SiteLog.dateTime(str(SiteLog.complexValue(antenna.dateInstalled)))
            self.dateRemoved = SiteLog.dateTime(str(SiteLog.complexValue(antenna.dateRemoved)))
            self.notes = SiteLog.simpleValue(antenna.notes)

            self.typeOfAntenna = type(self).AntennaType

        def output(self):
            io = StringIO()
            io.write(self.typeOfAntenna + self.antennaModel + "\n")
            io.write(type(self).SerialNumber + self.manufacturerSerialNumber + "\n")
            io.write(type(self).ReferencePoint + self.antennaReferencePoint + "\n")
            io.write(type(self).Up + self.marker_arpUpEcc + "\n")
            io.write(type(self).North + self.marker_arpNorthEcc + "\n")
            io.write(type(self).East + self.marker_arpEastEcc + "\n")
            io.write(type(self).Alignment + self.alignmentFromTrueNorth + "\n")
            io.write(type(self).RadomeType + self.antennaRadomeType + "\n")
            io.write(type(self).RadomeSerialNumber + self.radomeSerialNumber + "\n")
            io.write(type(self).CableType + self.antennaCableType + "\n")
            io.write(type(self).CableLength + self.antennaCableLength + "\n")
            io.write(type(self).Installed + self.dateInstalled + "\n")
            io.write(type(self).Removed + self.dateRemoved + "\n")
            io.write(type(self).Additional + SiteLog.toMultiple(self.notes))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "4." + str(index)
            self.typeOfAntenna = text + self.typeOfAntenna[len(text):]


################################################################################
class SurveyedLocalTieProperty(object):

    Title = "5.   Surveyed Local Ties\n"

    Default = """5.x  Tied Marker Name         :
     Tied Marker Usage        : (SLR/VLBI/LOCAL CONTROL/FOOTPRINT/etc)
     Tied Marker CDP Number   : (A4)
     Tied Marker DOMES Number : (A9)
     Differential Components from GNSS Marker to the tied monument (ITRS)
       dx (m)                 : (m)
       dy (m)                 : (m)
       dz (m)                 : (m)
     Accuracy (mm)            : (mm)
     Survey method            : (GPS CAMPAIGN/TRILATERATION/TRIANGULATION/etc)
     Date Measured            : (CCYY-MM-DDThh:mmZ)
     Additional Information   : (multiple lines)
        """

    def __init__(self, siteLog):
        self.allLocalTies = []

        itemList = siteLog.surveyedLocalTie
        if itemList:
            i = 1
            for item in itemList:
                localTie = self.SurveyedLocalTie(item.SurveyedLocalTie)
                localTie.updateIndex(i)
                self.allLocalTies.append(localTie)
                i += 1

    def output(self):
        io = StringIO()
        io.write(type(self).Title)
        io.write("\n")

        for localTie in self.allLocalTies:
            io.write(localTie.output())

        io.write(type(self).Default)
        io.write("\n")
        text = io.getvalue()
        io.close()
        return text

    class SurveyedLocalTie(object):

        MarkerName =        "5.x  Tied Marker Name         : "
        MarkerUsage =       "     Tied Marker Usage        : "
        CDPNumber =         "     Tied Marker CDP Number   : "
        DOMESNumber =       "     Tied Marker DOMES Number : "
        ITRS =              "     Differential Components from GNSS Marker to the tied monument (ITRS)"
        Dx =                "       dx (m)                 : "
        Dy =                "       dy (m)                 : "
        Dz =                "       dz (m)                 : "
        Accuracy =          "     Accuracy (mm)            : "
        SurveyMethod =      "     Survey method            : "
        DateMeasured =      "     Date Measured            : "
        Additional =        "     Additional Information   : "

        def __init__(self, localTie):
            self.tiedMarkerName = SiteLog.simpleValue(localTie.tiedMarkerName)
            self.tiedMarkerUsage = SiteLog.simpleValue(localTie.tiedMarkerUsage)
            self.tiedMarkerCDPNumber = SiteLog.simpleValue(localTie.tiedMarkerCDPNumber)
            self.tiedMarkerDOMESNumber = SiteLog.simpleValue(localTie.tiedMarkerDOMESNumber)
            try:
                self.dx = str(SiteLog.simpleValue(localTie.differentialComponentsGNSSMarkerToTiedMonumentITRS.dx))
            except:
                self.dx = ""
            try:
                self.dy = str(SiteLog.simpleValue(localTie.differentialComponentsGNSSMarkerToTiedMonumentITRS.dy))
            except:
                self.dy = ""
            try:
                self.dz = str(SiteLog.simpleValue(localTie.differentialComponentsGNSSMarkerToTiedMonumentITRS.dz))
            except:
                self.dz = ""
            accuracy = SiteLog.simpleValue(localTie.localSiteTiesAccuracy)
            self.localSiteTiesAccuracy = str(accuracy) if accuracy > 0.0 else "" 
            self.surveyMethod = SiteLog.simpleValue(localTie.surveyMethod)
            self.dateMeasured = SiteLog.dateTime(str(SiteLog.complexValue(localTie.dateMeasured)))
            self.notes = SiteLog.simpleValue(localTie.notes)

            self.nameOfMarker = type(self).MarkerName

        def output(self):
            io = StringIO()
            io.write(self.nameOfMarker + self.tiedMarkerName + "\n")
            io.write(type(self).MarkerUsage + SiteLog.toMultiple(self.tiedMarkerUsage))
            io.write(type(self).CDPNumber + self.tiedMarkerCDPNumber + "\n")
            io.write(type(self).DOMESNumber + self.tiedMarkerDOMESNumber + "\n")
            io.write(type(self).ITRS + "\n")
            io.write(type(self).Dx + self.dx + "\n")
            io.write(type(self).Dy + self.dy + "\n")
            io.write(type(self).Dz + self.dz + "\n")
            io.write(type(self).Accuracy  + self.localSiteTiesAccuracy + "\n")
            io.write(type(self).SurveyMethod + SiteLog.toMultiple(self.surveyMethod))
            io.write(type(self).DateMeasured + self.dateMeasured + "\n")
            io.write(type(self).Additional + SiteLog.toMultiple(self.notes))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "5." + str(index)
            self.nameOfMarker = text + self.nameOfMarker[len(text):]


################################################################################
class FrequencyStandardProperty(object):

    Title = "6.   Frequency Standard\n"

    Default = """6.x  Standard Type            : (INTERNAL or EXTERNAL H-MASER/CESIUM/etc)
       Input Frequency        : (if external)
       Effective Dates        : (CCYY-MM-DD/CCYY-MM-DD)
       Notes                  : (multiple lines)
        """

    def __init__(self, siteLog):
        self.allFrequencyStandards = []

        itemList = siteLog.frequencyStandard
        if itemList:
            i = 1
            for item in itemList:
                frequencyStandard = self.FrequencyStandard(item.FrequencyStandard)
                frequencyStandard.updateIndex(i)
                self.allFrequencyStandards.append(frequencyStandard)
                i += 1

    def output(self):
        io = StringIO()
        io.write(type(self).Title)
        io.write("\n")

        for frequencyStandard in self.allFrequencyStandards:
            io.write(frequencyStandard.output())

        io.write(type(self).Default)
        io.write("\n")
        text = io.getvalue()
        io.close()
        return text


    class FrequencyStandard(object):

        StandardType =      "6.x  Standard Type            : "
        InputFrequency =    "       Input Frequency        : "
        EffectiveDates =    "       Effective Dates        : "
        Notes =             "       Notes                  : "

        def __init__(self, frequencyStandard):
            self.standardType = SiteLog.complexValue(frequencyStandard.standardType)
            frequency = SiteLog.simpleValue(frequencyStandard.inputFrequency)
            self.inputFrequency = (str(int(frequency)) + " MHz") if frequency else ""
            try:
                begin = SiteLog.date(str(SiteLog.complexValue(frequencyStandard.validTime.AbstractTimePrimitive.beginPosition)))
                if not str(begin):
                    begin = "CCYY-MM-DD"
            except:
                begin = "CCYY-MM-DD"
            try:
                end = SiteLog.date(str(SiteLog.complexValue(frequencyStandard.validTime.AbstractTimePrimitive.endPosition)))
                if not str(end):
                    end = "CCYY-MM-DD"
            except:
                end = "CCYY-MM-DD"
            self.validTime = begin + "/" + end
            self.notes = SiteLog.simpleValue(frequencyStandard.notes)

            self.typeOfFrequencyStandard = type(self).StandardType

        def output(self):
            io = StringIO()
            io.write(self.typeOfFrequencyStandard + self.standardType + "\n")
            io.write(type(self).InputFrequency + self.inputFrequency + "\n")
            io.write(type(self).EffectiveDates + self.validTime + "\n")
            io.write(type(self).Notes + SiteLog.toMultiple(self.notes))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "6." + str(index)
            self.typeOfFrequencyStandard = text + self.typeOfFrequencyStandard[len(text):]


################################################################################
class CollocationInformationProperty(object):

    Title = "7.   Collocation Information\n"

    Default = """7.x  Instrumentation Type     : (GPS/GLONASS/DORIS/PRARE/SLR/VLBI/TIME/etc)
       Status                 : (PERMANENT/MOBILE)
       Effective Dates        : (CCYY-MM-DD/CCYY-MM-DD)
       Notes                  : (multiple lines)
        """

    def __init__(self, siteLog):
        self.allCollocationInformations = []

        itemList = siteLog.collocationInformation
        if itemList:
            i = 1
            for item in itemList:
                collocationInformation = self.CollocationInformation(item.CollocationInformation)
                collocationInformation.updateIndex(i)
                self.allCollocationInformations.append(collocationInformation)
                i += 1

    def output(self):
        io = StringIO()
        io.write(type(self).Title)
        io.write("\n")

        for collocationInformation in self.allCollocationInformations:
            io.write(collocationInformation.output())

        io.write(type(self).Default)
        io.write("\n")
        text = io.getvalue()
        io.close()
        return text


    class CollocationInformation(object):

        Instrumentation =   "7.x  Instrumentation Type     : "
        Status =            "       Status                 : "
        EffectiveDates =    "       Effective Dates        : "
        Notes =             "       Notes                  : "

        def __init__(self, collocationInformation):
            self.instrumentationType = SiteLog.complexValue(collocationInformation.instrumentationType)
            self.status = SiteLog.complexValue(collocationInformation.status)
            try:
                begin = SiteLog.date(str(SiteLog.complexValue(collocationInformation.validTime.AbstractTimePrimitive.beginPosition)))
                if not str(begin):
                    begin = "CCYY-MM-DD"
            except:
                begin = "CCYY-MM-DD"
            try:
                end = SiteLog.date(str(SiteLog.complexValue(collocationInformation.validTime.AbstractTimePrimitive.endPosition)))
                if not str(end):
                    end = "CCYY-MM-DD"
            except:
                end = "CCYY-MM-DD"
            self.validTime = begin + "/" + end
            self.notes = SiteLog.simpleValue(collocationInformation.notes)

            self.typeOfCollocationInformation = type(self).Instrumentation

        def output(self):
            io = StringIO()
            io.write(self.typeOfCollocationInformation + self.instrumentationType + "\n")
            io.write(type(self).Status + self.status + "\n")
            io.write(type(self).EffectiveDates + self.validTime + "\n")
            io.write(type(self).Notes + SiteLog.toMultiple(self.notes))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "7." + str(index)
            self.typeOfCollocationInformation = text + self.typeOfCollocationInformation[len(text):]


################################################################################
class HumiditySensorProperty(object):

    Title = "8.   Meteorological Instrumentation\n"

    Default = """8.1.x Humidity Sensor Model   :
       Manufacturer           :
       Serial Number          :
       Data Sampling Interval : (sec)
       Accuracy (% rel h)     : (% rel h)
       Aspiration             : (UNASPIRATED/NATURAL/FAN/etc)
       Height Diff to Ant     : (m)
       Calibration date       : (CCYY-MM-DD)
       Effective Dates        : (CCYY-MM-DD/CCYY-MM-DD)
       Notes                  : (multiple lines)
        """

    def __init__(self, siteLog):
        self.allHumiditySensors = []

        itemList = siteLog.humiditySensor
        if itemList:
            i = 1
            for item in itemList:
                humiditySensor = self.HumiditySensor(item.HumiditySensor)
                humiditySensor.updateIndex(i)
                self.allHumiditySensors.append(humiditySensor)
                i += 1

    def output(self):
        io = StringIO()
        io.write(type(self).Title)
        io.write("\n")

        for humiditySensor in self.allHumiditySensors:
            io.write(humiditySensor.output())

        io.write(type(self).Default)
        text = io.getvalue()
        io.close()
        return text


    class HumiditySensor(object):

        SensorModel =       "8.1.x Humidity Sensor Model   : "
        Manufacturer =      "       Manufacturer           : "
        SerialNumber =      "       Serial Number          : "
        SamplingInterval =  "       Data Sampling Interval : "
        Accuracy =          "       Accuracy (% rel h)     : "
        Aspiration =        "       Aspiration             : "
        Diff =              "       Height Diff to Ant     : "
        CalibrationDate =   "       Calibration date       : "
        EffectiveDates =    "       Effective Dates        : "
        Notes =             "       Notes                  : "

        def __init__(self, humiditySensor):
            self.type = SiteLog.complexValue(humiditySensor.type)
            self.manufacturer = SiteLog.simpleValue(humiditySensor.manufacturer)
            self.serialNumber = SiteLog.simpleValue(humiditySensor.serialNumber)
            interval = SiteLog.simpleValue(humiditySensor.dataSamplingInterval)
            self.dataSamplingInterval = (str(int(interval)) + " sec") if interval > 0.0 else ""
            accuracy = SiteLog.simpleValue(humiditySensor.accuracy_percentRelativeHumidity)
            self.accuracy_percentRelativeHumidity = '{:.2f}'.format(accuracy) if accuracy > 0.0 else ""
            self.aspiration = SiteLog.simpleValue(humiditySensor.aspiration)
            self.heightDiffToAntenna = str(SiteLog.simpleValue(humiditySensor.heightDiffToAntenna)) + " m"
            self.calibrationDate = SiteLog.date(str(SiteLog.complexValue(humiditySensor.calibrationDate)))
            try:
                begin = SiteLog.date(str(SiteLog.complexValue(humiditySensor.validTime.AbstractTimePrimitive.beginPosition)))
                if not str(begin):
                    begin = "CCYY-MM-DD"
            except:
                begin = "CCYY-MM-DD"
            try:
                end = SiteLog.date(str(SiteLog.complexValue(humiditySensor.validTime.AbstractTimePrimitive.endPosition)))
                if not str(end):
                    end = "CCYY-MM-DD"
            except:
                end = "CCYY-MM-DD"
            self.validTime = begin + "/" + end
            self.notes = SiteLog.simpleValue(humiditySensor.notes)

            self.modelOfHumiditySensor = type(self).SensorModel

        def output(self):
            io = StringIO()
            io.write(self.modelOfHumiditySensor + self.type + "\n")
            io.write(type(self).Manufacturer + self.manufacturer + "\n")
            io.write(type(self).SerialNumber + self.serialNumber + "\n")
            io.write(type(self).SamplingInterval + self.dataSamplingInterval + "\n")
            io.write(type(self).Accuracy + self.accuracy_percentRelativeHumidity + "\n")
            io.write(type(self).Aspiration + self.aspiration + "\n")
            io.write(type(self).Diff + self.heightDiffToAntenna + "\n")
            io.write(type(self).CalibrationDate + self.calibrationDate + "\n")
            io.write(type(self).EffectiveDates + self.validTime + "\n")
            io.write(type(self).Notes + SiteLog.toMultiple(self.notes))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "8.1." + str(index)
            self.modelOfHumiditySensor = text + self.modelOfHumiditySensor[len(text):]


################################################################################
class PressureSensorProperty(object):

    Title = ""

    Default = """8.2.x Pressure Sensor Model   :
       Manufacturer           :
       Serial Number          :
       Data Sampling Interval : (sec)
       Accuracy               : (hPa)
       Height Diff to Ant     : (m)
       Calibration date       : (CCYY-MM-DD)
       Effective Dates        : (CCYY-MM-DD/CCYY-MM-DD)
       Notes                  : (multiple lines)
        """

    def __init__(self, siteLog):
        self.allPressureSensors = []

        itemList = siteLog.pressureSensor
        if itemList:
            i = 1
            for item in itemList:
                pressureSensor = self.PressureSensor(item.PressureSensor)
                pressureSensor.updateIndex(i)
                self.allPressureSensors.append(pressureSensor)
                i += 1

    def output(self):
        io = StringIO()

        for pressureSensor in self.allPressureSensors:
            io.write(pressureSensor.output())

        io.write(type(self).Default)
        text = io.getvalue()
        io.close()
        return text


    class PressureSensor(object):

        SensorModel =       "8.2.x Pressure Sensor Model   : "
        Manufacturer =      "       Manufacturer           : "
        SerialNumber =      "       Serial Number          : "
        SamplingInterval =  "       Data Sampling Interval : "
        Accuracy =          "       Accuracy               : "
        Aspiration =        "       Aspiration             : "
        Diff =              "       Height Diff to Ant     : "
        CalibrationDate =   "       Calibration date       : "
        EffectiveDates =    "       Effective Dates        : "
        Notes =             "       Notes                  : "

        def __init__(self, pressureSensor):
            self.type = SiteLog.complexValue(pressureSensor.type)
            self.manufacturer = SiteLog.simpleValue(pressureSensor.manufacturer)
            self.serialNumber = SiteLog.simpleValue(pressureSensor.serialNumber)
            interval = SiteLog.simpleValue(pressureSensor.dataSamplingInterval)
            self.dataSamplingInterval = (str(int(interval)) + " sec") if interval > 0.0 else ""
            accuracy = SiteLog.simpleValue(pressureSensor.accuracy_hPa)
            self.accuracy_hPa = ('{:.2f}'.format(accuracy) + " hPa") if accuracy > 0.0 else ""
            self.heightDiffToAntenna = str(SiteLog.simpleValue(pressureSensor.heightDiffToAntenna)) + " m"
            self.calibrationDate = SiteLog.date(str(SiteLog.complexValue(pressureSensor.calibrationDate)))
            try:
                begin = SiteLog.date(str(SiteLog.complexValue(pressureSensor.validTime.AbstractTimePrimitive.beginPosition)))
                if not str(begin):
                    begin = "CCYY-MM-DD"
            except:
                begin = "CCYY-MM-DD"
            try:
                end = SiteLog.date(str(SiteLog.complexValue(pressureSensor.validTime.AbstractTimePrimitive.endPosition)))
                if not str(end):
                    end = "CCYY-MM-DD"
            except:
                end = "CCYY-MM-DD"
            self.validTime = begin + "/" + end
            self.notes = SiteLog.simpleValue(pressureSensor.notes)

            self.modelOfPressureSensor = type(self).SensorModel

        def output(self):
            io = StringIO()
            io.write(self.modelOfPressureSensor + self.type + "\n")
            io.write(type(self).Manufacturer + self.manufacturer + "\n")
            io.write(type(self).SerialNumber + self.serialNumber + "\n")
            io.write(type(self).SamplingInterval + self.dataSamplingInterval + "\n")
            io.write(type(self).Accuracy + self.accuracy_hPa + "\n")
            io.write(type(self).Diff + self.heightDiffToAntenna + "\n")
            io.write(type(self).CalibrationDate + self.calibrationDate + "\n")
            io.write(type(self).EffectiveDates + self.validTime + "\n")
            io.write(type(self).Notes + SiteLog.toMultiple(self.notes))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "8.2." + str(index)
            self.modelOfPressureSensor = text + self.modelOfPressureSensor[len(text):]


################################################################################
class TemperatureSensorProperty(object):

    Title = ""

    Default = """8.3.x Temp. Sensor Model      :
       Manufacturer           :
       Serial Number          :
       Data Sampling Interval : (sec)
       Accuracy               : (deg C)
       Aspiration             : (UNASPIRATED/NATURAL/FAN/etc)
       Height Diff to Ant     : (m)
       Calibration date       : (CCYY-MM-DD)
       Effective Dates        : (CCYY-MM-DD/CCYY-MM-DD)
       Notes                  : (multiple lines)
        """

    def __init__(self, siteLog):
        self.allTemperatureSensors = []

        itemList = siteLog.temperatureSensor
        if itemList:
            i = 1
            for item in itemList:
                temperatureSensor = self.TemperatureSensor(item.TemperatureSensor)
                temperatureSensor.updateIndex(i)
                self.allTemperatureSensors.append(temperatureSensor)
                i += 1

    def output(self):
        io = StringIO()

        for temperatureSensor in self.allTemperatureSensors:
            io.write(temperatureSensor.output())

        io.write(type(self).Default)
        text = io.getvalue()
        io.close()
        return text


    class TemperatureSensor(object):

        SensorModel =       "8.3.x Temp. Sensor Model      : "
        Manufacturer =      "       Manufacturer           : "
        SerialNumber =      "       Serial Number          : "
        SamplingInterval =  "       Data Sampling Interval : "
        Accuracy =          "       Accuracy               : "
        Aspiration =        "       Aspiration             : "
        Diff =              "       Height Diff to Ant     : "
        CalibrationDate =   "       Calibration date       : "
        EffectiveDates =    "       Effective Dates        : "
        Notes =             "       Notes                  : "

        def __init__(self, temperatureSensor):
            self.type = SiteLog.complexValue(temperatureSensor.type)
            self.manufacturer = SiteLog.simpleValue(temperatureSensor.manufacturer)
            self.serialNumber = SiteLog.simpleValue(temperatureSensor.serialNumber)
            interval = SiteLog.simpleValue(temperatureSensor.dataSamplingInterval)
            self.dataSamplingInterval = (str(int(interval)) + " sec") if interval > 0.0 else ""
            accuracy = SiteLog.simpleValue(temperatureSensor.accuracy_degreesCelcius)
            self.accuracy_degreesCelcius = ('{:.2f}'.format(accuracy) + " deg C") if accuracy > 0.0 else ""
            self.aspiration = SiteLog.simpleValue(temperatureSensor.aspiration)
            self.heightDiffToAntenna = str(SiteLog.simpleValue(temperatureSensor.heightDiffToAntenna)) + " m"
            self.calibrationDate = SiteLog.date(str(SiteLog.complexValue(temperatureSensor.calibrationDate)))
            try:
                begin = SiteLog.date(str(SiteLog.complexValue(temperatureSensor.validTime.AbstractTimePrimitive.beginPosition)))
                if not str(begin):
                    begin = "CCYY-MM-DD"
            except:
                begin = "CCYY-MM-DD"
            try:
                end = SiteLog.date(str(SiteLog.complexValue(temperatureSensor.validTime.AbstractTimePrimitive.endPosition)))
                if not str(end):
                    end = "CCYY-MM-DD"
            except:
                end = "CCYY-MM-DD"
            self.validTime = begin + "/" + end
            self.notes = SiteLog.simpleValue(temperatureSensor.notes)

            self.modelOfTemperatureSensor = type(self).SensorModel

        def output(self):
            io = StringIO()
            io.write(self.modelOfTemperatureSensor + self.type + "\n")
            io.write(type(self).Manufacturer + self.manufacturer + "\n")
            io.write(type(self).SerialNumber + self.serialNumber + "\n")
            io.write(type(self).SamplingInterval + self.dataSamplingInterval + "\n")
            io.write(type(self).Accuracy + self.accuracy_degreesCelcius + "\n")
            io.write(type(self).Aspiration + self.aspiration + "\n")
            io.write(type(self).Diff + self.heightDiffToAntenna + "\n")
            io.write(type(self).CalibrationDate + self.calibrationDate + "\n")
            io.write(type(self).EffectiveDates + self.validTime + "\n")
            io.write(type(self).Notes + SiteLog.toMultiple(self.notes))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "8.3." + str(index)
            self.modelOfTemperatureSensor = text + self.modelOfTemperatureSensor[len(text):]


################################################################################
class WaterVaporSensorProperty(object):

    Title = ""

    Default = """8.4.x Water Vapor Radiometer  :
       Manufacturer           :
       Serial Number          :
       Distance to Antenna    : (m)
       Height Diff to Ant     : (m)
       Calibration date       : (CCYY-MM-DD)
       Effective Dates        : (CCYY-MM-DD/CCYY-MM-DD)
       Notes                  : (multiple lines)
        """

    def __init__(self, siteLog):
        self.allWaterVaporSensors = []

        itemList = siteLog.waterVaporSensor
        if itemList:
            i = 1
            for item in itemList:
                waterVaporSensor = self.WaterVaporSensor(item.WaterVaporSensor)
                waterVaporSensor.updateIndex(i)
                self.allWaterVaporSensors.append(waterVaporSensor)
                i += 1

    def output(self):
        io = StringIO()

        for waterVaporSensor in self.allWaterVaporSensors:
            io.write(waterVaporSensor.output())

        io.write(type(self).Default)
        text = io.getvalue()
        io.close()
        return text


    class WaterVaporSensor(object):

        SensorModel =       "8.4.x Water Vapor Radiometer  : "
        Manufacturer =      "       Manufacturer           : "
        SerialNumber =      "       Serial Number          : "
        Distance =          "       Distance to Antenna    : "
        Diff =              "       Height Diff to Ant     : "
        CalibrationDate =   "       Calibration date       : "
        EffectiveDates =    "       Effective Dates        : "
        Notes =             "       Notes                  : "

        def __init__(self, waterVaporSensor):
            self.type = SiteLog.complexValue(waterVaporSensor.type)
            self.manufacturer = SiteLog.simpleValue(waterVaporSensor.manufacturer)
            self.serialNumber = SiteLog.simpleValue(waterVaporSensor.serialNumber)
            self.distanceToAntenna = str(SiteLog.simpleValue(waterVaporSensor.distanceToAntenna)) + " m"
            self.heightDiffToAntenna = str(SiteLog.simpleValue(waterVaporSensor.heightDiffToAntenna)) + " m"
            self.calibrationDate = SiteLog.date(str(SiteLog.complexValue(waterVaporSensor.calibrationDate)))
            try:
                begin = SiteLog.date(str(SiteLog.complexValue(waterVaporSensor.validTime.AbstractTimePrimitive.beginPosition)))
                if not str(begin):
                    begin = "CCYY-MM-DD"
            except:
                begin = "CCYY-MM-DD"
            try:
                end = SiteLog.date(str(SiteLog.complexValue(waterVaporSensor.validTime.AbstractTimePrimitive.endPosition)))
                if not str(end):
                    end = "CCYY-MM-DD"
            except:
                end = "CCYY-MM-DD"
            self.validTime = begin + "/" + end
            self.notes = SiteLog.simpleValue(waterVaporSensor.notes)

            self.modelOfWaterVaporSensor = type(self).SensorModel

        def output(self):
            io = StringIO()
            io.write(self.modelOfWaterVaporSensor + self.type + "\n")
            io.write(type(self).Manufacturer + self.manufacturer + "\n")
            io.write(type(self).SerialNumber + self.serialNumber + "\n")
            io.write(type(self).Distance + self. distanceToAntenna + "\n")
            io.write(type(self).Diff + self.heightDiffToAntenna + "\n")
            io.write(type(self).CalibrationDate + self.calibrationDate + "\n")
            io.write(type(self).EffectiveDates + self.validTime + "\n")
            io.write(type(self).Notes + SiteLog.toMultiple(self.notes))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "8.4." + str(index)
            self.modelOfWaterVaporSensor = text + self.modelOfWaterVaporSensor[len(text):]


################################################################################
class OtherInstrumentationProperty(object):

    Title = ""

    Default = """8.5.x Other Instrumentation   : (multiple lines)
        """

    def __init__(self, siteLog):
        self.allOtherInstrumentations = []

        itemList = siteLog.otherInstrumentation
        if itemList:
            i = 1
            for item in itemList:
                otherInstrumentation = self.OtherInstrumentation(item.OtherInstrumentation)
                otherInstrumentation.updateIndex(i)
                self.allOtherInstrumentations.append(otherInstrumentation)
                i += 1

    def output(self):
        io = StringIO()

        for otherInstrumentation in self.allOtherInstrumentations:
            io.write(otherInstrumentation.output())

        io.write(type(self).Default)
        io.write("\n")
        text = io.getvalue()
        io.close()
        return text


    class OtherInstrumentation(object):

        Instrumentation =   "8.5.x Other Instrumentation   : "

        def __init__(self, otherInstrumentation):
            self.instrumentation = SiteLog.simpleValue(otherInstrumentation.instrumentation)

            self.textOfInstrumentation = type(self).Instrumentation

        def output(self):
            io = StringIO()
            io.write(self.textOfInstrumentation + SiteLog.toMultiple(self.instrumentation))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "8.5." + str(index)
            self.textOfInstrumentation = text + self.textOfInstrumentation[len(text):]


################################################################################
class RadioInterferenceProperty(object):

    Title = "9.  Local Ongoing Conditions Possibly Affecting Computed Position\n"

    Default = """9.1.x Radio Interferences     : (TV/CELL PHONE ANTENNA/RADAR/etc)
       Observed Degradations  : (SN RATIO/DATA GAPS/etc)
       Effective Dates        : (CCYY-MM-DD/CCYY-MM-DD)
       Additional Information : (multiple lines)
        """

    def __init__(self, siteLog):
        self.allRadioInterferences = []

        itemList = siteLog.radioInterference
        if itemList:
            i = 1
            for item in itemList:
                radioInterference = self.RadioInterference(item.RadioInterference)
                radioInterference.updateIndex(i)
                self.allRadioInterferences.append(radioInterference)
                i += 1

    def output(self):
        io = StringIO()
        io.write(type(self).Title)
        io.write("\n")

        for radioInterference in self.allRadioInterferences:
            io.write(radioInterference.output())

        io.write(type(self).Default)
        text = io.getvalue()
        io.close()
        return text


    class RadioInterference(object):

        ProblemSource =     "9.1.x Radio Interferences     : "
        Degradation =       "       Observed Degradations  : "
        EffectiveDates =    "       Effective Dates        : "
        Additional =        "       Additional Information : "

        def __init__(self, radioInterference):
            self.possibleProblemSource = SiteLog.simpleValue(radioInterference.possibleProblemSource)
            self.observedDegradation = SiteLog.simpleValue(radioInterference.observedDegradation)
            try:
                begin = SiteLog.date(str(SiteLog.complexValue(radioInterference.validTime.AbstractTimePrimitive.beginPosition)))
                if not str(begin):
                    begin = "CCYY-MM-DD"
            except:
                begin = "CCYY-MM-DD"
            try:
                end = SiteLog.date(str(SiteLog.complexValue(radioInterference.validTime.AbstractTimePrimitive.endPosition)))
                if not str(end):
                    end = "CCYY-MM-DD"
            except:
                end = "CCYY-MM-DD"
            self.validTime = begin + "/" + end
            self.notes = SiteLog.simpleValue(radioInterference.notes)

            self.sourceOfRadioInterference = type(self).ProblemSource 

        def output(self):
            io = StringIO()
            io.write(self.sourceOfRadioInterference + self.possibleProblemSource + "\n")
            io.write(type(self).Degradation + self.observedDegradation + "\n")
            io.write(type(self).EffectiveDates + self.validTime + "\n")
            io.write(type(self).Additional + SiteLog.toMultiple(self.notes))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "9.1." + str(index)
            self.sourceOfRadioInterference = text + self.sourceOfRadioInterference[len(text):]


################################################################################
class MultipathSourceProperty(object):

    Title = ""

    Default = """9.2.x Multipath Sources       : (METAL ROOF/DOME/VLBI ANTENNA/etc)
       Effective Dates        : (CCYY-MM-DD/CCYY-MM-DD)
       Additional Information : (multiple lines)
        """

    def __init__(self, siteLog):
        self.allMultipathSources = []

        itemList = siteLog.multipathSource
        if itemList:
            i = 1
            for item in itemList:
                multipathSource = self.MultipathSource(item.MultipathSource)
                multipathSource.updateIndex(i)
                self.allMultipathSources.append(multipathSource)
                i += 1

    def output(self):
        io = StringIO()

        for multipathSource in self.allMultipathSources:
            io.write(multipathSource.output())

        io.write(type(self).Default)
        text = io.getvalue()
        io.close()
        return text


    class MultipathSource(object):

        ProblemSource =     "9.2.x Multipath Sources       : "
        EffectiveDates =    "       Effective Dates        : "
        Additional =        "       Additional Information : "

        def __init__(self, multipathSource):
            self.possibleProblemSource = SiteLog.simpleValue(multipathSource.possibleProblemSource)
            try:
                begin = SiteLog.date(str(SiteLog.complexValue(multipathSource.validTime.AbstractTimePrimitive.beginPosition)))
                if not str(begin):
                    begin = "CCYY-MM-DD"
            except:
                begin = "CCYY-MM-DD"
            try:
                end = SiteLog.date(str(SiteLog.complexValue(multipathSource.validTime.AbstractTimePrimitive.endPosition)))
                if not str(end):
                    end = "CCYY-MM-DD"
            except:
                end = "CCYY-MM-DD"
            self.validTime = begin + "/" + end
            self.notes = SiteLog.simpleValue(multipathSource.notes)

            self.sourceOfMultipathSource = type(self).ProblemSource

        def output(self):
            io = StringIO()
            io.write(self.sourceOfMultipathSource + self.possibleProblemSource + "\n")
            io.write(type(self).EffectiveDates + self.validTime + "\n")
            io.write(type(self).Additional + SiteLog.toMultiple(self.notes))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "9.2." + str(index)
            self.sourceOfMultipathSource = text + self.sourceOfMultipathSource[len(text):]


################################################################################
class SignalObstructionProperty(object):

    Title = ""

    Default = """9.3.x Signal Obstructions     : (TREES/BUILDINGS/etc)
       Effective Dates        : (CCYY-MM-DD/CCYY-MM-DD)
       Additional Information : (multiple lines)
        """

    def __init__(self, siteLog):
        self.allSignalObstructions = []

        itemList = siteLog.signalObstruction
        if itemList:
            i = 1
            for item in itemList:
                signalObstruction = self.SignalObstruction(item.SignalObstruction)
                signalObstruction.updateIndex(i)
                self.allSignalObstructions.append(signalObstruction)
                i += 1

    def output(self):
        io = StringIO()

        for signalObstruction in self.allSignalObstructions:
            io.write(signalObstruction.output())

        io.write(type(self).Default)
        io.write("\n")
        text = io.getvalue()
        io.close()
        return text


    class SignalObstruction(object):

        ProblemSource =     "9.3.x Signal Obstructions     : "
        EffectiveDates =    "       Effective Dates        : "
        Additional =        "       Additional Information : "

        def __init__(self, signalObstruction):
            self.possibleProblemSource = SiteLog.simpleValue(signalObstruction.possibleProblemSource)
            try:
                begin = SiteLog.date(str(SiteLog.complexValue(signalObstruction.validTime.AbstractTimePrimitive.beginPosition)))
                if not str(begin):
                    begin = "CCYY-MM-DD"
            except:
                begin = "CCYY-MM-DD"
            try:
                end = SiteLog.date(str(SiteLog.complexValue(signalObstruction.validTime.AbstractTimePrimitive.endPosition)))
                if not str(end):
                    end = "CCYY-MM-DD"
            except:
                end = "CCYY-MM-DD"
            self.validTime = begin + "/" + end
            self.notes = SiteLog.simpleValue(signalObstruction.notes)

            self.sourceOfSignalObstruction = type(self).ProblemSource 

        def output(self):
            io = StringIO()
            io.write(self.sourceOfSignalObstruction + self.possibleProblemSource + "\n")
            io.write(type(self).EffectiveDates + self.validTime + "\n")
            io.write(type(self).Additional + SiteLog.toMultiple(self.notes))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "9.3." + str(index)
            self.sourceOfSignalObstruction = text + self.sourceOfSignalObstruction[len(text):]


################################################################################
class LocalEpisodicEffectProperty(object):

    Title = "10.  Local Episodic Effects Possibly Affecting Data Quality\n"

    Default = """10.x Date                     : (CCYY-MM-DD/CCYY-MM-DD)
     Event                    : (TREE CLEARING/CONSTRUCTION/etc)
        """

    def __init__(self, siteLog):
        self.allLocalEpisodicEffects = []

        itemList = siteLog.localEpisodicEffect
        if itemList:
            i = 1
            for item in itemList:
                localEpisodicEffect = self.LocalEpisodicEffect(item.LocalEpisodicEffect)
                localEpisodicEffect.updateIndex(i)
                self.allLocalEpisodicEffects.append(localEpisodicEffect)
                i += 1

    def output(self):
        io = StringIO()
        io.write(type(self).Title)
        io.write("\n")

        for localEpisodicEffect in self.allLocalEpisodicEffects:
            io.write(localEpisodicEffect.output())

        io.write(type(self).Default)
        io.write("\n")
        text = io.getvalue()
        io.close()
        return text


    class LocalEpisodicEffect(object):

        Date =              "10.x Date                     : "
        Event =             "     Event                    : "

        def __init__(self, localEpisodicEffect):
            try:
                begin = SiteLog.date(str(SiteLog.complexValue(localEpisodicEffect.validTime.AbstractTimePrimitive.beginPosition)))
                if not str(begin):
                    begin = "CCYY-MM-DD"
            except:
                begin = "CCYY-MM-DD"
            try:
                end = SiteLog.date(str(SiteLog.complexValue(localEpisodicEffect.validTime.AbstractTimePrimitive.endPosition)))
                if not str(end):
                    end = "CCYY-MM-DD"
            except:
                end = "CCYY-MM-DD"
            self.validTime = begin + "/" + end
            self.event = SiteLog.simpleValue(localEpisodicEffect.event)

            self.dateOfLocalEpisodicEffect = type(self).Date

        def output(self):
            io = StringIO()
            io.write(self.dateOfLocalEpisodicEffect + self.validTime + "\n")
            io.write(type(self).Event + SiteLog.toMultiple(self.event))
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            text = "10." + str(index)
            self.dateOfLocalEpisodicEffect = text + self.dateOfLocalEpisodicEffect[len(text):]


################################################################################
class AgencyProperty(object):
# For siteContact mapping only
    Title             = "11.  On-Site, Point of Contact Agency Information\n"

    Agency            = "     Agency                   : "
    Abbreviation      = "     Preferred Abbreviation   : \n"
    MailingAddress    = "     Mailing Address          : "

    Additional        = "     Additional Information   : (multiple lines)\n"

    Pattern           = re.compile(r'agencyPropertyType', re.IGNORECASE)

    def __init__(self, agencyProperty):
        self.allCI_ResponsiblePartys = []
        try:
            if re.match(type(self).Pattern, type(agencyProperty).__name__):
# For siteOwner or siteMetadataCustodian mapping
                type(self).Title = "12.  Responsible Agency (if different from 11.)"
        except:
# For siteOwner mapping only, which could have one or zero instance, could be a None
# siteMetadataCustodian must have one instance, never be a None type
# Even siteContact could be an empty list type, never be a None type
            type(self).Title = "12.  Responsible Agency (if different from 11.)"

        self.title = type(self).Title

        if not agencyProperty:
            for i in range(0, 2):
                responsibleParty = self.CI_ResponsibleParty(None)
                responsibleParty.updateIndex(i)
                self.allCI_ResponsiblePartys.append(responsibleParty)
            return

        if re.match(type(self).Pattern, type(agencyProperty).__name__):
# For siteOwner or siteMetadataCustodian mapping
            responsibleParty = self.CI_ResponsibleParty(agencyProperty.CI_ResponsibleParty)
            responsibleParty.updateIndex(0)
            self.allCI_ResponsiblePartys.append(responsibleParty)

            responsibleParty = self.CI_ResponsibleParty(None)
            responsibleParty.updateIndex(1)
            self.allCI_ResponsiblePartys.append(responsibleParty)
            return

#For siteContact mapping
        itemList = agencyProperty
        if itemList:
            count = len(itemList)
            if count == 0:
                for i in range(0, 2):
                    responsibleParty = self.CI_ResponsibleParty(None)
                    responsibleParty.updateIndex(i)
                    self.allCI_ResponsiblePartys.append(responsibleParty)
            elif count == 1:
                responsibleParty = self.CI_ResponsibleParty(itemList[0].CI_ResponsibleParty)
                responsibleParty.updateIndex(0)
                self.allCI_ResponsiblePartys.append(responsibleParty)

                responsibleParty = self.CI_ResponsibleParty(None)
                responsibleParty.updateIndex(1)
                self.allCI_ResponsiblePartys.append(responsibleParty)
            else:
                i = 0
                for item in itemList:
                    responsibleParty = self.CI_ResponsibleParty(item.CI_ResponsibleParty)
                    responsibleParty.updateIndex(i)
                    self.allCI_ResponsiblePartys.append(responsibleParty)
                    i += 1
        else:
            for i in range(0, 2):
                responsibleParty = self.CI_ResponsibleParty(None)
                responsibleParty.updateIndex(i)
                self.allCI_ResponsiblePartys.append(responsibleParty)

    def output(self):
        io = StringIO()
        io.write(self.title)
        io.write("\n")

        io.write(type(self).Agency + SiteLog.toMultiple(self.allCI_ResponsiblePartys[0].organisationName))
        io.write(type(self).Abbreviation)

        size = len(self.allCI_ResponsiblePartys[0].deliveryPoint)
        if size == 0:
            io.write(type(self).MailingAddress + "\n")
        else:
            io.write(type(self).MailingAddress + self.allCI_ResponsiblePartys[0].deliveryPoint[0] + "\n")
            for z in range(size-1):
                io.write("                                " + self.allCI_ResponsiblePartys[0].deliveryPoint[z+1] + "\n")

        for responsibleParty in self.allCI_ResponsiblePartys:
            io.write(responsibleParty.output())

        io.write(type(self).Additional)
        io.write("\n")
        text = io.getvalue()
        io.close()
        return text


    class CI_ResponsibleParty(object):

        Chapters =         ["     Primary Contact\n",
                            "     Secondary Contact\n"]

        ContactName =       "       Contact Name           : "
        PrimaryPhone =      "       Telephone (primary)    : "
        SecondPhone =       "       Telephone (secondary)  : "
        Fax =               "       Fax                    : "
        Email =             "       E-mail                 : "

        def __init__(self, responsibleParty):
            if not responsibleParty:
                self.individualName = ""
                self.organisationName = ""
                self.deliveryPoint = []
                self.electronicMailAddress = ""
                self.primaryVoice = ""
                self.secondVoice = ""
                self.facsimile = ""
                self.chapter = ""
                return

            self.individualName = SiteLog.simpleValue(responsibleParty.individualName.CharacterString)
            self.organisationName = SiteLog.simpleValue(responsibleParty.organisationName.CharacterString)

            try:
                self.deliveryPoint = []
                for deliveryPoint in responsibleParty.contactInfo.CI_Contact.address.CI_Address.deliveryPoint:
                    self.deliveryPoint.append(SiteLog.simpleValue(deliveryPoint.CharacterString))
            except:
                self.deliveryPoint = []

            try:
                self.electronicMailAddress = SiteLog.simpleValue(responsibleParty.contactInfo.CI_Contact.address.CI_Address.electronicMailAddress[0].CharacterString)
            except:
                self.electronicMailAddress = ""

            try:
                self.primaryVoice = SiteLog.simpleValue(responsibleParty.contactInfo.CI_Contact.phone.CI_Telephone.voice[0].CharacterString)
            except:
                self.primaryVoice = ""

            try:
                self.secondVoice = SiteLog.simpleValue(responsibleParty.contactInfo.CI_Contact.phone.CI_Telephone.voice[1].CharacterString)
            except:
                self.secondVoice = ""

            try:
                self.facsimile = SiteLog.simpleValue(responsibleParty.contactInfo.CI_Contact.phone.CI_Telephone.facsimile[0].CharacterString)
            except:
                self.facsimile = ""

            self.chapter = ""

        def output(self):
            io = StringIO()
            io.write(self.chapter)
            io.write(type(self).ContactName + SiteLog.toMultiple(self.individualName))
            io.write(type(self).PrimaryPhone + SiteLog.toMultiple(self.primaryVoice))
            io.write(type(self).SecondPhone + SiteLog.toMultiple(self.secondVoice))
            io.write(type(self).Fax + SiteLog.toMultiple(self.facsimile))
            io.write(type(self).Email + SiteLog.toMultiple(self.electronicMailAddress))
            text = io.getvalue()
            io.close()
            return text

        def updateIndex(self, index):
            if index < 2:
                self.chapter = type(self).Chapters[index]


################################################################################
class MoreInformation(object):
    Default = """13.  More Information

     Primary Data Center      :
     Secondary Data Center    :
     URL for More Information :
     Hardcopy on File
       Site Map               : (Y or URL)
       Site Diagram           : (Y or URL)
       Horizon Mask           : (Y or URL)
       Monument Description   : (Y or URL)
       Site Pictures          : (Y or URL)
     Additional Information   : (multiple lines)
     Antenna Graphics with Dimensions

     (insert text graphic from file antenna.gra)

    """

    def __init__(self, siteLog):
        moreInformation = siteLog.moreInformation
        if not moreInformation:
# MoreInformation can be a None type
            self.isEmpty = True
            return

        self.isEmpty = False
        self.primary = ""
        self.secondary = ""
        count = len(moreInformation.dataCenter)
        if count == 1:
            self.primary = SiteLog.simpleValue(moreInformation.dataCenter[0])
        elif count == 2:
            self.primary = SiteLog.simpleValue(moreInformation.dataCenter[0])
            self.secondary = SiteLog.simpleValue(moreInformation.dataCenter[1])
        self.urlForMoreInformation = SiteLog.simpleValue(moreInformation.urlForMoreInformation)
        self.siteMap = SiteLog.simpleValue(moreInformation.siteMap)
        self.siteDiagram = SiteLog.simpleValue(moreInformation.siteDiagram)
        self.horizonMask = SiteLog.simpleValue(moreInformation.horizonMask)
        self.monumentDescription = SiteLog.simpleValue(moreInformation.monumentDescription)
        self.sitePictures = SiteLog.simpleValue(moreInformation.sitePictures)
        self.notes = SiteLog.simpleValue(moreInformation.notes)

    def output(self):
        if self.isEmpty:
            io = StringIO()
            io.write(type(self).Default)
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text
        else:
            io = StringIO()
            io.write("13.  More Information\n")
            io.write("\n")
            io.write("     Primary Data Center      : " + self.primary + "\n")
            io.write("     Secondary Data Center    : " + self.secondary + "\n")
            io.write("     URL for More Information : " + self.urlForMoreInformation + "\n")
            io.write("     Hardcopy on File\n")
            io.write("       Site Map               : " + self.siteMap + "\n")
            io.write("       Site Diagram           : " + self.siteDiagram + "\n")
            io.write("       Horizon Mask           : " + self.horizonMask + "\n")
            io.write("       Monument Description   : " + self.monumentDescription + "\n")
            io.write("       Site Pictures          : " + self.sitePictures + "\n")
            io.write("     Additional Information   : " + SiteLog.toMultiple(self.notes))
            io.write("     Antenna Graphics with Dimensions\n")
            io.write("\n")
            io.write("     (insert text graphic from file antenna.gra)\n")
            io.write("\n")
            text = io.getvalue()
            io.close()
            return text


################################################################################
def options():
    options = argparse.ArgumentParser(prog='GeodesyMLToSiteLog',
            description="Convert GeodesyML file to site log file")

    options.add_argument('--version', action='version',
            version='%(prog)s 1.0, Copyright (c) 2016 by Geodesy, Geoscience Australia')

    options.add_argument("-x", "--geodesyML",
            metavar='/fullpath/SSSS.xml',
            required=True,
            help='The geodesyML file for specific station')

    options.add_argument("-v", "--verbose", help="log verbose information to file",
            action="store_true")

    return options.parse_args()


################################################################################
def main():
    """ Convert XML to site log file """
    args = options()
    with open(args.geodesyML, 'r') as f:
        xml = f.read()

    parseXML(xml, True)

def parseXML(xml, toFile=False):
    siteLog = SiteLog(xml)

    siteLogType = siteLog.siteLogType()

    form = FormInformation(siteLogType)
    datePrepared = form.datePrepared
    datePrepared = datePrepared.replace('-', '')

    identification = SiteIdentification(siteLogType)

    intro = Introduction(identification.fourCharacterID)

    location = SiteLocation(siteLogType)

    siteLogFilename = identification.fourCharacterID.lower() + "_" + datePrepared + ".log"

    receiverList = GnssReceiverProperty(siteLogType)

    antennaList = GnssAntennaProperty(siteLogType)

    localTieList = SurveyedLocalTieProperty(siteLogType)

    frequencyStandardList = FrequencyStandardProperty(siteLogType)

    collocationInformationList = CollocationInformationProperty(siteLogType)

    humiditySensorList = HumiditySensorProperty(siteLogType)

    pressureSensorList = PressureSensorProperty(siteLogType)

    temperatureSensorList = TemperatureSensorProperty(siteLogType)

    waterVaporSensorList = WaterVaporSensorProperty(siteLogType)

    otherInstrumentationList = OtherInstrumentationProperty(siteLogType)

    radioInterferenceList = RadioInterferenceProperty(siteLogType)

    multipathSourceList = MultipathSourceProperty(siteLogType)

    signalObstructionList = SignalObstructionProperty(siteLogType)

    localEpisodicEffectList = LocalEpisodicEffectProperty(siteLogType)

    siteContactList = AgencyProperty(siteLogType.siteContact)

####    siteOwner = AgencyProperty(siteLogType.siteOwner)
####    print(siteOwner.output())

    siteMetadataCustodian = AgencyProperty(siteLogType.siteMetadataCustodian)

    moreInformation = MoreInformation(siteLogType)

    outputContent = '{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n'.format(
        intro.output(), form.output(), identification.output(), 
        location.output(), receiverList.output(), antennaList.output(), 
        localTieList.output(), frequencyStandardList.output(), collocationInformationList.output(), 
        humiditySensorList.output(), pressureSensorList.output(), temperatureSensorList.output(),
        waterVaporSensorList.output(), otherInstrumentationList.output(), radioInterferenceList.output(), 
        multipathSourceList.output(), signalObstructionList.output(), localEpisodicEffectList.output(),
        siteContactList.output(), siteMetadataCustodian.output(), moreInformation.output())

    if toFile:
        with open(siteLogFilename, 'w') as output:
            output.write(outputContent)
        
        print('\n\tSite log file \"' + siteLogFilename + '\" has been successfully generated')

    else:
        return siteLogFilename, outputContent


################################################################################
if __name__ == '__main__':
    main()


