# ./pyxb/bundles/opengis/raw/ogckml22.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:cb051a2fa805178d0865f0ce9b303a52f418cb84
# Generated 2017-07-10 00:38:00.342832 by PyXB version 1.2.5 using Python 2.7.12.final.0
# Namespace http://www.opengis.net/kml/2.2

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:064905e6-6508-11e7-aa9b-0a55f9edafa5')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.5'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes
import pyxb.bundles.opengis.atom
import pyxb.bundles.opengis.misc.xAL

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.opengis.net/kml/2.2', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_atom = pyxb.bundles.opengis.atom.Namespace
_Namespace_atom.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_xal = pyxb.bundles.opengis.misc.xAL.Namespace
_Namespace_xal.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.opengis.net/kml/2.2}anglepos90Type
class anglepos90Type (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'anglepos90Type')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 27, 2)
    _Documentation = None
anglepos90Type._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=anglepos90Type, value=pyxb.binding.datatypes.double(90.0))
anglepos90Type._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=anglepos90Type, value=pyxb.binding.datatypes.double(0.0))
anglepos90Type._InitializeFacetMap(anglepos90Type._CF_maxInclusive,
   anglepos90Type._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'anglepos90Type', anglepos90Type)
_module_typeBindings.anglepos90Type = anglepos90Type

# Atomic simple type: {http://www.opengis.net/kml/2.2}angle90Type
class angle90Type (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'angle90Type')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 34, 2)
    _Documentation = None
angle90Type._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=angle90Type, value=pyxb.binding.datatypes.double(90.0))
angle90Type._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=angle90Type, value=pyxb.binding.datatypes.double(-90.0))
angle90Type._InitializeFacetMap(angle90Type._CF_maxInclusive,
   angle90Type._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'angle90Type', angle90Type)
_module_typeBindings.angle90Type = angle90Type

# Atomic simple type: {http://www.opengis.net/kml/2.2}anglepos180Type
class anglepos180Type (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'anglepos180Type')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 41, 2)
    _Documentation = None
anglepos180Type._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=anglepos180Type, value=pyxb.binding.datatypes.double(180.0))
anglepos180Type._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=anglepos180Type, value=pyxb.binding.datatypes.double(0.0))
anglepos180Type._InitializeFacetMap(anglepos180Type._CF_maxInclusive,
   anglepos180Type._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'anglepos180Type', anglepos180Type)
_module_typeBindings.anglepos180Type = anglepos180Type

# Atomic simple type: {http://www.opengis.net/kml/2.2}angle180Type
class angle180Type (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'angle180Type')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 48, 2)
    _Documentation = None
angle180Type._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=angle180Type, value=pyxb.binding.datatypes.double(180.0))
angle180Type._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=angle180Type, value=pyxb.binding.datatypes.double(-180.0))
angle180Type._InitializeFacetMap(angle180Type._CF_maxInclusive,
   angle180Type._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'angle180Type', angle180Type)
_module_typeBindings.angle180Type = angle180Type

# Atomic simple type: {http://www.opengis.net/kml/2.2}angle360Type
class angle360Type (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'angle360Type')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 55, 2)
    _Documentation = None
angle360Type._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=angle360Type, value=pyxb.binding.datatypes.double(360.0))
angle360Type._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=angle360Type, value=pyxb.binding.datatypes.double(-360.0))
angle360Type._InitializeFacetMap(angle360Type._CF_maxInclusive,
   angle360Type._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'angle360Type', angle360Type)
_module_typeBindings.angle360Type = angle360Type

# Atomic simple type: {http://www.opengis.net/kml/2.2}altitudeModeEnumType
class altitudeModeEnumType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'altitudeModeEnumType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 62, 2)
    _Documentation = None
altitudeModeEnumType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=altitudeModeEnumType, enum_prefix=None)
altitudeModeEnumType.clampToGround = altitudeModeEnumType._CF_enumeration.addEnumeration(unicode_value='clampToGround', tag='clampToGround')
altitudeModeEnumType.relativeToGround = altitudeModeEnumType._CF_enumeration.addEnumeration(unicode_value='relativeToGround', tag='relativeToGround')
altitudeModeEnumType.absolute = altitudeModeEnumType._CF_enumeration.addEnumeration(unicode_value='absolute', tag='absolute')
altitudeModeEnumType._InitializeFacetMap(altitudeModeEnumType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'altitudeModeEnumType', altitudeModeEnumType)
_module_typeBindings.altitudeModeEnumType = altitudeModeEnumType

# Atomic simple type: {http://www.opengis.net/kml/2.2}colorType
class colorType (pyxb.binding.datatypes.hexBinary):

    """
        
        aabbggrr
        
        ffffffff: opaque white
        ff000000: opaque black
        
        """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'colorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 70, 2)
    _Documentation = '\n        \n        aabbggrr\n        \n        ffffffff: opaque white\n        ff000000: opaque black\n        \n        '
colorType._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(4))
colorType._InitializeFacetMap(colorType._CF_length)
Namespace.addCategoryObject('typeBinding', 'colorType', colorType)
_module_typeBindings.colorType = colorType

# List simple type: {http://www.opengis.net/kml/2.2}coordinatesType
# superclasses pyxb.binding.datatypes.anySimpleType
class coordinatesType (pyxb.binding.basis.STD_list):

    """Simple type that is a list of pyxb.binding.datatypes.string."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'coordinatesType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 86, 2)
    _Documentation = None

    _ItemType = pyxb.binding.datatypes.string
coordinatesType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'coordinatesType', coordinatesType)
_module_typeBindings.coordinatesType = coordinatesType

# Atomic simple type: {http://www.opengis.net/kml/2.2}colorModeEnumType
class colorModeEnumType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'colorModeEnumType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 90, 2)
    _Documentation = None
colorModeEnumType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=colorModeEnumType, enum_prefix=None)
colorModeEnumType.normal = colorModeEnumType._CF_enumeration.addEnumeration(unicode_value='normal', tag='normal')
colorModeEnumType.random = colorModeEnumType._CF_enumeration.addEnumeration(unicode_value='random', tag='random')
colorModeEnumType._InitializeFacetMap(colorModeEnumType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'colorModeEnumType', colorModeEnumType)
_module_typeBindings.colorModeEnumType = colorModeEnumType

# Union simple type: {http://www.opengis.net/kml/2.2}dateTimeType
# superclasses pyxb.binding.datatypes.anySimpleType
class dateTimeType (pyxb.binding.basis.STD_union):

    """Simple type that is a union of pyxb.binding.datatypes.dateTime, pyxb.binding.datatypes.date, pyxb.binding.datatypes.gYearMonth, pyxb.binding.datatypes.gYear."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dateTimeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 97, 2)
    _Documentation = None

    _MemberTypes = ( pyxb.binding.datatypes.dateTime, pyxb.binding.datatypes.date, pyxb.binding.datatypes.gYearMonth, pyxb.binding.datatypes.gYear, )
dateTimeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=dateTimeType)
dateTimeType._CF_pattern = pyxb.binding.facets.CF_pattern()
dateTimeType._InitializeFacetMap(dateTimeType._CF_enumeration,
   dateTimeType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'dateTimeType', dateTimeType)
_module_typeBindings.dateTimeType = dateTimeType

# Atomic simple type: {http://www.opengis.net/kml/2.2}displayModeEnumType
class displayModeEnumType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'displayModeEnumType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 101, 2)
    _Documentation = None
displayModeEnumType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=displayModeEnumType, enum_prefix=None)
displayModeEnumType.default = displayModeEnumType._CF_enumeration.addEnumeration(unicode_value='default', tag='default')
displayModeEnumType.hide = displayModeEnumType._CF_enumeration.addEnumeration(unicode_value='hide', tag='hide')
displayModeEnumType._InitializeFacetMap(displayModeEnumType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'displayModeEnumType', displayModeEnumType)
_module_typeBindings.displayModeEnumType = displayModeEnumType

# Atomic simple type: {http://www.opengis.net/kml/2.2}gridOriginEnumType
class gridOriginEnumType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'gridOriginEnumType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 108, 2)
    _Documentation = None
gridOriginEnumType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=gridOriginEnumType, enum_prefix=None)
gridOriginEnumType.lowerLeft = gridOriginEnumType._CF_enumeration.addEnumeration(unicode_value='lowerLeft', tag='lowerLeft')
gridOriginEnumType.upperLeft = gridOriginEnumType._CF_enumeration.addEnumeration(unicode_value='upperLeft', tag='upperLeft')
gridOriginEnumType._InitializeFacetMap(gridOriginEnumType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'gridOriginEnumType', gridOriginEnumType)
_module_typeBindings.gridOriginEnumType = gridOriginEnumType

# Atomic simple type: {http://www.opengis.net/kml/2.2}itemIconStateEnumType
class itemIconStateEnumType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'itemIconStateEnumType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 118, 2)
    _Documentation = None
itemIconStateEnumType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=itemIconStateEnumType, enum_prefix=None)
itemIconStateEnumType.open = itemIconStateEnumType._CF_enumeration.addEnumeration(unicode_value='open', tag='open')
itemIconStateEnumType.closed = itemIconStateEnumType._CF_enumeration.addEnumeration(unicode_value='closed', tag='closed')
itemIconStateEnumType.error = itemIconStateEnumType._CF_enumeration.addEnumeration(unicode_value='error', tag='error')
itemIconStateEnumType.fetching0 = itemIconStateEnumType._CF_enumeration.addEnumeration(unicode_value='fetching0', tag='fetching0')
itemIconStateEnumType.fetching1 = itemIconStateEnumType._CF_enumeration.addEnumeration(unicode_value='fetching1', tag='fetching1')
itemIconStateEnumType.fetching2 = itemIconStateEnumType._CF_enumeration.addEnumeration(unicode_value='fetching2', tag='fetching2')
itemIconStateEnumType._InitializeFacetMap(itemIconStateEnumType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'itemIconStateEnumType', itemIconStateEnumType)
_module_typeBindings.itemIconStateEnumType = itemIconStateEnumType

# Atomic simple type: {http://www.opengis.net/kml/2.2}listItemTypeEnumType
class listItemTypeEnumType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'listItemTypeEnumType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 129, 2)
    _Documentation = None
listItemTypeEnumType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=listItemTypeEnumType, enum_prefix=None)
listItemTypeEnumType.radioFolder = listItemTypeEnumType._CF_enumeration.addEnumeration(unicode_value='radioFolder', tag='radioFolder')
listItemTypeEnumType.check = listItemTypeEnumType._CF_enumeration.addEnumeration(unicode_value='check', tag='check')
listItemTypeEnumType.checkHideChildren = listItemTypeEnumType._CF_enumeration.addEnumeration(unicode_value='checkHideChildren', tag='checkHideChildren')
listItemTypeEnumType.checkOffOnly = listItemTypeEnumType._CF_enumeration.addEnumeration(unicode_value='checkOffOnly', tag='checkOffOnly')
listItemTypeEnumType._InitializeFacetMap(listItemTypeEnumType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'listItemTypeEnumType', listItemTypeEnumType)
_module_typeBindings.listItemTypeEnumType = listItemTypeEnumType

# Atomic simple type: {http://www.opengis.net/kml/2.2}refreshModeEnumType
class refreshModeEnumType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'refreshModeEnumType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 138, 2)
    _Documentation = None
refreshModeEnumType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=refreshModeEnumType, enum_prefix=None)
refreshModeEnumType.onChange = refreshModeEnumType._CF_enumeration.addEnumeration(unicode_value='onChange', tag='onChange')
refreshModeEnumType.onInterval = refreshModeEnumType._CF_enumeration.addEnumeration(unicode_value='onInterval', tag='onInterval')
refreshModeEnumType.onExpire = refreshModeEnumType._CF_enumeration.addEnumeration(unicode_value='onExpire', tag='onExpire')
refreshModeEnumType._InitializeFacetMap(refreshModeEnumType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'refreshModeEnumType', refreshModeEnumType)
_module_typeBindings.refreshModeEnumType = refreshModeEnumType

# Atomic simple type: {http://www.opengis.net/kml/2.2}viewRefreshModeEnumType
class viewRefreshModeEnumType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'viewRefreshModeEnumType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 146, 2)
    _Documentation = None
viewRefreshModeEnumType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=viewRefreshModeEnumType, enum_prefix=None)
viewRefreshModeEnumType.never = viewRefreshModeEnumType._CF_enumeration.addEnumeration(unicode_value='never', tag='never')
viewRefreshModeEnumType.onRequest = viewRefreshModeEnumType._CF_enumeration.addEnumeration(unicode_value='onRequest', tag='onRequest')
viewRefreshModeEnumType.onStop = viewRefreshModeEnumType._CF_enumeration.addEnumeration(unicode_value='onStop', tag='onStop')
viewRefreshModeEnumType.onRegion = viewRefreshModeEnumType._CF_enumeration.addEnumeration(unicode_value='onRegion', tag='onRegion')
viewRefreshModeEnumType._InitializeFacetMap(viewRefreshModeEnumType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'viewRefreshModeEnumType', viewRefreshModeEnumType)
_module_typeBindings.viewRefreshModeEnumType = viewRefreshModeEnumType

# Atomic simple type: {http://www.opengis.net/kml/2.2}shapeEnumType
class shapeEnumType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'shapeEnumType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 155, 2)
    _Documentation = None
shapeEnumType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=shapeEnumType, enum_prefix=None)
shapeEnumType.rectangle = shapeEnumType._CF_enumeration.addEnumeration(unicode_value='rectangle', tag='rectangle')
shapeEnumType.cylinder = shapeEnumType._CF_enumeration.addEnumeration(unicode_value='cylinder', tag='cylinder')
shapeEnumType.sphere = shapeEnumType._CF_enumeration.addEnumeration(unicode_value='sphere', tag='sphere')
shapeEnumType._InitializeFacetMap(shapeEnumType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'shapeEnumType', shapeEnumType)
_module_typeBindings.shapeEnumType = shapeEnumType

# Atomic simple type: {http://www.opengis.net/kml/2.2}styleStateEnumType
class styleStateEnumType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'styleStateEnumType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 163, 2)
    _Documentation = None
styleStateEnumType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=styleStateEnumType, enum_prefix=None)
styleStateEnumType.normal = styleStateEnumType._CF_enumeration.addEnumeration(unicode_value='normal', tag='normal')
styleStateEnumType.highlight = styleStateEnumType._CF_enumeration.addEnumeration(unicode_value='highlight', tag='highlight')
styleStateEnumType._InitializeFacetMap(styleStateEnumType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'styleStateEnumType', styleStateEnumType)
_module_typeBindings.styleStateEnumType = styleStateEnumType

# Atomic simple type: {http://www.opengis.net/kml/2.2}unitsEnumType
class unitsEnumType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'unitsEnumType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 170, 2)
    _Documentation = None
unitsEnumType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=unitsEnumType, enum_prefix=None)
unitsEnumType.fraction = unitsEnumType._CF_enumeration.addEnumeration(unicode_value='fraction', tag='fraction')
unitsEnumType.pixels = unitsEnumType._CF_enumeration.addEnumeration(unicode_value='pixels', tag='pixels')
unitsEnumType.insetPixels = unitsEnumType._CF_enumeration.addEnumeration(unicode_value='insetPixels', tag='insetPixels')
unitsEnumType._InitializeFacetMap(unitsEnumType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'unitsEnumType', unitsEnumType)
_module_typeBindings.unitsEnumType = unitsEnumType

# List simple type: {http://www.opengis.net/kml/2.2}itemIconStateType
# superclasses pyxb.binding.datatypes.anySimpleType
class itemIconStateType (pyxb.binding.basis.STD_list):

    """Simple type that is a list of itemIconStateEnumType."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'itemIconStateType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 114, 2)
    _Documentation = None

    _ItemType = itemIconStateEnumType
itemIconStateType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'itemIconStateType', itemIconStateType)
_module_typeBindings.itemIconStateType = itemIconStateType

# Complex type {http://www.opengis.net/kml/2.2}AbstractObjectType with content type ELEMENT_ONLY
class AbstractObjectType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}AbstractObjectType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractObjectType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 287, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup uses Python identifier ObjectSimpleExtensionGroup
    __ObjectSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup'), 'ObjectSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractObjectType_httpwww_opengis_netkml2_2ObjectSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 294, 2), )

    
    ObjectSimpleExtensionGroup = property(__ObjectSimpleExtensionGroup.value, __ObjectSimpleExtensionGroup.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_opengis_netkml2_2_AbstractObjectType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 298, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 298, 4)
    
    id = property(__id.value, __id.set, None, None)

    
    # Attribute targetId uses Python identifier targetId
    __targetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'targetId'), 'targetId', '__httpwww_opengis_netkml2_2_AbstractObjectType_targetId', pyxb.binding.datatypes.NCName)
    __targetId._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 299, 4)
    __targetId._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 299, 4)
    
    targetId = property(__targetId.value, __targetId.set, None, None)

    _ElementMap.update({
        __ObjectSimpleExtensionGroup.name() : __ObjectSimpleExtensionGroup
    })
    _AttributeMap.update({
        __id.name() : __id,
        __targetId.name() : __targetId
    })
_module_typeBindings.AbstractObjectType = AbstractObjectType
Namespace.addCategoryObject('typeBinding', 'AbstractObjectType', AbstractObjectType)


# Complex type {http://www.opengis.net/kml/2.2}SnippetType with content type SIMPLE
class SnippetType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}SnippetType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SnippetType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 351, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute maxLines uses Python identifier maxLines
    __maxLines = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'maxLines'), 'maxLines', '__httpwww_opengis_netkml2_2_SnippetType_maxLines', pyxb.binding.datatypes.int, unicode_default='2')
    __maxLines._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 354, 8)
    __maxLines._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 354, 8)
    
    maxLines = property(__maxLines.value, __maxLines.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __maxLines.name() : __maxLines
    })
_module_typeBindings.SnippetType = SnippetType
Namespace.addCategoryObject('typeBinding', 'SnippetType', SnippetType)


# Complex type {http://www.opengis.net/kml/2.2}MetadataType with content type ELEMENT_ONLY
class MetadataType (pyxb.binding.basis.complexTypeDefinition):
    """MetadataType deprecated in 2.2"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MetadataType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 436, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MetadataType = MetadataType
Namespace.addCategoryObject('typeBinding', 'MetadataType', MetadataType)


# Complex type {http://www.opengis.net/kml/2.2}ExtendedDataType with content type ELEMENT_ONLY
class ExtendedDataType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}ExtendedDataType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExtendedDataType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 447, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/kml/2.2}SchemaData uses Python identifier SchemaData
    __SchemaData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SchemaData'), 'SchemaData', '__httpwww_opengis_netkml2_2_ExtendedDataType_httpwww_opengis_netkml2_2SchemaData', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 456, 2), )

    
    SchemaData = property(__SchemaData.value, __SchemaData.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Data uses Python identifier Data
    __Data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Data'), 'Data', '__httpwww_opengis_netkml2_2_ExtendedDataType_httpwww_opengis_netkml2_2Data', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 481, 2), )

    
    Data = property(__Data.value, __Data.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({
        __SchemaData.name() : __SchemaData,
        __Data.name() : __Data
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ExtendedDataType = ExtendedDataType
Namespace.addCategoryObject('typeBinding', 'ExtendedDataType', ExtendedDataType)


# Complex type {http://www.opengis.net/kml/2.2}SimpleDataType with content type SIMPLE
class SimpleDataType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}SimpleDataType with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SimpleDataType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 473, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_opengis_netkml2_2_SimpleDataType_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 476, 8)
    __name._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 476, 8)
    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.SimpleDataType = SimpleDataType
Namespace.addCategoryObject('typeBinding', 'SimpleDataType', SimpleDataType)


# Complex type {http://www.opengis.net/kml/2.2}KmlType with content type ELEMENT_ONLY
class KmlType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}KmlType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'KmlType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 606, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractFeatureGroup uses Python identifier AbstractFeatureGroup
    __AbstractFeatureGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureGroup'), 'AbstractFeatureGroup', '__httpwww_opengis_netkml2_2_KmlType_httpwww_opengis_netkml2_2AbstractFeatureGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 302, 2), )

    
    AbstractFeatureGroup = property(__AbstractFeatureGroup.value, __AbstractFeatureGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}KmlSimpleExtensionGroup uses Python identifier KmlSimpleExtensionGroup
    __KmlSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KmlSimpleExtensionGroup'), 'KmlSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_KmlType_httpwww_opengis_netkml2_2KmlSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 617, 2), )

    
    KmlSimpleExtensionGroup = property(__KmlSimpleExtensionGroup.value, __KmlSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}KmlObjectExtensionGroup uses Python identifier KmlObjectExtensionGroup
    __KmlObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'KmlObjectExtensionGroup'), 'KmlObjectExtensionGroup', '__httpwww_opengis_netkml2_2_KmlType_httpwww_opengis_netkml2_2KmlObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 618, 2), )

    
    KmlObjectExtensionGroup = property(__KmlObjectExtensionGroup.value, __KmlObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}NetworkLinkControl uses Python identifier NetworkLinkControl
    __NetworkLinkControl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkControl'), 'NetworkLinkControl', '__httpwww_opengis_netkml2_2_KmlType_httpwww_opengis_netkml2_2NetworkLinkControl', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 621, 2), )

    
    NetworkLinkControl = property(__NetworkLinkControl.value, __NetworkLinkControl.set, None, None)

    
    # Attribute hint uses Python identifier hint
    __hint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'hint'), 'hint', '__httpwww_opengis_netkml2_2_KmlType_hint', pyxb.binding.datatypes.string)
    __hint._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 615, 4)
    __hint._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 615, 4)
    
    hint = property(__hint.value, __hint.set, None, None)

    _ElementMap.update({
        __AbstractFeatureGroup.name() : __AbstractFeatureGroup,
        __KmlSimpleExtensionGroup.name() : __KmlSimpleExtensionGroup,
        __KmlObjectExtensionGroup.name() : __KmlObjectExtensionGroup,
        __NetworkLinkControl.name() : __NetworkLinkControl
    })
    _AttributeMap.update({
        __hint.name() : __hint
    })
_module_typeBindings.KmlType = KmlType
Namespace.addCategoryObject('typeBinding', 'KmlType', KmlType)


# Complex type {http://www.opengis.net/kml/2.2}NetworkLinkControlType with content type ELEMENT_ONLY
class NetworkLinkControlType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}NetworkLinkControlType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkControlType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 622, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/kml/2.2}cookie uses Python identifier cookie
    __cookie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cookie'), 'cookie', '__httpwww_opengis_netkml2_2_NetworkLinkControlType_httpwww_opengis_netkml2_2cookie', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 197, 2), )

    
    cookie = property(__cookie.value, __cookie.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}expires uses Python identifier expires
    __expires = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'expires'), 'expires', '__httpwww_opengis_netkml2_2_NetworkLinkControlType_httpwww_opengis_netkml2_2expires', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 205, 2), )

    
    expires = property(__expires.value, __expires.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}linkDescription uses Python identifier linkDescription
    __linkDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'linkDescription'), 'linkDescription', '__httpwww_opengis_netkml2_2_NetworkLinkControlType_httpwww_opengis_netkml2_2linkDescription', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 222, 2), )

    
    linkDescription = property(__linkDescription.value, __linkDescription.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}linkName uses Python identifier linkName
    __linkName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'linkName'), 'linkName', '__httpwww_opengis_netkml2_2_NetworkLinkControlType_httpwww_opengis_netkml2_2linkName', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 223, 2), )

    
    linkName = property(__linkName.value, __linkName.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}linkSnippet uses Python identifier linkSnippet
    __linkSnippet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'linkSnippet'), 'linkSnippet', '__httpwww_opengis_netkml2_2_NetworkLinkControlType_httpwww_opengis_netkml2_2linkSnippet', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 224, 2), )

    
    linkSnippet = property(__linkSnippet.value, __linkSnippet.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}maxSessionLength uses Python identifier maxSessionLength
    __maxSessionLength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxSessionLength'), 'maxSessionLength', '__httpwww_opengis_netkml2_2_NetworkLinkControlType_httpwww_opengis_netkml2_2maxSessionLength', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 228, 2), )

    
    maxSessionLength = property(__maxSessionLength.value, __maxSessionLength.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'message'), 'message', '__httpwww_opengis_netkml2_2_NetworkLinkControlType_httpwww_opengis_netkml2_2message', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 229, 2), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}minRefreshPeriod uses Python identifier minRefreshPeriod
    __minRefreshPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'minRefreshPeriod'), 'minRefreshPeriod', '__httpwww_opengis_netkml2_2_NetworkLinkControlType_httpwww_opengis_netkml2_2minRefreshPeriod', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 233, 2), )

    
    minRefreshPeriod = property(__minRefreshPeriod.value, __minRefreshPeriod.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractViewGroup uses Python identifier AbstractViewGroup
    __AbstractViewGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup'), 'AbstractViewGroup', '__httpwww_opengis_netkml2_2_NetworkLinkControlType_httpwww_opengis_netkml2_2AbstractViewGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 359, 2), )

    
    AbstractViewGroup = property(__AbstractViewGroup.value, __AbstractViewGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}NetworkLinkControlSimpleExtensionGroup uses Python identifier NetworkLinkControlSimpleExtensionGroup
    __NetworkLinkControlSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkControlSimpleExtensionGroup'), 'NetworkLinkControlSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_NetworkLinkControlType_httpwww_opengis_netkml2_2NetworkLinkControlSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 640, 2), )

    
    NetworkLinkControlSimpleExtensionGroup = property(__NetworkLinkControlSimpleExtensionGroup.value, __NetworkLinkControlSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}NetworkLinkControlObjectExtensionGroup uses Python identifier NetworkLinkControlObjectExtensionGroup
    __NetworkLinkControlObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkControlObjectExtensionGroup'), 'NetworkLinkControlObjectExtensionGroup', '__httpwww_opengis_netkml2_2_NetworkLinkControlType_httpwww_opengis_netkml2_2NetworkLinkControlObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 642, 2), )

    
    NetworkLinkControlObjectExtensionGroup = property(__NetworkLinkControlObjectExtensionGroup.value, __NetworkLinkControlObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Update uses Python identifier Update
    __Update = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Update'), 'Update', '__httpwww_opengis_netkml2_2_NetworkLinkControlType_httpwww_opengis_netkml2_2Update', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1601, 2), )

    
    Update = property(__Update.value, __Update.set, None, None)

    _ElementMap.update({
        __cookie.name() : __cookie,
        __expires.name() : __expires,
        __linkDescription.name() : __linkDescription,
        __linkName.name() : __linkName,
        __linkSnippet.name() : __linkSnippet,
        __maxSessionLength.name() : __maxSessionLength,
        __message.name() : __message,
        __minRefreshPeriod.name() : __minRefreshPeriod,
        __AbstractViewGroup.name() : __AbstractViewGroup,
        __NetworkLinkControlSimpleExtensionGroup.name() : __NetworkLinkControlSimpleExtensionGroup,
        __NetworkLinkControlObjectExtensionGroup.name() : __NetworkLinkControlObjectExtensionGroup,
        __Update.name() : __Update
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.NetworkLinkControlType = NetworkLinkControlType
Namespace.addCategoryObject('typeBinding', 'NetworkLinkControlType', NetworkLinkControlType)


# Complex type {http://www.opengis.net/kml/2.2}SchemaType with content type ELEMENT_ONLY
class SchemaType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}SchemaType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SchemaType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 668, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/kml/2.2}SchemaExtension uses Python identifier SchemaExtension
    __SchemaExtension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SchemaExtension'), 'SchemaExtension', '__httpwww_opengis_netkml2_2_SchemaType_httpwww_opengis_netkml2_2SchemaExtension', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 676, 2), )

    
    SchemaExtension = property(__SchemaExtension.value, __SchemaExtension.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}SimpleField uses Python identifier SimpleField
    __SimpleField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SimpleField'), 'SimpleField', '__httpwww_opengis_netkml2_2_SchemaType_httpwww_opengis_netkml2_2SimpleField', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 678, 2), )

    
    SimpleField = property(__SimpleField.value, __SimpleField.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_opengis_netkml2_2_SchemaType_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 673, 4)
    __name._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 673, 4)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__httpwww_opengis_netkml2_2_SchemaType_id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 674, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 674, 4)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __SchemaExtension.name() : __SchemaExtension,
        __SimpleField.name() : __SimpleField
    })
    _AttributeMap.update({
        __name.name() : __name,
        __id.name() : __id
    })
_module_typeBindings.SchemaType = SchemaType
Namespace.addCategoryObject('typeBinding', 'SchemaType', SchemaType)


# Complex type {http://www.opengis.net/kml/2.2}SimpleFieldType with content type ELEMENT_ONLY
class SimpleFieldType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}SimpleFieldType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SimpleFieldType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 679, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/kml/2.2}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_opengis_netkml2_2_SimpleFieldType_httpwww_opengis_netkml2_2displayName', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 200, 2), )

    
    displayName = property(__displayName.value, __displayName.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}SimpleFieldExtension uses Python identifier SimpleFieldExtension
    __SimpleFieldExtension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SimpleFieldExtension'), 'SimpleFieldExtension', '__httpwww_opengis_netkml2_2_SimpleFieldType_httpwww_opengis_netkml2_2SimpleFieldExtension', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 688, 2), )

    
    SimpleFieldExtension = property(__SimpleFieldExtension.value, __SimpleFieldExtension.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpwww_opengis_netkml2_2_SimpleFieldType_type', pyxb.binding.datatypes.string)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 685, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 685, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_opengis_netkml2_2_SimpleFieldType_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 686, 4)
    __name._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 686, 4)
    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __displayName.name() : __displayName,
        __SimpleFieldExtension.name() : __SimpleFieldExtension
    })
    _AttributeMap.update({
        __type.name() : __type,
        __name.name() : __name
    })
_module_typeBindings.SimpleFieldType = SimpleFieldType
Namespace.addCategoryObject('typeBinding', 'SimpleFieldType', SimpleFieldType)


# Complex type {http://www.opengis.net/kml/2.2}BoundaryType with content type ELEMENT_ONLY
class BoundaryType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}BoundaryType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BoundaryType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 974, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/kml/2.2}LinearRing uses Python identifier LinearRing
    __LinearRing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinearRing'), 'LinearRing', '__httpwww_opengis_netkml2_2_BoundaryType_httpwww_opengis_netkml2_2LinearRing', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 924, 2), )

    
    LinearRing = property(__LinearRing.value, __LinearRing.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}BoundarySimpleExtensionGroup uses Python identifier BoundarySimpleExtensionGroup
    __BoundarySimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BoundarySimpleExtensionGroup'), 'BoundarySimpleExtensionGroup', '__httpwww_opengis_netkml2_2_BoundaryType_httpwww_opengis_netkml2_2BoundarySimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 983, 2), )

    
    BoundarySimpleExtensionGroup = property(__BoundarySimpleExtensionGroup.value, __BoundarySimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}BoundaryObjectExtensionGroup uses Python identifier BoundaryObjectExtensionGroup
    __BoundaryObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BoundaryObjectExtensionGroup'), 'BoundaryObjectExtensionGroup', '__httpwww_opengis_netkml2_2_BoundaryType_httpwww_opengis_netkml2_2BoundaryObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 985, 2), )

    
    BoundaryObjectExtensionGroup = property(__BoundaryObjectExtensionGroup.value, __BoundaryObjectExtensionGroup.set, None, None)

    _ElementMap.update({
        __LinearRing.name() : __LinearRing,
        __BoundarySimpleExtensionGroup.name() : __BoundarySimpleExtensionGroup,
        __BoundaryObjectExtensionGroup.name() : __BoundaryObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BoundaryType = BoundaryType
Namespace.addCategoryObject('typeBinding', 'BoundaryType', BoundaryType)


# Complex type {http://www.opengis.net/kml/2.2}UpdateType with content type ELEMENT_ONLY
class UpdateType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}UpdateType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UpdateType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1602, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/kml/2.2}targetHref uses Python identifier targetHref
    __targetHref = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'targetHref'), 'targetHref', '__httpwww_opengis_netkml2_2_UpdateType_httpwww_opengis_netkml2_2targetHref', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 264, 2), )

    
    targetHref = property(__targetHref.value, __targetHref.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}UpdateOpExtensionGroup uses Python identifier UpdateOpExtensionGroup
    __UpdateOpExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UpdateOpExtensionGroup'), 'UpdateOpExtensionGroup', '__httpwww_opengis_netkml2_2_UpdateType_httpwww_opengis_netkml2_2UpdateOpExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1615, 2), )

    
    UpdateOpExtensionGroup = property(__UpdateOpExtensionGroup.value, __UpdateOpExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}UpdateExtensionGroup uses Python identifier UpdateExtensionGroup
    __UpdateExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UpdateExtensionGroup'), 'UpdateExtensionGroup', '__httpwww_opengis_netkml2_2_UpdateType_httpwww_opengis_netkml2_2UpdateExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1616, 2), )

    
    UpdateExtensionGroup = property(__UpdateExtensionGroup.value, __UpdateExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Create uses Python identifier Create
    __Create = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Create'), 'Create', '__httpwww_opengis_netkml2_2_UpdateType_httpwww_opengis_netkml2_2Create', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1618, 2), )

    
    Create = property(__Create.value, __Create.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Delete uses Python identifier Delete
    __Delete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Delete'), 'Delete', '__httpwww_opengis_netkml2_2_UpdateType_httpwww_opengis_netkml2_2Delete', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1626, 2), )

    
    Delete = property(__Delete.value, __Delete.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Change uses Python identifier Change
    __Change = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Change'), 'Change', '__httpwww_opengis_netkml2_2_UpdateType_httpwww_opengis_netkml2_2Change', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1634, 2), )

    
    Change = property(__Change.value, __Change.set, None, None)

    _ElementMap.update({
        __targetHref.name() : __targetHref,
        __UpdateOpExtensionGroup.name() : __UpdateOpExtensionGroup,
        __UpdateExtensionGroup.name() : __UpdateExtensionGroup,
        __Create.name() : __Create,
        __Delete.name() : __Delete,
        __Change.name() : __Change
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.UpdateType = UpdateType
Namespace.addCategoryObject('typeBinding', 'UpdateType', UpdateType)


# Complex type {http://www.opengis.net/kml/2.2}CreateType with content type ELEMENT_ONLY
class CreateType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}CreateType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CreateType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1619, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractContainerGroup uses Python identifier AbstractContainerGroup
    __AbstractContainerGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerGroup'), 'AbstractContainerGroup', '__httpwww_opengis_netkml2_2_CreateType_httpwww_opengis_netkml2_2AbstractContainerGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 497, 2), )

    
    AbstractContainerGroup = property(__AbstractContainerGroup.value, __AbstractContainerGroup.set, None, None)

    _ElementMap.update({
        __AbstractContainerGroup.name() : __AbstractContainerGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CreateType = CreateType
Namespace.addCategoryObject('typeBinding', 'CreateType', CreateType)


# Complex type {http://www.opengis.net/kml/2.2}DeleteType with content type ELEMENT_ONLY
class DeleteType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}DeleteType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeleteType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1627, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractFeatureGroup uses Python identifier AbstractFeatureGroup
    __AbstractFeatureGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureGroup'), 'AbstractFeatureGroup', '__httpwww_opengis_netkml2_2_DeleteType_httpwww_opengis_netkml2_2AbstractFeatureGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 302, 2), )

    
    AbstractFeatureGroup = property(__AbstractFeatureGroup.value, __AbstractFeatureGroup.set, None, None)

    _ElementMap.update({
        __AbstractFeatureGroup.name() : __AbstractFeatureGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeleteType = DeleteType
Namespace.addCategoryObject('typeBinding', 'DeleteType', DeleteType)


# Complex type {http://www.opengis.net/kml/2.2}ChangeType with content type ELEMENT_ONLY
class ChangeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}ChangeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ChangeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1635, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractObjectGroup uses Python identifier AbstractObjectGroup
    __AbstractObjectGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractObjectGroup'), 'AbstractObjectGroup', '__httpwww_opengis_netkml2_2_ChangeType_httpwww_opengis_netkml2_2AbstractObjectGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 285, 2), )

    
    AbstractObjectGroup = property(__AbstractObjectGroup.value, __AbstractObjectGroup.set, None, None)

    _ElementMap.update({
        __AbstractObjectGroup.name() : __AbstractObjectGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ChangeType = ChangeType
Namespace.addCategoryObject('typeBinding', 'ChangeType', ChangeType)


# Complex type {http://www.opengis.net/kml/2.2}vec2Type with content type EMPTY
class vec2Type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.opengis.net/kml/2.2}vec2Type with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'vec2Type')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 178, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x'), 'x', '__httpwww_opengis_netkml2_2_vec2Type_x', pyxb.binding.datatypes.double, unicode_default='1.0')
    __x._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 179, 4)
    __x._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 179, 4)
    
    x = property(__x.value, __x.set, None, None)

    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y'), 'y', '__httpwww_opengis_netkml2_2_vec2Type_y', pyxb.binding.datatypes.double, unicode_default='1.0')
    __y._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 180, 4)
    __y._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 180, 4)
    
    y = property(__y.value, __y.set, None, None)

    
    # Attribute xunits uses Python identifier xunits
    __xunits = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'xunits'), 'xunits', '__httpwww_opengis_netkml2_2_vec2Type_xunits', _module_typeBindings.unitsEnumType, unicode_default='fraction')
    __xunits._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 181, 4)
    __xunits._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 181, 4)
    
    xunits = property(__xunits.value, __xunits.set, None, None)

    
    # Attribute yunits uses Python identifier yunits
    __yunits = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'yunits'), 'yunits', '__httpwww_opengis_netkml2_2_vec2Type_yunits', _module_typeBindings.unitsEnumType, unicode_default='fraction')
    __yunits._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 183, 4)
    __yunits._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 183, 4)
    
    yunits = property(__yunits.value, __yunits.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __x.name() : __x,
        __y.name() : __y,
        __xunits.name() : __xunits,
        __yunits.name() : __yunits
    })
_module_typeBindings.vec2Type = vec2Type
Namespace.addCategoryObject('typeBinding', 'vec2Type', vec2Type)


# Complex type {http://www.opengis.net/kml/2.2}AbstractFeatureType with content type ELEMENT_ONLY
class AbstractFeatureType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}AbstractFeatureType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 304, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}address uses Python identifier address
    __address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'address'), 'address', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2address', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 187, 2), )

    
    address = property(__address.value, __address.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2description', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 199, 2), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2name', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 239, 2), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}open uses Python identifier open
    __open = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'open'), 'open', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2open', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 242, 2), )

    
    open = property(__open.value, __open.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}phoneNumber uses Python identifier phoneNumber
    __phoneNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber'), 'phoneNumber', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2phoneNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 245, 2), )

    
    phoneNumber = property(__phoneNumber.value, __phoneNumber.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}snippet uses Python identifier snippet
    __snippet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'snippet'), 'snippet', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2snippet', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 261, 2), )

    
    snippet = property(__snippet.value, __snippet.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}styleUrl uses Python identifier styleUrl
    __styleUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'styleUrl'), 'styleUrl', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2styleUrl', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 263, 2), )

    
    styleUrl = property(__styleUrl.value, __styleUrl.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}visibility uses Python identifier visibility
    __visibility = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'visibility'), 'visibility', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2visibility', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 277, 2), )

    
    visibility = property(__visibility.value, __visibility.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractFeatureObjectExtensionGroup uses Python identifier AbstractFeatureObjectExtensionGroup
    __AbstractFeatureObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureObjectExtensionGroup'), 'AbstractFeatureObjectExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2AbstractFeatureObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 345, 2), )

    
    AbstractFeatureObjectExtensionGroup = property(__AbstractFeatureObjectExtensionGroup.value, __AbstractFeatureObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractFeatureSimpleExtensionGroup uses Python identifier AbstractFeatureSimpleExtensionGroup
    __AbstractFeatureSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureSimpleExtensionGroup'), 'AbstractFeatureSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2AbstractFeatureSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 347, 2), )

    
    AbstractFeatureSimpleExtensionGroup = property(__AbstractFeatureSimpleExtensionGroup.value, __AbstractFeatureSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Snippet uses Python identifier Snippet
    __Snippet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Snippet'), 'Snippet', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2Snippet', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 350, 2), )

    
    Snippet = property(__Snippet.value, __Snippet.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractViewGroup uses Python identifier AbstractViewGroup
    __AbstractViewGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup'), 'AbstractViewGroup', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2AbstractViewGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 359, 2), )

    
    AbstractViewGroup = property(__AbstractViewGroup.value, __AbstractViewGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Metadata uses Python identifier Metadata
    __Metadata = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Metadata'), 'Metadata', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2Metadata', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 430, 2), )

    
    Metadata = property(__Metadata.value, __Metadata.set, None, 'Metadata deprecated in 2.2')

    
    # Element {http://www.opengis.net/kml/2.2}ExtendedData uses Python identifier ExtendedData
    __ExtendedData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExtendedData'), 'ExtendedData', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2ExtendedData', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 446, 2), )

    
    ExtendedData = property(__ExtendedData.value, __ExtendedData.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractStyleSelectorGroup uses Python identifier AbstractStyleSelectorGroup
    __AbstractStyleSelectorGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup'), 'AbstractStyleSelectorGroup', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2AbstractStyleSelectorGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 557, 2), )

    
    AbstractStyleSelectorGroup = property(__AbstractStyleSelectorGroup.value, __AbstractStyleSelectorGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractTimePrimitiveGroup uses Python identifier AbstractTimePrimitiveGroup
    __AbstractTimePrimitiveGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveGroup'), 'AbstractTimePrimitiveGroup', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2AbstractTimePrimitiveGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 577, 2), )

    
    AbstractTimePrimitiveGroup = property(__AbstractTimePrimitiveGroup.value, __AbstractTimePrimitiveGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Region uses Python identifier Region
    __Region = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Region'), 'Region', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_opengis_netkml2_2Region', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 759, 2), )

    
    Region = property(__Region.value, __Region.set, None, None)

    
    # Element {http://www.w3.org/2005/Atom}author uses Python identifier author
    __author = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_atom, 'author'), 'author', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_w3_org2005Atomauthor', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/atom-author-link.xsd', 28, 2), )

    
    author = property(__author.value, __author.set, None, None)

    
    # Element {http://www.w3.org/2005/Atom}link uses Python identifier link
    __link = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_atom, 'link'), 'link', '__httpwww_opengis_netkml2_2_AbstractFeatureType_httpwww_w3_org2005Atomlink', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/atom-author-link.xsd', 31, 2), )

    
    link = property(__link.value, __link.set, None, None)

    
    # Element {urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressDetails uses Python identifier AddressDetails
    __AddressDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_xal, 'AddressDetails'), 'AddressDetails', '__httpwww_opengis_netkml2_2_AbstractFeatureType_urnoasisnamestcciqxsdschemaxAL2_0AddressDetails', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/citygml/xAL/xAL.xsd', 44, 1), )

    
    AddressDetails = property(__AddressDetails.value, __AddressDetails.set, None, 'This container defines the details of the address. Can define multiple addresses including tracking address history')

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __address.name() : __address,
        __description.name() : __description,
        __name.name() : __name,
        __open.name() : __open,
        __phoneNumber.name() : __phoneNumber,
        __snippet.name() : __snippet,
        __styleUrl.name() : __styleUrl,
        __visibility.name() : __visibility,
        __AbstractFeatureObjectExtensionGroup.name() : __AbstractFeatureObjectExtensionGroup,
        __AbstractFeatureSimpleExtensionGroup.name() : __AbstractFeatureSimpleExtensionGroup,
        __Snippet.name() : __Snippet,
        __AbstractViewGroup.name() : __AbstractViewGroup,
        __Metadata.name() : __Metadata,
        __ExtendedData.name() : __ExtendedData,
        __AbstractStyleSelectorGroup.name() : __AbstractStyleSelectorGroup,
        __AbstractTimePrimitiveGroup.name() : __AbstractTimePrimitiveGroup,
        __Region.name() : __Region,
        __author.name() : __author,
        __link.name() : __link,
        __AddressDetails.name() : __AddressDetails
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractFeatureType = AbstractFeatureType
Namespace.addCategoryObject('typeBinding', 'AbstractFeatureType', AbstractFeatureType)


# Complex type {http://www.opengis.net/kml/2.2}AbstractViewType with content type ELEMENT_ONLY
class AbstractViewType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}AbstractViewType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractViewType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 361, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractViewSimpleExtensionGroup uses Python identifier AbstractViewSimpleExtensionGroup
    __AbstractViewSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewSimpleExtensionGroup'), 'AbstractViewSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractViewType_httpwww_opengis_netkml2_2AbstractViewSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 373, 2), )

    
    AbstractViewSimpleExtensionGroup = property(__AbstractViewSimpleExtensionGroup.value, __AbstractViewSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractViewObjectExtensionGroup uses Python identifier AbstractViewObjectExtensionGroup
    __AbstractViewObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewObjectExtensionGroup'), 'AbstractViewObjectExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractViewType_httpwww_opengis_netkml2_2AbstractViewObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 375, 2), )

    
    AbstractViewObjectExtensionGroup = property(__AbstractViewObjectExtensionGroup.value, __AbstractViewObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __AbstractViewSimpleExtensionGroup.name() : __AbstractViewSimpleExtensionGroup,
        __AbstractViewObjectExtensionGroup.name() : __AbstractViewObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractViewType = AbstractViewType
Namespace.addCategoryObject('typeBinding', 'AbstractViewType', AbstractViewType)


# Complex type {http://www.opengis.net/kml/2.2}SchemaDataType with content type ELEMENT_ONLY
class SchemaDataType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}SchemaDataType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SchemaDataType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 458, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}SchemaDataExtension uses Python identifier SchemaDataExtension
    __SchemaDataExtension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SchemaDataExtension'), 'SchemaDataExtension', '__httpwww_opengis_netkml2_2_SchemaDataType_httpwww_opengis_netkml2_2SchemaDataExtension', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 470, 2), )

    
    SchemaDataExtension = property(__SchemaDataExtension.value, __SchemaDataExtension.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}SimpleData uses Python identifier SimpleData
    __SimpleData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SimpleData'), 'SimpleData', '__httpwww_opengis_netkml2_2_SchemaDataType_httpwww_opengis_netkml2_2SimpleData', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 472, 2), )

    
    SimpleData = property(__SimpleData.value, __SimpleData.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute schemaUrl uses Python identifier schemaUrl
    __schemaUrl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'schemaUrl'), 'schemaUrl', '__httpwww_opengis_netkml2_2_SchemaDataType_schemaUrl', pyxb.binding.datatypes.anyURI)
    __schemaUrl._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 466, 8)
    __schemaUrl._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 466, 8)
    
    schemaUrl = property(__schemaUrl.value, __schemaUrl.set, None, None)

    _ElementMap.update({
        __SchemaDataExtension.name() : __SchemaDataExtension,
        __SimpleData.name() : __SimpleData
    })
    _AttributeMap.update({
        __schemaUrl.name() : __schemaUrl
    })
_module_typeBindings.SchemaDataType = SchemaDataType
Namespace.addCategoryObject('typeBinding', 'SchemaDataType', SchemaDataType)


# Complex type {http://www.opengis.net/kml/2.2}DataType with content type ELEMENT_ONLY
class DataType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}DataType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 483, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayName'), 'displayName', '__httpwww_opengis_netkml2_2_DataType_httpwww_opengis_netkml2_2displayName', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 200, 2), )

    
    displayName = property(__displayName.value, __displayName.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__httpwww_opengis_netkml2_2_DataType_httpwww_opengis_netkml2_2value', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 271, 2), )

    
    value_ = property(__value.value, __value.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}DataExtension uses Python identifier DataExtension
    __DataExtension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataExtension'), 'DataExtension', '__httpwww_opengis_netkml2_2_DataType_httpwww_opengis_netkml2_2DataExtension', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 495, 2), )

    
    DataExtension = property(__DataExtension.value, __DataExtension.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpwww_opengis_netkml2_2_DataType_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 491, 8)
    __name._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 491, 8)
    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __displayName.name() : __displayName,
        __value.name() : __value,
        __DataExtension.name() : __DataExtension
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.DataType = DataType
Namespace.addCategoryObject('typeBinding', 'DataType', DataType)


# Complex type {http://www.opengis.net/kml/2.2}AbstractGeometryType with content type ELEMENT_ONLY
class AbstractGeometryType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}AbstractGeometryType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 518, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractGeometrySimpleExtensionGroup uses Python identifier AbstractGeometrySimpleExtensionGroup
    __AbstractGeometrySimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometrySimpleExtensionGroup'), 'AbstractGeometrySimpleExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractGeometryType_httpwww_opengis_netkml2_2AbstractGeometrySimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 530, 2), )

    
    AbstractGeometrySimpleExtensionGroup = property(__AbstractGeometrySimpleExtensionGroup.value, __AbstractGeometrySimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractGeometryObjectExtensionGroup uses Python identifier AbstractGeometryObjectExtensionGroup
    __AbstractGeometryObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryObjectExtensionGroup'), 'AbstractGeometryObjectExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractGeometryType_httpwww_opengis_netkml2_2AbstractGeometryObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 532, 2), )

    
    AbstractGeometryObjectExtensionGroup = property(__AbstractGeometryObjectExtensionGroup.value, __AbstractGeometryObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __AbstractGeometrySimpleExtensionGroup.name() : __AbstractGeometrySimpleExtensionGroup,
        __AbstractGeometryObjectExtensionGroup.name() : __AbstractGeometryObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractGeometryType = AbstractGeometryType
Namespace.addCategoryObject('typeBinding', 'AbstractGeometryType', AbstractGeometryType)


# Complex type {http://www.opengis.net/kml/2.2}AbstractStyleSelectorType with content type ELEMENT_ONLY
class AbstractStyleSelectorType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}AbstractStyleSelectorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 560, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractStyleSelectorSimpleExtensionGroup uses Python identifier AbstractStyleSelectorSimpleExtensionGroup
    __AbstractStyleSelectorSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorSimpleExtensionGroup'), 'AbstractStyleSelectorSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractStyleSelectorType_httpwww_opengis_netkml2_2AbstractStyleSelectorSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 572, 2), )

    
    AbstractStyleSelectorSimpleExtensionGroup = property(__AbstractStyleSelectorSimpleExtensionGroup.value, __AbstractStyleSelectorSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractStyleSelectorObjectExtensionGroup uses Python identifier AbstractStyleSelectorObjectExtensionGroup
    __AbstractStyleSelectorObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorObjectExtensionGroup'), 'AbstractStyleSelectorObjectExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractStyleSelectorType_httpwww_opengis_netkml2_2AbstractStyleSelectorObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 574, 2), )

    
    AbstractStyleSelectorObjectExtensionGroup = property(__AbstractStyleSelectorObjectExtensionGroup.value, __AbstractStyleSelectorObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __AbstractStyleSelectorSimpleExtensionGroup.name() : __AbstractStyleSelectorSimpleExtensionGroup,
        __AbstractStyleSelectorObjectExtensionGroup.name() : __AbstractStyleSelectorObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractStyleSelectorType = AbstractStyleSelectorType
Namespace.addCategoryObject('typeBinding', 'AbstractStyleSelectorType', AbstractStyleSelectorType)


# Complex type {http://www.opengis.net/kml/2.2}AbstractTimePrimitiveType with content type ELEMENT_ONLY
class AbstractTimePrimitiveType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}AbstractTimePrimitiveType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 580, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractTimePrimitiveSimpleExtensionGroup uses Python identifier AbstractTimePrimitiveSimpleExtensionGroup
    __AbstractTimePrimitiveSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveSimpleExtensionGroup'), 'AbstractTimePrimitiveSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractTimePrimitiveType_httpwww_opengis_netkml2_2AbstractTimePrimitiveSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 592, 2), )

    
    AbstractTimePrimitiveSimpleExtensionGroup = property(__AbstractTimePrimitiveSimpleExtensionGroup.value, __AbstractTimePrimitiveSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractTimePrimitiveObjectExtensionGroup uses Python identifier AbstractTimePrimitiveObjectExtensionGroup
    __AbstractTimePrimitiveObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveObjectExtensionGroup'), 'AbstractTimePrimitiveObjectExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractTimePrimitiveType_httpwww_opengis_netkml2_2AbstractTimePrimitiveObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 594, 2), )

    
    AbstractTimePrimitiveObjectExtensionGroup = property(__AbstractTimePrimitiveObjectExtensionGroup.value, __AbstractTimePrimitiveObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __AbstractTimePrimitiveSimpleExtensionGroup.name() : __AbstractTimePrimitiveSimpleExtensionGroup,
        __AbstractTimePrimitiveObjectExtensionGroup.name() : __AbstractTimePrimitiveObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractTimePrimitiveType = AbstractTimePrimitiveType
Namespace.addCategoryObject('typeBinding', 'AbstractTimePrimitiveType', AbstractTimePrimitiveType)


# Complex type {http://www.opengis.net/kml/2.2}RegionType with content type ELEMENT_ONLY
class RegionType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}RegionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RegionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 761, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}RegionSimpleExtensionGroup uses Python identifier RegionSimpleExtensionGroup
    __RegionSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegionSimpleExtensionGroup'), 'RegionSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_RegionType_httpwww_opengis_netkml2_2RegionSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 775, 2), )

    
    RegionSimpleExtensionGroup = property(__RegionSimpleExtensionGroup.value, __RegionSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}RegionObjectExtensionGroup uses Python identifier RegionObjectExtensionGroup
    __RegionObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RegionObjectExtensionGroup'), 'RegionObjectExtensionGroup', '__httpwww_opengis_netkml2_2_RegionType_httpwww_opengis_netkml2_2RegionObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 777, 2), )

    
    RegionObjectExtensionGroup = property(__RegionObjectExtensionGroup.value, __RegionObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LatLonAltBox uses Python identifier LatLonAltBox
    __LatLonAltBox = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LatLonAltBox'), 'LatLonAltBox', '__httpwww_opengis_netkml2_2_RegionType_httpwww_opengis_netkml2_2LatLonAltBox', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 780, 2), )

    
    LatLonAltBox = property(__LatLonAltBox.value, __LatLonAltBox.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Lod uses Python identifier Lod
    __Lod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Lod'), 'Lod', '__httpwww_opengis_netkml2_2_RegionType_httpwww_opengis_netkml2_2Lod', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 802, 2), )

    
    Lod = property(__Lod.value, __Lod.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __RegionSimpleExtensionGroup.name() : __RegionSimpleExtensionGroup,
        __RegionObjectExtensionGroup.name() : __RegionObjectExtensionGroup,
        __LatLonAltBox.name() : __LatLonAltBox,
        __Lod.name() : __Lod
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.RegionType = RegionType
Namespace.addCategoryObject('typeBinding', 'RegionType', RegionType)


# Complex type {http://www.opengis.net/kml/2.2}LodType with content type ELEMENT_ONLY
class LodType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}LodType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LodType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 804, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}minFadeExtent uses Python identifier minFadeExtent
    __minFadeExtent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'minFadeExtent'), 'minFadeExtent', '__httpwww_opengis_netkml2_2_LodType_httpwww_opengis_netkml2_2minFadeExtent', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 231, 2), )

    
    minFadeExtent = property(__minFadeExtent.value, __minFadeExtent.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}minLodPixels uses Python identifier minLodPixels
    __minLodPixels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'minLodPixels'), 'minLodPixels', '__httpwww_opengis_netkml2_2_LodType_httpwww_opengis_netkml2_2minLodPixels', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 232, 2), )

    
    minLodPixels = property(__minLodPixels.value, __minLodPixels.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}maxFadeExtent uses Python identifier maxFadeExtent
    __maxFadeExtent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxFadeExtent'), 'maxFadeExtent', '__httpwww_opengis_netkml2_2_LodType_httpwww_opengis_netkml2_2maxFadeExtent', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 235, 2), )

    
    maxFadeExtent = property(__maxFadeExtent.value, __maxFadeExtent.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}maxLodPixels uses Python identifier maxLodPixels
    __maxLodPixels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxLodPixels'), 'maxLodPixels', '__httpwww_opengis_netkml2_2_LodType_httpwww_opengis_netkml2_2maxLodPixels', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 236, 2), )

    
    maxLodPixels = property(__maxLodPixels.value, __maxLodPixels.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}LodSimpleExtensionGroup uses Python identifier LodSimpleExtensionGroup
    __LodSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LodSimpleExtensionGroup'), 'LodSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_LodType_httpwww_opengis_netkml2_2LodSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 820, 2), )

    
    LodSimpleExtensionGroup = property(__LodSimpleExtensionGroup.value, __LodSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LodObjectExtensionGroup uses Python identifier LodObjectExtensionGroup
    __LodObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LodObjectExtensionGroup'), 'LodObjectExtensionGroup', '__httpwww_opengis_netkml2_2_LodType_httpwww_opengis_netkml2_2LodObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 821, 2), )

    
    LodObjectExtensionGroup = property(__LodObjectExtensionGroup.value, __LodObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __minFadeExtent.name() : __minFadeExtent,
        __minLodPixels.name() : __minLodPixels,
        __maxFadeExtent.name() : __maxFadeExtent,
        __maxLodPixels.name() : __maxLodPixels,
        __LodSimpleExtensionGroup.name() : __LodSimpleExtensionGroup,
        __LodObjectExtensionGroup.name() : __LodObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LodType = LodType
Namespace.addCategoryObject('typeBinding', 'LodType', LodType)


# Complex type {http://www.opengis.net/kml/2.2}LocationType with content type ELEMENT_ONLY
class LocationType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}LocationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LocationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1015, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}altitude uses Python identifier altitude
    __altitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'altitude'), 'altitude', '__httpwww_opengis_netkml2_2_LocationType_httpwww_opengis_netkml2_2altitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 188, 2), )

    
    altitude = property(__altitude.value, __altitude.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}latitude uses Python identifier latitude
    __latitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'latitude'), 'latitude', '__httpwww_opengis_netkml2_2_LocationType_httpwww_opengis_netkml2_2latitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 220, 2), )

    
    latitude = property(__latitude.value, __latitude.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}longitude uses Python identifier longitude
    __longitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'longitude'), 'longitude', '__httpwww_opengis_netkml2_2_LocationType_httpwww_opengis_netkml2_2longitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 226, 2), )

    
    longitude = property(__longitude.value, __longitude.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}LocationSimpleExtensionGroup uses Python identifier LocationSimpleExtensionGroup
    __LocationSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LocationSimpleExtensionGroup'), 'LocationSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_LocationType_httpwww_opengis_netkml2_2LocationSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1030, 2), )

    
    LocationSimpleExtensionGroup = property(__LocationSimpleExtensionGroup.value, __LocationSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LocationObjectExtensionGroup uses Python identifier LocationObjectExtensionGroup
    __LocationObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LocationObjectExtensionGroup'), 'LocationObjectExtensionGroup', '__httpwww_opengis_netkml2_2_LocationType_httpwww_opengis_netkml2_2LocationObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1032, 2), )

    
    LocationObjectExtensionGroup = property(__LocationObjectExtensionGroup.value, __LocationObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __altitude.name() : __altitude,
        __latitude.name() : __latitude,
        __longitude.name() : __longitude,
        __LocationSimpleExtensionGroup.name() : __LocationSimpleExtensionGroup,
        __LocationObjectExtensionGroup.name() : __LocationObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LocationType = LocationType
Namespace.addCategoryObject('typeBinding', 'LocationType', LocationType)


# Complex type {http://www.opengis.net/kml/2.2}OrientationType with content type ELEMENT_ONLY
class OrientationType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}OrientationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OrientationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1037, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}heading uses Python identifier heading
    __heading = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heading'), 'heading', '__httpwww_opengis_netkml2_2_OrientationType_httpwww_opengis_netkml2_2heading', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 210, 2), )

    
    heading = property(__heading.value, __heading.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}roll uses Python identifier roll
    __roll = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'roll'), 'roll', '__httpwww_opengis_netkml2_2_OrientationType_httpwww_opengis_netkml2_2roll', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 252, 2), )

    
    roll = property(__roll.value, __roll.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}tilt uses Python identifier tilt
    __tilt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tilt'), 'tilt', '__httpwww_opengis_netkml2_2_OrientationType_httpwww_opengis_netkml2_2tilt', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 269, 2), )

    
    tilt = property(__tilt.value, __tilt.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}OrientationSimpleExtensionGroup uses Python identifier OrientationSimpleExtensionGroup
    __OrientationSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrientationSimpleExtensionGroup'), 'OrientationSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_OrientationType_httpwww_opengis_netkml2_2OrientationSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1052, 2), )

    
    OrientationSimpleExtensionGroup = property(__OrientationSimpleExtensionGroup.value, __OrientationSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}OrientationObjectExtensionGroup uses Python identifier OrientationObjectExtensionGroup
    __OrientationObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrientationObjectExtensionGroup'), 'OrientationObjectExtensionGroup', '__httpwww_opengis_netkml2_2_OrientationType_httpwww_opengis_netkml2_2OrientationObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1054, 2), )

    
    OrientationObjectExtensionGroup = property(__OrientationObjectExtensionGroup.value, __OrientationObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __heading.name() : __heading,
        __roll.name() : __roll,
        __tilt.name() : __tilt,
        __OrientationSimpleExtensionGroup.name() : __OrientationSimpleExtensionGroup,
        __OrientationObjectExtensionGroup.name() : __OrientationObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.OrientationType = OrientationType
Namespace.addCategoryObject('typeBinding', 'OrientationType', OrientationType)


# Complex type {http://www.opengis.net/kml/2.2}ScaleType with content type ELEMENT_ONLY
class ScaleType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}ScaleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScaleType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1059, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}x uses Python identifier x
    __x = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'x'), 'x', '__httpwww_opengis_netkml2_2_ScaleType_httpwww_opengis_netkml2_2x', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 281, 2), )

    
    x = property(__x.value, __x.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}y uses Python identifier y
    __y = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'y'), 'y', '__httpwww_opengis_netkml2_2_ScaleType_httpwww_opengis_netkml2_2y', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 282, 2), )

    
    y = property(__y.value, __y.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}z uses Python identifier z
    __z = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'z'), 'z', '__httpwww_opengis_netkml2_2_ScaleType_httpwww_opengis_netkml2_2z', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 283, 2), )

    
    z = property(__z.value, __z.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}ScaleSimpleExtensionGroup uses Python identifier ScaleSimpleExtensionGroup
    __ScaleSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScaleSimpleExtensionGroup'), 'ScaleSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_ScaleType_httpwww_opengis_netkml2_2ScaleSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1074, 2), )

    
    ScaleSimpleExtensionGroup = property(__ScaleSimpleExtensionGroup.value, __ScaleSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ScaleObjectExtensionGroup uses Python identifier ScaleObjectExtensionGroup
    __ScaleObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScaleObjectExtensionGroup'), 'ScaleObjectExtensionGroup', '__httpwww_opengis_netkml2_2_ScaleType_httpwww_opengis_netkml2_2ScaleObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1076, 2), )

    
    ScaleObjectExtensionGroup = property(__ScaleObjectExtensionGroup.value, __ScaleObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __x.name() : __x,
        __y.name() : __y,
        __z.name() : __z,
        __ScaleSimpleExtensionGroup.name() : __ScaleSimpleExtensionGroup,
        __ScaleObjectExtensionGroup.name() : __ScaleObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ScaleType = ScaleType
Namespace.addCategoryObject('typeBinding', 'ScaleType', ScaleType)


# Complex type {http://www.opengis.net/kml/2.2}ResourceMapType with content type ELEMENT_ONLY
class ResourceMapType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}ResourceMapType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceMapType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1081, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}ResourceMapSimpleExtensionGroup uses Python identifier ResourceMapSimpleExtensionGroup
    __ResourceMapSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResourceMapSimpleExtensionGroup'), 'ResourceMapSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_ResourceMapType_httpwww_opengis_netkml2_2ResourceMapSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1094, 2), )

    
    ResourceMapSimpleExtensionGroup = property(__ResourceMapSimpleExtensionGroup.value, __ResourceMapSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ResourceMapObjectExtensionGroup uses Python identifier ResourceMapObjectExtensionGroup
    __ResourceMapObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResourceMapObjectExtensionGroup'), 'ResourceMapObjectExtensionGroup', '__httpwww_opengis_netkml2_2_ResourceMapType_httpwww_opengis_netkml2_2ResourceMapObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1096, 2), )

    
    ResourceMapObjectExtensionGroup = property(__ResourceMapObjectExtensionGroup.value, __ResourceMapObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Alias uses Python identifier Alias
    __Alias = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Alias'), 'Alias', '__httpwww_opengis_netkml2_2_ResourceMapType_httpwww_opengis_netkml2_2Alias', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1099, 2), )

    
    Alias = property(__Alias.value, __Alias.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __ResourceMapSimpleExtensionGroup.name() : __ResourceMapSimpleExtensionGroup,
        __ResourceMapObjectExtensionGroup.name() : __ResourceMapObjectExtensionGroup,
        __Alias.name() : __Alias
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ResourceMapType = ResourceMapType
Namespace.addCategoryObject('typeBinding', 'ResourceMapType', ResourceMapType)


# Complex type {http://www.opengis.net/kml/2.2}AliasType with content type ELEMENT_ONLY
class AliasType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}AliasType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AliasType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1101, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}sourceHref uses Python identifier sourceHref
    __sourceHref = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sourceHref'), 'sourceHref', '__httpwww_opengis_netkml2_2_AliasType_httpwww_opengis_netkml2_2sourceHref', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 260, 2), )

    
    sourceHref = property(__sourceHref.value, __sourceHref.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}targetHref uses Python identifier targetHref
    __targetHref = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'targetHref'), 'targetHref', '__httpwww_opengis_netkml2_2_AliasType_httpwww_opengis_netkml2_2targetHref', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 264, 2), )

    
    targetHref = property(__targetHref.value, __targetHref.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}AliasSimpleExtensionGroup uses Python identifier AliasSimpleExtensionGroup
    __AliasSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AliasSimpleExtensionGroup'), 'AliasSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_AliasType_httpwww_opengis_netkml2_2AliasSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1115, 2), )

    
    AliasSimpleExtensionGroup = property(__AliasSimpleExtensionGroup.value, __AliasSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AliasObjectExtensionGroup uses Python identifier AliasObjectExtensionGroup
    __AliasObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AliasObjectExtensionGroup'), 'AliasObjectExtensionGroup', '__httpwww_opengis_netkml2_2_AliasType_httpwww_opengis_netkml2_2AliasObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1117, 2), )

    
    AliasObjectExtensionGroup = property(__AliasObjectExtensionGroup.value, __AliasObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __sourceHref.name() : __sourceHref,
        __targetHref.name() : __targetHref,
        __AliasSimpleExtensionGroup.name() : __AliasSimpleExtensionGroup,
        __AliasObjectExtensionGroup.name() : __AliasObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AliasType = AliasType
Namespace.addCategoryObject('typeBinding', 'AliasType', AliasType)


# Complex type {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType with content type ELEMENT_ONLY
class AbstractLatLonBoxType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractLatLonBoxType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1142, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}east uses Python identifier east
    __east = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'east'), 'east', '__httpwww_opengis_netkml2_2_AbstractLatLonBoxType_httpwww_opengis_netkml2_2east', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 203, 2), )

    
    east = property(__east.value, __east.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}north uses Python identifier north
    __north = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'north'), 'north', '__httpwww_opengis_netkml2_2_AbstractLatLonBoxType_httpwww_opengis_netkml2_2north', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 241, 2), )

    
    north = property(__north.value, __north.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}south uses Python identifier south
    __south = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'south'), 'south', '__httpwww_opengis_netkml2_2_AbstractLatLonBoxType_httpwww_opengis_netkml2_2south', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 259, 2), )

    
    south = property(__south.value, __south.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}west uses Python identifier west
    __west = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'west'), 'west', '__httpwww_opengis_netkml2_2_AbstractLatLonBoxType_httpwww_opengis_netkml2_2west', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 278, 2), )

    
    west = property(__west.value, __west.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractLatLonBoxSimpleExtensionGroup uses Python identifier AbstractLatLonBoxSimpleExtensionGroup
    __AbstractLatLonBoxSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractLatLonBoxSimpleExtensionGroup'), 'AbstractLatLonBoxSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractLatLonBoxType_httpwww_opengis_netkml2_2AbstractLatLonBoxSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1158, 2), )

    
    AbstractLatLonBoxSimpleExtensionGroup = property(__AbstractLatLonBoxSimpleExtensionGroup.value, __AbstractLatLonBoxSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractLatLonBoxObjectExtensionGroup uses Python identifier AbstractLatLonBoxObjectExtensionGroup
    __AbstractLatLonBoxObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractLatLonBoxObjectExtensionGroup'), 'AbstractLatLonBoxObjectExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractLatLonBoxType_httpwww_opengis_netkml2_2AbstractLatLonBoxObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1160, 2), )

    
    AbstractLatLonBoxObjectExtensionGroup = property(__AbstractLatLonBoxObjectExtensionGroup.value, __AbstractLatLonBoxObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __east.name() : __east,
        __north.name() : __north,
        __south.name() : __south,
        __west.name() : __west,
        __AbstractLatLonBoxSimpleExtensionGroup.name() : __AbstractLatLonBoxSimpleExtensionGroup,
        __AbstractLatLonBoxObjectExtensionGroup.name() : __AbstractLatLonBoxObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractLatLonBoxType = AbstractLatLonBoxType
Namespace.addCategoryObject('typeBinding', 'AbstractLatLonBoxType', AbstractLatLonBoxType)


# Complex type {http://www.opengis.net/kml/2.2}ViewVolumeType with content type ELEMENT_ONLY
class ViewVolumeType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}ViewVolumeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ViewVolumeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1233, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}bottomFov uses Python identifier bottomFov
    __bottomFov = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bottomFov'), 'bottomFov', '__httpwww_opengis_netkml2_2_ViewVolumeType_httpwww_opengis_netkml2_2bottomFov', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 194, 2), )

    
    bottomFov = property(__bottomFov.value, __bottomFov.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}leftFov uses Python identifier leftFov
    __leftFov = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'leftFov'), 'leftFov', '__httpwww_opengis_netkml2_2_ViewVolumeType_httpwww_opengis_netkml2_2leftFov', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 221, 2), )

    
    leftFov = property(__leftFov.value, __leftFov.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}near uses Python identifier near
    __near = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'near'), 'near', '__httpwww_opengis_netkml2_2_ViewVolumeType_httpwww_opengis_netkml2_2near', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 240, 2), )

    
    near = property(__near.value, __near.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}rightFov uses Python identifier rightFov
    __rightFov = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'rightFov'), 'rightFov', '__httpwww_opengis_netkml2_2_ViewVolumeType_httpwww_opengis_netkml2_2rightFov', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 251, 2), )

    
    rightFov = property(__rightFov.value, __rightFov.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}topFov uses Python identifier topFov
    __topFov = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'topFov'), 'topFov', '__httpwww_opengis_netkml2_2_ViewVolumeType_httpwww_opengis_netkml2_2topFov', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 270, 2), )

    
    topFov = property(__topFov.value, __topFov.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}ViewVolumeSimpleExtensionGroup uses Python identifier ViewVolumeSimpleExtensionGroup
    __ViewVolumeSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ViewVolumeSimpleExtensionGroup'), 'ViewVolumeSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_ViewVolumeType_httpwww_opengis_netkml2_2ViewVolumeSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1250, 2), )

    
    ViewVolumeSimpleExtensionGroup = property(__ViewVolumeSimpleExtensionGroup.value, __ViewVolumeSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ViewVolumeObjectExtensionGroup uses Python identifier ViewVolumeObjectExtensionGroup
    __ViewVolumeObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ViewVolumeObjectExtensionGroup'), 'ViewVolumeObjectExtensionGroup', '__httpwww_opengis_netkml2_2_ViewVolumeType_httpwww_opengis_netkml2_2ViewVolumeObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1252, 2), )

    
    ViewVolumeObjectExtensionGroup = property(__ViewVolumeObjectExtensionGroup.value, __ViewVolumeObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __bottomFov.name() : __bottomFov,
        __leftFov.name() : __leftFov,
        __near.name() : __near,
        __rightFov.name() : __rightFov,
        __topFov.name() : __topFov,
        __ViewVolumeSimpleExtensionGroup.name() : __ViewVolumeSimpleExtensionGroup,
        __ViewVolumeObjectExtensionGroup.name() : __ViewVolumeObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ViewVolumeType = ViewVolumeType
Namespace.addCategoryObject('typeBinding', 'ViewVolumeType', ViewVolumeType)


# Complex type {http://www.opengis.net/kml/2.2}ImagePyramidType with content type ELEMENT_ONLY
class ImagePyramidType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}ImagePyramidType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ImagePyramidType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1257, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}gridOrigin uses Python identifier gridOrigin
    __gridOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'gridOrigin'), 'gridOrigin', '__httpwww_opengis_netkml2_2_ImagePyramidType_httpwww_opengis_netkml2_2gridOrigin', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 209, 2), )

    
    gridOrigin = property(__gridOrigin.value, __gridOrigin.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}maxHeight uses Python identifier maxHeight
    __maxHeight = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxHeight'), 'maxHeight', '__httpwww_opengis_netkml2_2_ImagePyramidType_httpwww_opengis_netkml2_2maxHeight', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 237, 2), )

    
    maxHeight = property(__maxHeight.value, __maxHeight.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}maxWidth uses Python identifier maxWidth
    __maxWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxWidth'), 'maxWidth', '__httpwww_opengis_netkml2_2_ImagePyramidType_httpwww_opengis_netkml2_2maxWidth', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 238, 2), )

    
    maxWidth = property(__maxWidth.value, __maxWidth.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}tileSize uses Python identifier tileSize
    __tileSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tileSize'), 'tileSize', '__httpwww_opengis_netkml2_2_ImagePyramidType_httpwww_opengis_netkml2_2tileSize', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 268, 2), )

    
    tileSize = property(__tileSize.value, __tileSize.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}ImagePyramidSimpleExtensionGroup uses Python identifier ImagePyramidSimpleExtensionGroup
    __ImagePyramidSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ImagePyramidSimpleExtensionGroup'), 'ImagePyramidSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_ImagePyramidType_httpwww_opengis_netkml2_2ImagePyramidSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1273, 2), )

    
    ImagePyramidSimpleExtensionGroup = property(__ImagePyramidSimpleExtensionGroup.value, __ImagePyramidSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ImagePyramidObjectExtensionGroup uses Python identifier ImagePyramidObjectExtensionGroup
    __ImagePyramidObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ImagePyramidObjectExtensionGroup'), 'ImagePyramidObjectExtensionGroup', '__httpwww_opengis_netkml2_2_ImagePyramidType_httpwww_opengis_netkml2_2ImagePyramidObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1275, 2), )

    
    ImagePyramidObjectExtensionGroup = property(__ImagePyramidObjectExtensionGroup.value, __ImagePyramidObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __gridOrigin.name() : __gridOrigin,
        __maxHeight.name() : __maxHeight,
        __maxWidth.name() : __maxWidth,
        __tileSize.name() : __tileSize,
        __ImagePyramidSimpleExtensionGroup.name() : __ImagePyramidSimpleExtensionGroup,
        __ImagePyramidObjectExtensionGroup.name() : __ImagePyramidObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ImagePyramidType = ImagePyramidType
Namespace.addCategoryObject('typeBinding', 'ImagePyramidType', ImagePyramidType)


# Complex type {http://www.opengis.net/kml/2.2}PairType with content type ELEMENT_ONLY
class PairType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}PairType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PairType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1325, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}key uses Python identifier key
    __key = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'key'), 'key', '__httpwww_opengis_netkml2_2_PairType_httpwww_opengis_netkml2_2key', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 219, 2), )

    
    key = property(__key.value, __key.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}styleUrl uses Python identifier styleUrl
    __styleUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'styleUrl'), 'styleUrl', '__httpwww_opengis_netkml2_2_PairType_httpwww_opengis_netkml2_2styleUrl', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 263, 2), )

    
    styleUrl = property(__styleUrl.value, __styleUrl.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractStyleSelectorGroup uses Python identifier AbstractStyleSelectorGroup
    __AbstractStyleSelectorGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup'), 'AbstractStyleSelectorGroup', '__httpwww_opengis_netkml2_2_PairType_httpwww_opengis_netkml2_2AbstractStyleSelectorGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 557, 2), )

    
    AbstractStyleSelectorGroup = property(__AbstractStyleSelectorGroup.value, __AbstractStyleSelectorGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}PairSimpleExtensionGroup uses Python identifier PairSimpleExtensionGroup
    __PairSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PairSimpleExtensionGroup'), 'PairSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_PairType_httpwww_opengis_netkml2_2PairSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1340, 2), )

    
    PairSimpleExtensionGroup = property(__PairSimpleExtensionGroup.value, __PairSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}PairObjectExtensionGroup uses Python identifier PairObjectExtensionGroup
    __PairObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PairObjectExtensionGroup'), 'PairObjectExtensionGroup', '__httpwww_opengis_netkml2_2_PairType_httpwww_opengis_netkml2_2PairObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1342, 2), )

    
    PairObjectExtensionGroup = property(__PairObjectExtensionGroup.value, __PairObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __key.name() : __key,
        __styleUrl.name() : __styleUrl,
        __AbstractStyleSelectorGroup.name() : __AbstractStyleSelectorGroup,
        __PairSimpleExtensionGroup.name() : __PairSimpleExtensionGroup,
        __PairObjectExtensionGroup.name() : __PairObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PairType = PairType
Namespace.addCategoryObject('typeBinding', 'PairType', PairType)


# Complex type {http://www.opengis.net/kml/2.2}AbstractSubStyleType with content type ELEMENT_ONLY
class AbstractSubStyleType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}AbstractSubStyleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1347, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractSubStyleSimpleExtensionGroup uses Python identifier AbstractSubStyleSimpleExtensionGroup
    __AbstractSubStyleSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleSimpleExtensionGroup'), 'AbstractSubStyleSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractSubStyleType_httpwww_opengis_netkml2_2AbstractSubStyleSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1359, 2), )

    
    AbstractSubStyleSimpleExtensionGroup = property(__AbstractSubStyleSimpleExtensionGroup.value, __AbstractSubStyleSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractSubStyleObjectExtensionGroup uses Python identifier AbstractSubStyleObjectExtensionGroup
    __AbstractSubStyleObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleObjectExtensionGroup'), 'AbstractSubStyleObjectExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractSubStyleType_httpwww_opengis_netkml2_2AbstractSubStyleObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1361, 2), )

    
    AbstractSubStyleObjectExtensionGroup = property(__AbstractSubStyleObjectExtensionGroup.value, __AbstractSubStyleObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __AbstractSubStyleSimpleExtensionGroup.name() : __AbstractSubStyleSimpleExtensionGroup,
        __AbstractSubStyleObjectExtensionGroup.name() : __AbstractSubStyleObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractSubStyleType = AbstractSubStyleType
Namespace.addCategoryObject('typeBinding', 'AbstractSubStyleType', AbstractSubStyleType)


# Complex type {http://www.opengis.net/kml/2.2}BasicLinkType with content type ELEMENT_ONLY
class BasicLinkType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}BasicLinkType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BasicLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1408, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}href uses Python identifier href
    __href = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'href'), 'href', '__httpwww_opengis_netkml2_2_BasicLinkType_httpwww_opengis_netkml2_2href', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 211, 2), )

    
    href = property(__href.value, __href.set, None, 'not anyURI due to $[x] substitution in\n      PhotoOverlay')

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}BasicLinkSimpleExtensionGroup uses Python identifier BasicLinkSimpleExtensionGroup
    __BasicLinkSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BasicLinkSimpleExtensionGroup'), 'BasicLinkSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_BasicLinkType_httpwww_opengis_netkml2_2BasicLinkSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1421, 2), )

    
    BasicLinkSimpleExtensionGroup = property(__BasicLinkSimpleExtensionGroup.value, __BasicLinkSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}BasicLinkObjectExtensionGroup uses Python identifier BasicLinkObjectExtensionGroup
    __BasicLinkObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BasicLinkObjectExtensionGroup'), 'BasicLinkObjectExtensionGroup', '__httpwww_opengis_netkml2_2_BasicLinkType_httpwww_opengis_netkml2_2BasicLinkObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1423, 2), )

    
    BasicLinkObjectExtensionGroup = property(__BasicLinkObjectExtensionGroup.value, __BasicLinkObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __href.name() : __href,
        __BasicLinkSimpleExtensionGroup.name() : __BasicLinkSimpleExtensionGroup,
        __BasicLinkObjectExtensionGroup.name() : __BasicLinkObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BasicLinkType = BasicLinkType
Namespace.addCategoryObject('typeBinding', 'BasicLinkType', BasicLinkType)


# Complex type {http://www.opengis.net/kml/2.2}ItemIconType with content type ELEMENT_ONLY
class ItemIconType (AbstractObjectType):
    """Complex type {http://www.opengis.net/kml/2.2}ItemIconType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ItemIconType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1541, 2)
    _ElementMap = AbstractObjectType._ElementMap.copy()
    _AttributeMap = AbstractObjectType._AttributeMap.copy()
    # Base type is AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}href uses Python identifier href
    __href = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'href'), 'href', '__httpwww_opengis_netkml2_2_ItemIconType_httpwww_opengis_netkml2_2href', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 211, 2), )

    
    href = property(__href.value, __href.set, None, 'not anyURI due to $[x] substitution in\n      PhotoOverlay')

    
    # Element {http://www.opengis.net/kml/2.2}state uses Python identifier state
    __state = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'state'), 'state', '__httpwww_opengis_netkml2_2_ItemIconType_httpwww_opengis_netkml2_2state', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 262, 2), )

    
    state = property(__state.value, __state.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}ItemIconSimpleExtensionGroup uses Python identifier ItemIconSimpleExtensionGroup
    __ItemIconSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ItemIconSimpleExtensionGroup'), 'ItemIconSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_ItemIconType_httpwww_opengis_netkml2_2ItemIconSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1555, 2), )

    
    ItemIconSimpleExtensionGroup = property(__ItemIconSimpleExtensionGroup.value, __ItemIconSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ItemIconObjectExtensionGroup uses Python identifier ItemIconObjectExtensionGroup
    __ItemIconObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ItemIconObjectExtensionGroup'), 'ItemIconObjectExtensionGroup', '__httpwww_opengis_netkml2_2_ItemIconType_httpwww_opengis_netkml2_2ItemIconObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1557, 2), )

    
    ItemIconObjectExtensionGroup = property(__ItemIconObjectExtensionGroup.value, __ItemIconObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __href.name() : __href,
        __state.name() : __state,
        __ItemIconSimpleExtensionGroup.name() : __ItemIconSimpleExtensionGroup,
        __ItemIconObjectExtensionGroup.name() : __ItemIconObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ItemIconType = ItemIconType
Namespace.addCategoryObject('typeBinding', 'ItemIconType', ItemIconType)


# Complex type {http://www.opengis.net/kml/2.2}LookAtType with content type ELEMENT_ONLY
class LookAtType (AbstractViewType):
    """Complex type {http://www.opengis.net/kml/2.2}LookAtType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LookAtType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 380, 2)
    _ElementMap = AbstractViewType._ElementMap.copy()
    _AttributeMap = AbstractViewType._AttributeMap.copy()
    # Base type is AbstractViewType
    
    # Element {http://www.opengis.net/kml/2.2}altitude uses Python identifier altitude
    __altitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'altitude'), 'altitude', '__httpwww_opengis_netkml2_2_LookAtType_httpwww_opengis_netkml2_2altitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 188, 2), )

    
    altitude = property(__altitude.value, __altitude.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}altitudeModeGroup uses Python identifier altitudeModeGroup
    __altitudeModeGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), 'altitudeModeGroup', '__httpwww_opengis_netkml2_2_LookAtType_httpwww_opengis_netkml2_2altitudeModeGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2), )

    
    altitudeModeGroup = property(__altitudeModeGroup.value, __altitudeModeGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}heading uses Python identifier heading
    __heading = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heading'), 'heading', '__httpwww_opengis_netkml2_2_LookAtType_httpwww_opengis_netkml2_2heading', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 210, 2), )

    
    heading = property(__heading.value, __heading.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}latitude uses Python identifier latitude
    __latitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'latitude'), 'latitude', '__httpwww_opengis_netkml2_2_LookAtType_httpwww_opengis_netkml2_2latitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 220, 2), )

    
    latitude = property(__latitude.value, __latitude.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}longitude uses Python identifier longitude
    __longitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'longitude'), 'longitude', '__httpwww_opengis_netkml2_2_LookAtType_httpwww_opengis_netkml2_2longitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 226, 2), )

    
    longitude = property(__longitude.value, __longitude.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}range uses Python identifier range
    __range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'range'), 'range', '__httpwww_opengis_netkml2_2_LookAtType_httpwww_opengis_netkml2_2range', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 246, 2), )

    
    range = property(__range.value, __range.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}tilt uses Python identifier tilt
    __tilt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tilt'), 'tilt', '__httpwww_opengis_netkml2_2_LookAtType_httpwww_opengis_netkml2_2tilt', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 269, 2), )

    
    tilt = property(__tilt.value, __tilt.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractViewSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractViewSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractViewType
    
    # Element AbstractViewObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractViewObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractViewType
    
    # Element {http://www.opengis.net/kml/2.2}LookAtSimpleExtensionGroup uses Python identifier LookAtSimpleExtensionGroup
    __LookAtSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LookAtSimpleExtensionGroup'), 'LookAtSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_LookAtType_httpwww_opengis_netkml2_2LookAtSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 399, 2), )

    
    LookAtSimpleExtensionGroup = property(__LookAtSimpleExtensionGroup.value, __LookAtSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LookAtObjectExtensionGroup uses Python identifier LookAtObjectExtensionGroup
    __LookAtObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LookAtObjectExtensionGroup'), 'LookAtObjectExtensionGroup', '__httpwww_opengis_netkml2_2_LookAtType_httpwww_opengis_netkml2_2LookAtObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 401, 2), )

    
    LookAtObjectExtensionGroup = property(__LookAtObjectExtensionGroup.value, __LookAtObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __altitude.name() : __altitude,
        __altitudeModeGroup.name() : __altitudeModeGroup,
        __heading.name() : __heading,
        __latitude.name() : __latitude,
        __longitude.name() : __longitude,
        __range.name() : __range,
        __tilt.name() : __tilt,
        __LookAtSimpleExtensionGroup.name() : __LookAtSimpleExtensionGroup,
        __LookAtObjectExtensionGroup.name() : __LookAtObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LookAtType = LookAtType
Namespace.addCategoryObject('typeBinding', 'LookAtType', LookAtType)


# Complex type {http://www.opengis.net/kml/2.2}CameraType with content type ELEMENT_ONLY
class CameraType (AbstractViewType):
    """Complex type {http://www.opengis.net/kml/2.2}CameraType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CameraType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 406, 2)
    _ElementMap = AbstractViewType._ElementMap.copy()
    _AttributeMap = AbstractViewType._AttributeMap.copy()
    # Base type is AbstractViewType
    
    # Element {http://www.opengis.net/kml/2.2}altitude uses Python identifier altitude
    __altitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'altitude'), 'altitude', '__httpwww_opengis_netkml2_2_CameraType_httpwww_opengis_netkml2_2altitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 188, 2), )

    
    altitude = property(__altitude.value, __altitude.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}altitudeModeGroup uses Python identifier altitudeModeGroup
    __altitudeModeGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), 'altitudeModeGroup', '__httpwww_opengis_netkml2_2_CameraType_httpwww_opengis_netkml2_2altitudeModeGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2), )

    
    altitudeModeGroup = property(__altitudeModeGroup.value, __altitudeModeGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}heading uses Python identifier heading
    __heading = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heading'), 'heading', '__httpwww_opengis_netkml2_2_CameraType_httpwww_opengis_netkml2_2heading', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 210, 2), )

    
    heading = property(__heading.value, __heading.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}latitude uses Python identifier latitude
    __latitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'latitude'), 'latitude', '__httpwww_opengis_netkml2_2_CameraType_httpwww_opengis_netkml2_2latitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 220, 2), )

    
    latitude = property(__latitude.value, __latitude.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}longitude uses Python identifier longitude
    __longitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'longitude'), 'longitude', '__httpwww_opengis_netkml2_2_CameraType_httpwww_opengis_netkml2_2longitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 226, 2), )

    
    longitude = property(__longitude.value, __longitude.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}roll uses Python identifier roll
    __roll = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'roll'), 'roll', '__httpwww_opengis_netkml2_2_CameraType_httpwww_opengis_netkml2_2roll', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 252, 2), )

    
    roll = property(__roll.value, __roll.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}tilt uses Python identifier tilt
    __tilt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tilt'), 'tilt', '__httpwww_opengis_netkml2_2_CameraType_httpwww_opengis_netkml2_2tilt', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 269, 2), )

    
    tilt = property(__tilt.value, __tilt.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractViewSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractViewSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractViewType
    
    # Element AbstractViewObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractViewObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractViewType
    
    # Element {http://www.opengis.net/kml/2.2}CameraSimpleExtensionGroup uses Python identifier CameraSimpleExtensionGroup
    __CameraSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CameraSimpleExtensionGroup'), 'CameraSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_CameraType_httpwww_opengis_netkml2_2CameraSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 425, 2), )

    
    CameraSimpleExtensionGroup = property(__CameraSimpleExtensionGroup.value, __CameraSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}CameraObjectExtensionGroup uses Python identifier CameraObjectExtensionGroup
    __CameraObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CameraObjectExtensionGroup'), 'CameraObjectExtensionGroup', '__httpwww_opengis_netkml2_2_CameraType_httpwww_opengis_netkml2_2CameraObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 427, 2), )

    
    CameraObjectExtensionGroup = property(__CameraObjectExtensionGroup.value, __CameraObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __altitude.name() : __altitude,
        __altitudeModeGroup.name() : __altitudeModeGroup,
        __heading.name() : __heading,
        __latitude.name() : __latitude,
        __longitude.name() : __longitude,
        __roll.name() : __roll,
        __tilt.name() : __tilt,
        __CameraSimpleExtensionGroup.name() : __CameraSimpleExtensionGroup,
        __CameraObjectExtensionGroup.name() : __CameraObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CameraType = CameraType
Namespace.addCategoryObject('typeBinding', 'CameraType', CameraType)


# Complex type {http://www.opengis.net/kml/2.2}AbstractContainerType with content type ELEMENT_ONLY
class AbstractContainerType (AbstractFeatureType):
    """Complex type {http://www.opengis.net/kml/2.2}AbstractContainerType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 499, 2)
    _ElementMap = AbstractFeatureType._ElementMap.copy()
    _AttributeMap = AbstractFeatureType._AttributeMap.copy()
    # Base type is AbstractFeatureType
    
    # Element address ({http://www.opengis.net/kml/2.2}address) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/kml/2.2}description) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element name ({http://www.opengis.net/kml/2.2}name) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element open ({http://www.opengis.net/kml/2.2}open) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element phoneNumber ({http://www.opengis.net/kml/2.2}phoneNumber) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element snippet ({http://www.opengis.net/kml/2.2}snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element styleUrl ({http://www.opengis.net/kml/2.2}styleUrl) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element visibility ({http://www.opengis.net/kml/2.2}visibility) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractFeatureObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractFeatureSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Snippet ({http://www.opengis.net/kml/2.2}Snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractViewGroup ({http://www.opengis.net/kml/2.2}AbstractViewGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Metadata ({http://www.opengis.net/kml/2.2}Metadata) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ExtendedData ({http://www.opengis.net/kml/2.2}ExtendedData) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractContainerSimpleExtensionGroup uses Python identifier AbstractContainerSimpleExtensionGroup
    __AbstractContainerSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerSimpleExtensionGroup'), 'AbstractContainerSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractContainerType_httpwww_opengis_netkml2_2AbstractContainerSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 511, 2), )

    
    AbstractContainerSimpleExtensionGroup = property(__AbstractContainerSimpleExtensionGroup.value, __AbstractContainerSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractContainerObjectExtensionGroup uses Python identifier AbstractContainerObjectExtensionGroup
    __AbstractContainerObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerObjectExtensionGroup'), 'AbstractContainerObjectExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractContainerType_httpwww_opengis_netkml2_2AbstractContainerObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 513, 2), )

    
    AbstractContainerObjectExtensionGroup = property(__AbstractContainerObjectExtensionGroup.value, __AbstractContainerObjectExtensionGroup.set, None, None)

    
    # Element AbstractStyleSelectorGroup ({http://www.opengis.net/kml/2.2}AbstractStyleSelectorGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractTimePrimitiveGroup ({http://www.opengis.net/kml/2.2}AbstractTimePrimitiveGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Region ({http://www.opengis.net/kml/2.2}Region) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element author ({http://www.w3.org/2005/Atom}author) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element link ({http://www.w3.org/2005/Atom}link) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AddressDetails ({urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressDetails) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __AbstractContainerSimpleExtensionGroup.name() : __AbstractContainerSimpleExtensionGroup,
        __AbstractContainerObjectExtensionGroup.name() : __AbstractContainerObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractContainerType = AbstractContainerType
Namespace.addCategoryObject('typeBinding', 'AbstractContainerType', AbstractContainerType)


# Complex type {http://www.opengis.net/kml/2.2}AbstractOverlayType with content type ELEMENT_ONLY
class AbstractOverlayType (AbstractFeatureType):
    """Complex type {http://www.opengis.net/kml/2.2}AbstractOverlayType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlayType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 537, 2)
    _ElementMap = AbstractFeatureType._ElementMap.copy()
    _AttributeMap = AbstractFeatureType._AttributeMap.copy()
    # Base type is AbstractFeatureType
    
    # Element address ({http://www.opengis.net/kml/2.2}address) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}color uses Python identifier color
    __color = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'color'), 'color', '__httpwww_opengis_netkml2_2_AbstractOverlayType_httpwww_opengis_netkml2_2color', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 195, 2), )

    
    color = property(__color.value, __color.set, None, None)

    
    # Element description ({http://www.opengis.net/kml/2.2}description) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}drawOrder uses Python identifier drawOrder
    __drawOrder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'drawOrder'), 'drawOrder', '__httpwww_opengis_netkml2_2_AbstractOverlayType_httpwww_opengis_netkml2_2drawOrder', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 202, 2), )

    
    drawOrder = property(__drawOrder.value, __drawOrder.set, None, None)

    
    # Element name ({http://www.opengis.net/kml/2.2}name) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element open ({http://www.opengis.net/kml/2.2}open) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element phoneNumber ({http://www.opengis.net/kml/2.2}phoneNumber) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element snippet ({http://www.opengis.net/kml/2.2}snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element styleUrl ({http://www.opengis.net/kml/2.2}styleUrl) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element visibility ({http://www.opengis.net/kml/2.2}visibility) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractFeatureObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractFeatureSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Snippet ({http://www.opengis.net/kml/2.2}Snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractViewGroup ({http://www.opengis.net/kml/2.2}AbstractViewGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Metadata ({http://www.opengis.net/kml/2.2}Metadata) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ExtendedData ({http://www.opengis.net/kml/2.2}ExtendedData) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractOverlaySimpleExtensionGroup uses Python identifier AbstractOverlaySimpleExtensionGroup
    __AbstractOverlaySimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlaySimpleExtensionGroup'), 'AbstractOverlaySimpleExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractOverlayType_httpwww_opengis_netkml2_2AbstractOverlaySimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 552, 2), )

    
    AbstractOverlaySimpleExtensionGroup = property(__AbstractOverlaySimpleExtensionGroup.value, __AbstractOverlaySimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractOverlayObjectExtensionGroup uses Python identifier AbstractOverlayObjectExtensionGroup
    __AbstractOverlayObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlayObjectExtensionGroup'), 'AbstractOverlayObjectExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractOverlayType_httpwww_opengis_netkml2_2AbstractOverlayObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 554, 2), )

    
    AbstractOverlayObjectExtensionGroup = property(__AbstractOverlayObjectExtensionGroup.value, __AbstractOverlayObjectExtensionGroup.set, None, None)

    
    # Element AbstractStyleSelectorGroup ({http://www.opengis.net/kml/2.2}AbstractStyleSelectorGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractTimePrimitiveGroup ({http://www.opengis.net/kml/2.2}AbstractTimePrimitiveGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Region ({http://www.opengis.net/kml/2.2}Region) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}Icon uses Python identifier Icon
    __Icon = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Icon'), 'Icon', '__httpwww_opengis_netkml2_2_AbstractOverlayType_httpwww_opengis_netkml2_2Icon', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 824, 2), )

    
    Icon = property(__Icon.value, __Icon.set, None, None)

    
    # Element author ({http://www.w3.org/2005/Atom}author) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element link ({http://www.w3.org/2005/Atom}link) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AddressDetails ({urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressDetails) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __color.name() : __color,
        __drawOrder.name() : __drawOrder,
        __AbstractOverlaySimpleExtensionGroup.name() : __AbstractOverlaySimpleExtensionGroup,
        __AbstractOverlayObjectExtensionGroup.name() : __AbstractOverlayObjectExtensionGroup,
        __Icon.name() : __Icon
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractOverlayType = AbstractOverlayType
Namespace.addCategoryObject('typeBinding', 'AbstractOverlayType', AbstractOverlayType)


# Complex type {http://www.opengis.net/kml/2.2}PlacemarkType with content type ELEMENT_ONLY
class PlacemarkType (AbstractFeatureType):
    """Complex type {http://www.opengis.net/kml/2.2}PlacemarkType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PlacemarkType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 713, 2)
    _ElementMap = AbstractFeatureType._ElementMap.copy()
    _AttributeMap = AbstractFeatureType._AttributeMap.copy()
    # Base type is AbstractFeatureType
    
    # Element address ({http://www.opengis.net/kml/2.2}address) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/kml/2.2}description) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element name ({http://www.opengis.net/kml/2.2}name) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element open ({http://www.opengis.net/kml/2.2}open) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element phoneNumber ({http://www.opengis.net/kml/2.2}phoneNumber) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element snippet ({http://www.opengis.net/kml/2.2}snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element styleUrl ({http://www.opengis.net/kml/2.2}styleUrl) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element visibility ({http://www.opengis.net/kml/2.2}visibility) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractFeatureObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractFeatureSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Snippet ({http://www.opengis.net/kml/2.2}Snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractViewGroup ({http://www.opengis.net/kml/2.2}AbstractViewGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Metadata ({http://www.opengis.net/kml/2.2}Metadata) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ExtendedData ({http://www.opengis.net/kml/2.2}ExtendedData) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractGeometryGroup uses Python identifier AbstractGeometryGroup
    __AbstractGeometryGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryGroup'), 'AbstractGeometryGroup', '__httpwww_opengis_netkml2_2_PlacemarkType_httpwww_opengis_netkml2_2AbstractGeometryGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 516, 2), )

    
    AbstractGeometryGroup = property(__AbstractGeometryGroup.value, __AbstractGeometryGroup.set, None, None)

    
    # Element AbstractStyleSelectorGroup ({http://www.opengis.net/kml/2.2}AbstractStyleSelectorGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractTimePrimitiveGroup ({http://www.opengis.net/kml/2.2}AbstractTimePrimitiveGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}PlacemarkSimpleExtensionGroup uses Python identifier PlacemarkSimpleExtensionGroup
    __PlacemarkSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlacemarkSimpleExtensionGroup'), 'PlacemarkSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_PlacemarkType_httpwww_opengis_netkml2_2PlacemarkSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 726, 2), )

    
    PlacemarkSimpleExtensionGroup = property(__PlacemarkSimpleExtensionGroup.value, __PlacemarkSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}PlacemarkObjectExtensionGroup uses Python identifier PlacemarkObjectExtensionGroup
    __PlacemarkObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlacemarkObjectExtensionGroup'), 'PlacemarkObjectExtensionGroup', '__httpwww_opengis_netkml2_2_PlacemarkType_httpwww_opengis_netkml2_2PlacemarkObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 728, 2), )

    
    PlacemarkObjectExtensionGroup = property(__PlacemarkObjectExtensionGroup.value, __PlacemarkObjectExtensionGroup.set, None, None)

    
    # Element Region ({http://www.opengis.net/kml/2.2}Region) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element author ({http://www.w3.org/2005/Atom}author) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element link ({http://www.w3.org/2005/Atom}link) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AddressDetails ({urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressDetails) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __AbstractGeometryGroup.name() : __AbstractGeometryGroup,
        __PlacemarkSimpleExtensionGroup.name() : __PlacemarkSimpleExtensionGroup,
        __PlacemarkObjectExtensionGroup.name() : __PlacemarkObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PlacemarkType = PlacemarkType
Namespace.addCategoryObject('typeBinding', 'PlacemarkType', PlacemarkType)


# Complex type {http://www.opengis.net/kml/2.2}NetworkLinkType with content type ELEMENT_ONLY
class NetworkLinkType (AbstractFeatureType):
    """Complex type {http://www.opengis.net/kml/2.2}NetworkLinkType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 733, 2)
    _ElementMap = AbstractFeatureType._ElementMap.copy()
    _AttributeMap = AbstractFeatureType._AttributeMap.copy()
    # Base type is AbstractFeatureType
    
    # Element address ({http://www.opengis.net/kml/2.2}address) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/kml/2.2}description) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}flyToView uses Python identifier flyToView
    __flyToView = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'flyToView'), 'flyToView', '__httpwww_opengis_netkml2_2_NetworkLinkType_httpwww_opengis_netkml2_2flyToView', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 208, 2), )

    
    flyToView = property(__flyToView.value, __flyToView.set, None, None)

    
    # Element name ({http://www.opengis.net/kml/2.2}name) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element open ({http://www.opengis.net/kml/2.2}open) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element phoneNumber ({http://www.opengis.net/kml/2.2}phoneNumber) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}refreshVisibility uses Python identifier refreshVisibility
    __refreshVisibility = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'refreshVisibility'), 'refreshVisibility', '__httpwww_opengis_netkml2_2_NetworkLinkType_httpwww_opengis_netkml2_2refreshVisibility', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 250, 2), )

    
    refreshVisibility = property(__refreshVisibility.value, __refreshVisibility.set, None, None)

    
    # Element snippet ({http://www.opengis.net/kml/2.2}snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element styleUrl ({http://www.opengis.net/kml/2.2}styleUrl) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element visibility ({http://www.opengis.net/kml/2.2}visibility) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractFeatureObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractFeatureSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Snippet ({http://www.opengis.net/kml/2.2}Snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractViewGroup ({http://www.opengis.net/kml/2.2}AbstractViewGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Metadata ({http://www.opengis.net/kml/2.2}Metadata) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ExtendedData ({http://www.opengis.net/kml/2.2}ExtendedData) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractStyleSelectorGroup ({http://www.opengis.net/kml/2.2}AbstractStyleSelectorGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractTimePrimitiveGroup ({http://www.opengis.net/kml/2.2}AbstractTimePrimitiveGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}NetworkLinkSimpleExtensionGroup uses Python identifier NetworkLinkSimpleExtensionGroup
    __NetworkLinkSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkSimpleExtensionGroup'), 'NetworkLinkSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_NetworkLinkType_httpwww_opengis_netkml2_2NetworkLinkSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 754, 2), )

    
    NetworkLinkSimpleExtensionGroup = property(__NetworkLinkSimpleExtensionGroup.value, __NetworkLinkSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}NetworkLinkObjectExtensionGroup uses Python identifier NetworkLinkObjectExtensionGroup
    __NetworkLinkObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkObjectExtensionGroup'), 'NetworkLinkObjectExtensionGroup', '__httpwww_opengis_netkml2_2_NetworkLinkType_httpwww_opengis_netkml2_2NetworkLinkObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 756, 2), )

    
    NetworkLinkObjectExtensionGroup = property(__NetworkLinkObjectExtensionGroup.value, __NetworkLinkObjectExtensionGroup.set, None, None)

    
    # Element Region ({http://www.opengis.net/kml/2.2}Region) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}Link uses Python identifier Link
    __Link = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Link'), 'Link', '__httpwww_opengis_netkml2_2_NetworkLinkType_httpwww_opengis_netkml2_2Link', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 826, 2), )

    
    Link = property(__Link.value, __Link.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Url uses Python identifier Url
    __Url = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Url'), 'Url', '__httpwww_opengis_netkml2_2_NetworkLinkType_httpwww_opengis_netkml2_2Url', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 828, 2), )

    
    Url = property(__Url.value, __Url.set, None, 'Url deprecated in 2.2')

    
    # Element author ({http://www.w3.org/2005/Atom}author) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element link ({http://www.w3.org/2005/Atom}link) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AddressDetails ({urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressDetails) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __flyToView.name() : __flyToView,
        __refreshVisibility.name() : __refreshVisibility,
        __NetworkLinkSimpleExtensionGroup.name() : __NetworkLinkSimpleExtensionGroup,
        __NetworkLinkObjectExtensionGroup.name() : __NetworkLinkObjectExtensionGroup,
        __Link.name() : __Link,
        __Url.name() : __Url
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.NetworkLinkType = NetworkLinkType
Namespace.addCategoryObject('typeBinding', 'NetworkLinkType', NetworkLinkType)


# Complex type {http://www.opengis.net/kml/2.2}LatLonAltBoxType with content type ELEMENT_ONLY
class LatLonAltBoxType (AbstractLatLonBoxType):
    """Complex type {http://www.opengis.net/kml/2.2}LatLonAltBoxType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LatLonAltBoxType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 782, 2)
    _ElementMap = AbstractLatLonBoxType._ElementMap.copy()
    _AttributeMap = AbstractLatLonBoxType._AttributeMap.copy()
    # Base type is AbstractLatLonBoxType
    
    # Element {http://www.opengis.net/kml/2.2}altitudeModeGroup uses Python identifier altitudeModeGroup
    __altitudeModeGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), 'altitudeModeGroup', '__httpwww_opengis_netkml2_2_LatLonAltBoxType_httpwww_opengis_netkml2_2altitudeModeGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2), )

    
    altitudeModeGroup = property(__altitudeModeGroup.value, __altitudeModeGroup.set, None, None)

    
    # Element east ({http://www.opengis.net/kml/2.2}east) inherited from {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType
    
    # Element {http://www.opengis.net/kml/2.2}minAltitude uses Python identifier minAltitude
    __minAltitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'minAltitude'), 'minAltitude', '__httpwww_opengis_netkml2_2_LatLonAltBoxType_httpwww_opengis_netkml2_2minAltitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 230, 2), )

    
    minAltitude = property(__minAltitude.value, __minAltitude.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}maxAltitude uses Python identifier maxAltitude
    __maxAltitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxAltitude'), 'maxAltitude', '__httpwww_opengis_netkml2_2_LatLonAltBoxType_httpwww_opengis_netkml2_2maxAltitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 234, 2), )

    
    maxAltitude = property(__maxAltitude.value, __maxAltitude.set, None, None)

    
    # Element north ({http://www.opengis.net/kml/2.2}north) inherited from {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType
    
    # Element south ({http://www.opengis.net/kml/2.2}south) inherited from {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType
    
    # Element west ({http://www.opengis.net/kml/2.2}west) inherited from {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}LatLonAltBoxSimpleExtensionGroup uses Python identifier LatLonAltBoxSimpleExtensionGroup
    __LatLonAltBoxSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LatLonAltBoxSimpleExtensionGroup'), 'LatLonAltBoxSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_LatLonAltBoxType_httpwww_opengis_netkml2_2LatLonAltBoxSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 797, 2), )

    
    LatLonAltBoxSimpleExtensionGroup = property(__LatLonAltBoxSimpleExtensionGroup.value, __LatLonAltBoxSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LatLonAltBoxObjectExtensionGroup uses Python identifier LatLonAltBoxObjectExtensionGroup
    __LatLonAltBoxObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LatLonAltBoxObjectExtensionGroup'), 'LatLonAltBoxObjectExtensionGroup', '__httpwww_opengis_netkml2_2_LatLonAltBoxType_httpwww_opengis_netkml2_2LatLonAltBoxObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 799, 2), )

    
    LatLonAltBoxObjectExtensionGroup = property(__LatLonAltBoxObjectExtensionGroup.value, __LatLonAltBoxObjectExtensionGroup.set, None, None)

    
    # Element AbstractLatLonBoxSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractLatLonBoxSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType
    
    # Element AbstractLatLonBoxObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractLatLonBoxObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType
    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __altitudeModeGroup.name() : __altitudeModeGroup,
        __minAltitude.name() : __minAltitude,
        __maxAltitude.name() : __maxAltitude,
        __LatLonAltBoxSimpleExtensionGroup.name() : __LatLonAltBoxSimpleExtensionGroup,
        __LatLonAltBoxObjectExtensionGroup.name() : __LatLonAltBoxObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LatLonAltBoxType = LatLonAltBoxType
Namespace.addCategoryObject('typeBinding', 'LatLonAltBoxType', LatLonAltBoxType)


# Complex type {http://www.opengis.net/kml/2.2}LinkType with content type ELEMENT_ONLY
class LinkType (BasicLinkType):
    """Complex type {http://www.opengis.net/kml/2.2}LinkType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinkType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 834, 2)
    _ElementMap = BasicLinkType._ElementMap.copy()
    _AttributeMap = BasicLinkType._AttributeMap.copy()
    # Base type is BasicLinkType
    
    # Element href ({http://www.opengis.net/kml/2.2}href) inherited from {http://www.opengis.net/kml/2.2}BasicLinkType
    
    # Element {http://www.opengis.net/kml/2.2}httpQuery uses Python identifier httpQuery
    __httpQuery = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'httpQuery'), 'httpQuery', '__httpwww_opengis_netkml2_2_LinkType_httpwww_opengis_netkml2_2httpQuery', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 217, 2), )

    
    httpQuery = property(__httpQuery.value, __httpQuery.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}refreshMode uses Python identifier refreshMode
    __refreshMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'refreshMode'), 'refreshMode', '__httpwww_opengis_netkml2_2_LinkType_httpwww_opengis_netkml2_2refreshMode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 247, 2), )

    
    refreshMode = property(__refreshMode.value, __refreshMode.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}refreshInterval uses Python identifier refreshInterval
    __refreshInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'refreshInterval'), 'refreshInterval', '__httpwww_opengis_netkml2_2_LinkType_httpwww_opengis_netkml2_2refreshInterval', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 249, 2), )

    
    refreshInterval = property(__refreshInterval.value, __refreshInterval.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}viewBoundScale uses Python identifier viewBoundScale
    __viewBoundScale = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'viewBoundScale'), 'viewBoundScale', '__httpwww_opengis_netkml2_2_LinkType_httpwww_opengis_netkml2_2viewBoundScale', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 272, 2), )

    
    viewBoundScale = property(__viewBoundScale.value, __viewBoundScale.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}viewFormat uses Python identifier viewFormat
    __viewFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'viewFormat'), 'viewFormat', '__httpwww_opengis_netkml2_2_LinkType_httpwww_opengis_netkml2_2viewFormat', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 273, 2), )

    
    viewFormat = property(__viewFormat.value, __viewFormat.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}viewRefreshMode uses Python identifier viewRefreshMode
    __viewRefreshMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'viewRefreshMode'), 'viewRefreshMode', '__httpwww_opengis_netkml2_2_LinkType_httpwww_opengis_netkml2_2viewRefreshMode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 274, 2), )

    
    viewRefreshMode = property(__viewRefreshMode.value, __viewRefreshMode.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}viewRefreshTime uses Python identifier viewRefreshTime
    __viewRefreshTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'viewRefreshTime'), 'viewRefreshTime', '__httpwww_opengis_netkml2_2_LinkType_httpwww_opengis_netkml2_2viewRefreshTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 276, 2), )

    
    viewRefreshTime = property(__viewRefreshTime.value, __viewRefreshTime.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}LinkSimpleExtensionGroup uses Python identifier LinkSimpleExtensionGroup
    __LinkSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinkSimpleExtensionGroup'), 'LinkSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_LinkType_httpwww_opengis_netkml2_2LinkSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 853, 2), )

    
    LinkSimpleExtensionGroup = property(__LinkSimpleExtensionGroup.value, __LinkSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LinkObjectExtensionGroup uses Python identifier LinkObjectExtensionGroup
    __LinkObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinkObjectExtensionGroup'), 'LinkObjectExtensionGroup', '__httpwww_opengis_netkml2_2_LinkType_httpwww_opengis_netkml2_2LinkObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 855, 2), )

    
    LinkObjectExtensionGroup = property(__LinkObjectExtensionGroup.value, __LinkObjectExtensionGroup.set, None, None)

    
    # Element BasicLinkSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}BasicLinkSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}BasicLinkType
    
    # Element BasicLinkObjectExtensionGroup ({http://www.opengis.net/kml/2.2}BasicLinkObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}BasicLinkType
    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __httpQuery.name() : __httpQuery,
        __refreshMode.name() : __refreshMode,
        __refreshInterval.name() : __refreshInterval,
        __viewBoundScale.name() : __viewBoundScale,
        __viewFormat.name() : __viewFormat,
        __viewRefreshMode.name() : __viewRefreshMode,
        __viewRefreshTime.name() : __viewRefreshTime,
        __LinkSimpleExtensionGroup.name() : __LinkSimpleExtensionGroup,
        __LinkObjectExtensionGroup.name() : __LinkObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LinkType = LinkType
Namespace.addCategoryObject('typeBinding', 'LinkType', LinkType)


# Complex type {http://www.opengis.net/kml/2.2}MultiGeometryType with content type ELEMENT_ONLY
class MultiGeometryType (AbstractGeometryType):
    """Complex type {http://www.opengis.net/kml/2.2}MultiGeometryType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MultiGeometryType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 860, 2)
    _ElementMap = AbstractGeometryType._ElementMap.copy()
    _AttributeMap = AbstractGeometryType._AttributeMap.copy()
    # Base type is AbstractGeometryType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractGeometryGroup uses Python identifier AbstractGeometryGroup
    __AbstractGeometryGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryGroup'), 'AbstractGeometryGroup', '__httpwww_opengis_netkml2_2_MultiGeometryType_httpwww_opengis_netkml2_2AbstractGeometryGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 516, 2), )

    
    AbstractGeometryGroup = property(__AbstractGeometryGroup.value, __AbstractGeometryGroup.set, None, None)

    
    # Element AbstractGeometrySimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractGeometrySimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractGeometryType
    
    # Element AbstractGeometryObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractGeometryObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractGeometryType
    
    # Element {http://www.opengis.net/kml/2.2}MultiGeometrySimpleExtensionGroup uses Python identifier MultiGeometrySimpleExtensionGroup
    __MultiGeometrySimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MultiGeometrySimpleExtensionGroup'), 'MultiGeometrySimpleExtensionGroup', '__httpwww_opengis_netkml2_2_MultiGeometryType_httpwww_opengis_netkml2_2MultiGeometrySimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 874, 2), )

    
    MultiGeometrySimpleExtensionGroup = property(__MultiGeometrySimpleExtensionGroup.value, __MultiGeometrySimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}MultiGeometryObjectExtensionGroup uses Python identifier MultiGeometryObjectExtensionGroup
    __MultiGeometryObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MultiGeometryObjectExtensionGroup'), 'MultiGeometryObjectExtensionGroup', '__httpwww_opengis_netkml2_2_MultiGeometryType_httpwww_opengis_netkml2_2MultiGeometryObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 876, 2), )

    
    MultiGeometryObjectExtensionGroup = property(__MultiGeometryObjectExtensionGroup.value, __MultiGeometryObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __AbstractGeometryGroup.name() : __AbstractGeometryGroup,
        __MultiGeometrySimpleExtensionGroup.name() : __MultiGeometrySimpleExtensionGroup,
        __MultiGeometryObjectExtensionGroup.name() : __MultiGeometryObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MultiGeometryType = MultiGeometryType
Namespace.addCategoryObject('typeBinding', 'MultiGeometryType', MultiGeometryType)


# Complex type {http://www.opengis.net/kml/2.2}PointType with content type ELEMENT_ONLY
class PointType (AbstractGeometryType):
    """Complex type {http://www.opengis.net/kml/2.2}PointType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PointType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 881, 2)
    _ElementMap = AbstractGeometryType._ElementMap.copy()
    _AttributeMap = AbstractGeometryType._AttributeMap.copy()
    # Base type is AbstractGeometryType
    
    # Element {http://www.opengis.net/kml/2.2}altitudeModeGroup uses Python identifier altitudeModeGroup
    __altitudeModeGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), 'altitudeModeGroup', '__httpwww_opengis_netkml2_2_PointType_httpwww_opengis_netkml2_2altitudeModeGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2), )

    
    altitudeModeGroup = property(__altitudeModeGroup.value, __altitudeModeGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coordinates'), 'coordinates', '__httpwww_opengis_netkml2_2_PointType_httpwww_opengis_netkml2_2coordinates', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 198, 2), )

    
    coordinates = property(__coordinates.value, __coordinates.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}extrude uses Python identifier extrude
    __extrude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extrude'), 'extrude', '__httpwww_opengis_netkml2_2_PointType_httpwww_opengis_netkml2_2extrude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 206, 2), )

    
    extrude = property(__extrude.value, __extrude.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractGeometrySimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractGeometrySimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractGeometryType
    
    # Element AbstractGeometryObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractGeometryObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractGeometryType
    
    # Element {http://www.opengis.net/kml/2.2}PointSimpleExtensionGroup uses Python identifier PointSimpleExtensionGroup
    __PointSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PointSimpleExtensionGroup'), 'PointSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_PointType_httpwww_opengis_netkml2_2PointSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 896, 2), )

    
    PointSimpleExtensionGroup = property(__PointSimpleExtensionGroup.value, __PointSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}PointObjectExtensionGroup uses Python identifier PointObjectExtensionGroup
    __PointObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PointObjectExtensionGroup'), 'PointObjectExtensionGroup', '__httpwww_opengis_netkml2_2_PointType_httpwww_opengis_netkml2_2PointObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 898, 2), )

    
    PointObjectExtensionGroup = property(__PointObjectExtensionGroup.value, __PointObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __altitudeModeGroup.name() : __altitudeModeGroup,
        __coordinates.name() : __coordinates,
        __extrude.name() : __extrude,
        __PointSimpleExtensionGroup.name() : __PointSimpleExtensionGroup,
        __PointObjectExtensionGroup.name() : __PointObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PointType = PointType
Namespace.addCategoryObject('typeBinding', 'PointType', PointType)


# Complex type {http://www.opengis.net/kml/2.2}LineStringType with content type ELEMENT_ONLY
class LineStringType (AbstractGeometryType):
    """Complex type {http://www.opengis.net/kml/2.2}LineStringType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LineStringType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 903, 2)
    _ElementMap = AbstractGeometryType._ElementMap.copy()
    _AttributeMap = AbstractGeometryType._AttributeMap.copy()
    # Base type is AbstractGeometryType
    
    # Element {http://www.opengis.net/kml/2.2}altitudeModeGroup uses Python identifier altitudeModeGroup
    __altitudeModeGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), 'altitudeModeGroup', '__httpwww_opengis_netkml2_2_LineStringType_httpwww_opengis_netkml2_2altitudeModeGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2), )

    
    altitudeModeGroup = property(__altitudeModeGroup.value, __altitudeModeGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coordinates'), 'coordinates', '__httpwww_opengis_netkml2_2_LineStringType_httpwww_opengis_netkml2_2coordinates', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 198, 2), )

    
    coordinates = property(__coordinates.value, __coordinates.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}extrude uses Python identifier extrude
    __extrude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extrude'), 'extrude', '__httpwww_opengis_netkml2_2_LineStringType_httpwww_opengis_netkml2_2extrude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 206, 2), )

    
    extrude = property(__extrude.value, __extrude.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}tessellate uses Python identifier tessellate
    __tessellate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tessellate'), 'tessellate', '__httpwww_opengis_netkml2_2_LineStringType_httpwww_opengis_netkml2_2tessellate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 265, 2), )

    
    tessellate = property(__tessellate.value, __tessellate.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractGeometrySimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractGeometrySimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractGeometryType
    
    # Element AbstractGeometryObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractGeometryObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractGeometryType
    
    # Element {http://www.opengis.net/kml/2.2}LineStringSimpleExtensionGroup uses Python identifier LineStringSimpleExtensionGroup
    __LineStringSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LineStringSimpleExtensionGroup'), 'LineStringSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_LineStringType_httpwww_opengis_netkml2_2LineStringSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 919, 2), )

    
    LineStringSimpleExtensionGroup = property(__LineStringSimpleExtensionGroup.value, __LineStringSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LineStringObjectExtensionGroup uses Python identifier LineStringObjectExtensionGroup
    __LineStringObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LineStringObjectExtensionGroup'), 'LineStringObjectExtensionGroup', '__httpwww_opengis_netkml2_2_LineStringType_httpwww_opengis_netkml2_2LineStringObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 921, 2), )

    
    LineStringObjectExtensionGroup = property(__LineStringObjectExtensionGroup.value, __LineStringObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __altitudeModeGroup.name() : __altitudeModeGroup,
        __coordinates.name() : __coordinates,
        __extrude.name() : __extrude,
        __tessellate.name() : __tessellate,
        __LineStringSimpleExtensionGroup.name() : __LineStringSimpleExtensionGroup,
        __LineStringObjectExtensionGroup.name() : __LineStringObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LineStringType = LineStringType
Namespace.addCategoryObject('typeBinding', 'LineStringType', LineStringType)


# Complex type {http://www.opengis.net/kml/2.2}LinearRingType with content type ELEMENT_ONLY
class LinearRingType (AbstractGeometryType):
    """Complex type {http://www.opengis.net/kml/2.2}LinearRingType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinearRingType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 926, 2)
    _ElementMap = AbstractGeometryType._ElementMap.copy()
    _AttributeMap = AbstractGeometryType._AttributeMap.copy()
    # Base type is AbstractGeometryType
    
    # Element {http://www.opengis.net/kml/2.2}altitudeModeGroup uses Python identifier altitudeModeGroup
    __altitudeModeGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), 'altitudeModeGroup', '__httpwww_opengis_netkml2_2_LinearRingType_httpwww_opengis_netkml2_2altitudeModeGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2), )

    
    altitudeModeGroup = property(__altitudeModeGroup.value, __altitudeModeGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coordinates'), 'coordinates', '__httpwww_opengis_netkml2_2_LinearRingType_httpwww_opengis_netkml2_2coordinates', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 198, 2), )

    
    coordinates = property(__coordinates.value, __coordinates.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}extrude uses Python identifier extrude
    __extrude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extrude'), 'extrude', '__httpwww_opengis_netkml2_2_LinearRingType_httpwww_opengis_netkml2_2extrude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 206, 2), )

    
    extrude = property(__extrude.value, __extrude.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}tessellate uses Python identifier tessellate
    __tessellate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tessellate'), 'tessellate', '__httpwww_opengis_netkml2_2_LinearRingType_httpwww_opengis_netkml2_2tessellate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 265, 2), )

    
    tessellate = property(__tessellate.value, __tessellate.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractGeometrySimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractGeometrySimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractGeometryType
    
    # Element AbstractGeometryObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractGeometryObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractGeometryType
    
    # Element {http://www.opengis.net/kml/2.2}LinearRingSimpleExtensionGroup uses Python identifier LinearRingSimpleExtensionGroup
    __LinearRingSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinearRingSimpleExtensionGroup'), 'LinearRingSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_LinearRingType_httpwww_opengis_netkml2_2LinearRingSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 942, 2), )

    
    LinearRingSimpleExtensionGroup = property(__LinearRingSimpleExtensionGroup.value, __LinearRingSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LinearRingObjectExtensionGroup uses Python identifier LinearRingObjectExtensionGroup
    __LinearRingObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinearRingObjectExtensionGroup'), 'LinearRingObjectExtensionGroup', '__httpwww_opengis_netkml2_2_LinearRingType_httpwww_opengis_netkml2_2LinearRingObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 944, 2), )

    
    LinearRingObjectExtensionGroup = property(__LinearRingObjectExtensionGroup.value, __LinearRingObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __altitudeModeGroup.name() : __altitudeModeGroup,
        __coordinates.name() : __coordinates,
        __extrude.name() : __extrude,
        __tessellate.name() : __tessellate,
        __LinearRingSimpleExtensionGroup.name() : __LinearRingSimpleExtensionGroup,
        __LinearRingObjectExtensionGroup.name() : __LinearRingObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LinearRingType = LinearRingType
Namespace.addCategoryObject('typeBinding', 'LinearRingType', LinearRingType)


# Complex type {http://www.opengis.net/kml/2.2}PolygonType with content type ELEMENT_ONLY
class PolygonType (AbstractGeometryType):
    """Complex type {http://www.opengis.net/kml/2.2}PolygonType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolygonType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 949, 2)
    _ElementMap = AbstractGeometryType._ElementMap.copy()
    _AttributeMap = AbstractGeometryType._AttributeMap.copy()
    # Base type is AbstractGeometryType
    
    # Element {http://www.opengis.net/kml/2.2}altitudeModeGroup uses Python identifier altitudeModeGroup
    __altitudeModeGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), 'altitudeModeGroup', '__httpwww_opengis_netkml2_2_PolygonType_httpwww_opengis_netkml2_2altitudeModeGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2), )

    
    altitudeModeGroup = property(__altitudeModeGroup.value, __altitudeModeGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}extrude uses Python identifier extrude
    __extrude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extrude'), 'extrude', '__httpwww_opengis_netkml2_2_PolygonType_httpwww_opengis_netkml2_2extrude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 206, 2), )

    
    extrude = property(__extrude.value, __extrude.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}tessellate uses Python identifier tessellate
    __tessellate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tessellate'), 'tessellate', '__httpwww_opengis_netkml2_2_PolygonType_httpwww_opengis_netkml2_2tessellate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 265, 2), )

    
    tessellate = property(__tessellate.value, __tessellate.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractGeometrySimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractGeometrySimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractGeometryType
    
    # Element AbstractGeometryObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractGeometryObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractGeometryType
    
    # Element {http://www.opengis.net/kml/2.2}PolygonSimpleExtensionGroup uses Python identifier PolygonSimpleExtensionGroup
    __PolygonSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolygonSimpleExtensionGroup'), 'PolygonSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_PolygonType_httpwww_opengis_netkml2_2PolygonSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 967, 2), )

    
    PolygonSimpleExtensionGroup = property(__PolygonSimpleExtensionGroup.value, __PolygonSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}PolygonObjectExtensionGroup uses Python identifier PolygonObjectExtensionGroup
    __PolygonObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolygonObjectExtensionGroup'), 'PolygonObjectExtensionGroup', '__httpwww_opengis_netkml2_2_PolygonType_httpwww_opengis_netkml2_2PolygonObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 969, 2), )

    
    PolygonObjectExtensionGroup = property(__PolygonObjectExtensionGroup.value, __PolygonObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}outerBoundaryIs uses Python identifier outerBoundaryIs
    __outerBoundaryIs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'outerBoundaryIs'), 'outerBoundaryIs', '__httpwww_opengis_netkml2_2_PolygonType_httpwww_opengis_netkml2_2outerBoundaryIs', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 972, 2), )

    
    outerBoundaryIs = property(__outerBoundaryIs.value, __outerBoundaryIs.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}innerBoundaryIs uses Python identifier innerBoundaryIs
    __innerBoundaryIs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'innerBoundaryIs'), 'innerBoundaryIs', '__httpwww_opengis_netkml2_2_PolygonType_httpwww_opengis_netkml2_2innerBoundaryIs', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 973, 2), )

    
    innerBoundaryIs = property(__innerBoundaryIs.value, __innerBoundaryIs.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __altitudeModeGroup.name() : __altitudeModeGroup,
        __extrude.name() : __extrude,
        __tessellate.name() : __tessellate,
        __PolygonSimpleExtensionGroup.name() : __PolygonSimpleExtensionGroup,
        __PolygonObjectExtensionGroup.name() : __PolygonObjectExtensionGroup,
        __outerBoundaryIs.name() : __outerBoundaryIs,
        __innerBoundaryIs.name() : __innerBoundaryIs
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolygonType = PolygonType
Namespace.addCategoryObject('typeBinding', 'PolygonType', PolygonType)


# Complex type {http://www.opengis.net/kml/2.2}ModelType with content type ELEMENT_ONLY
class ModelType (AbstractGeometryType):
    """Complex type {http://www.opengis.net/kml/2.2}ModelType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ModelType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 990, 2)
    _ElementMap = AbstractGeometryType._ElementMap.copy()
    _AttributeMap = AbstractGeometryType._AttributeMap.copy()
    # Base type is AbstractGeometryType
    
    # Element {http://www.opengis.net/kml/2.2}altitudeModeGroup uses Python identifier altitudeModeGroup
    __altitudeModeGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), 'altitudeModeGroup', '__httpwww_opengis_netkml2_2_ModelType_httpwww_opengis_netkml2_2altitudeModeGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2), )

    
    altitudeModeGroup = property(__altitudeModeGroup.value, __altitudeModeGroup.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractGeometrySimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractGeometrySimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractGeometryType
    
    # Element AbstractGeometryObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractGeometryObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractGeometryType
    
    # Element {http://www.opengis.net/kml/2.2}Link uses Python identifier Link
    __Link = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Link'), 'Link', '__httpwww_opengis_netkml2_2_ModelType_httpwww_opengis_netkml2_2Link', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 826, 2), )

    
    Link = property(__Link.value, __Link.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ModelSimpleExtensionGroup uses Python identifier ModelSimpleExtensionGroup
    __ModelSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModelSimpleExtensionGroup'), 'ModelSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_ModelType_httpwww_opengis_netkml2_2ModelSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1008, 2), )

    
    ModelSimpleExtensionGroup = property(__ModelSimpleExtensionGroup.value, __ModelSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ModelObjectExtensionGroup uses Python identifier ModelObjectExtensionGroup
    __ModelObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModelObjectExtensionGroup'), 'ModelObjectExtensionGroup', '__httpwww_opengis_netkml2_2_ModelType_httpwww_opengis_netkml2_2ModelObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1010, 2), )

    
    ModelObjectExtensionGroup = property(__ModelObjectExtensionGroup.value, __ModelObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Location uses Python identifier Location
    __Location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Location'), 'Location', '__httpwww_opengis_netkml2_2_ModelType_httpwww_opengis_netkml2_2Location', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1013, 2), )

    
    Location = property(__Location.value, __Location.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Orientation uses Python identifier Orientation
    __Orientation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Orientation'), 'Orientation', '__httpwww_opengis_netkml2_2_ModelType_httpwww_opengis_netkml2_2Orientation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1035, 2), )

    
    Orientation = property(__Orientation.value, __Orientation.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Scale uses Python identifier Scale
    __Scale = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Scale'), 'Scale', '__httpwww_opengis_netkml2_2_ModelType_httpwww_opengis_netkml2_2Scale', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1057, 2), )

    
    Scale = property(__Scale.value, __Scale.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ResourceMap uses Python identifier ResourceMap
    __ResourceMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResourceMap'), 'ResourceMap', '__httpwww_opengis_netkml2_2_ModelType_httpwww_opengis_netkml2_2ResourceMap', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1079, 2), )

    
    ResourceMap = property(__ResourceMap.value, __ResourceMap.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __altitudeModeGroup.name() : __altitudeModeGroup,
        __Link.name() : __Link,
        __ModelSimpleExtensionGroup.name() : __ModelSimpleExtensionGroup,
        __ModelObjectExtensionGroup.name() : __ModelObjectExtensionGroup,
        __Location.name() : __Location,
        __Orientation.name() : __Orientation,
        __Scale.name() : __Scale,
        __ResourceMap.name() : __ResourceMap
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ModelType = ModelType
Namespace.addCategoryObject('typeBinding', 'ModelType', ModelType)


# Complex type {http://www.opengis.net/kml/2.2}LatLonBoxType with content type ELEMENT_ONLY
class LatLonBoxType (AbstractLatLonBoxType):
    """Complex type {http://www.opengis.net/kml/2.2}LatLonBoxType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LatLonBoxType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1165, 2)
    _ElementMap = AbstractLatLonBoxType._ElementMap.copy()
    _AttributeMap = AbstractLatLonBoxType._AttributeMap.copy()
    # Base type is AbstractLatLonBoxType
    
    # Element east ({http://www.opengis.net/kml/2.2}east) inherited from {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType
    
    # Element north ({http://www.opengis.net/kml/2.2}north) inherited from {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType
    
    # Element {http://www.opengis.net/kml/2.2}rotation uses Python identifier rotation
    __rotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'rotation'), 'rotation', '__httpwww_opengis_netkml2_2_LatLonBoxType_httpwww_opengis_netkml2_2rotation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 253, 2), )

    
    rotation = property(__rotation.value, __rotation.set, None, None)

    
    # Element south ({http://www.opengis.net/kml/2.2}south) inherited from {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType
    
    # Element west ({http://www.opengis.net/kml/2.2}west) inherited from {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractLatLonBoxSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractLatLonBoxSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType
    
    # Element AbstractLatLonBoxObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractLatLonBoxObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractLatLonBoxType
    
    # Element {http://www.opengis.net/kml/2.2}LatLonBoxSimpleExtensionGroup uses Python identifier LatLonBoxSimpleExtensionGroup
    __LatLonBoxSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LatLonBoxSimpleExtensionGroup'), 'LatLonBoxSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_LatLonBoxType_httpwww_opengis_netkml2_2LatLonBoxSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1178, 2), )

    
    LatLonBoxSimpleExtensionGroup = property(__LatLonBoxSimpleExtensionGroup.value, __LatLonBoxSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LatLonBoxObjectExtensionGroup uses Python identifier LatLonBoxObjectExtensionGroup
    __LatLonBoxObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LatLonBoxObjectExtensionGroup'), 'LatLonBoxObjectExtensionGroup', '__httpwww_opengis_netkml2_2_LatLonBoxType_httpwww_opengis_netkml2_2LatLonBoxObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1180, 2), )

    
    LatLonBoxObjectExtensionGroup = property(__LatLonBoxObjectExtensionGroup.value, __LatLonBoxObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __rotation.name() : __rotation,
        __LatLonBoxSimpleExtensionGroup.name() : __LatLonBoxSimpleExtensionGroup,
        __LatLonBoxObjectExtensionGroup.name() : __LatLonBoxObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LatLonBoxType = LatLonBoxType
Namespace.addCategoryObject('typeBinding', 'LatLonBoxType', LatLonBoxType)


# Complex type {http://www.opengis.net/kml/2.2}StyleType with content type ELEMENT_ONLY
class StyleType (AbstractStyleSelectorType):
    """Complex type {http://www.opengis.net/kml/2.2}StyleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StyleType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1280, 2)
    _ElementMap = AbstractStyleSelectorType._ElementMap.copy()
    _AttributeMap = AbstractStyleSelectorType._AttributeMap.copy()
    # Base type is AbstractStyleSelectorType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractStyleSelectorSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractStyleSelectorSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractStyleSelectorType
    
    # Element AbstractStyleSelectorObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractStyleSelectorObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractStyleSelectorType
    
    # Element {http://www.opengis.net/kml/2.2}StyleSimpleExtensionGroup uses Python identifier StyleSimpleExtensionGroup
    __StyleSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StyleSimpleExtensionGroup'), 'StyleSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_StyleType_httpwww_opengis_netkml2_2StyleSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1298, 2), )

    
    StyleSimpleExtensionGroup = property(__StyleSimpleExtensionGroup.value, __StyleSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}StyleObjectExtensionGroup uses Python identifier StyleObjectExtensionGroup
    __StyleObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StyleObjectExtensionGroup'), 'StyleObjectExtensionGroup', '__httpwww_opengis_netkml2_2_StyleType_httpwww_opengis_netkml2_2StyleObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1300, 2), )

    
    StyleObjectExtensionGroup = property(__StyleObjectExtensionGroup.value, __StyleObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}IconStyle uses Python identifier IconStyle
    __IconStyle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IconStyle'), 'IconStyle', '__httpwww_opengis_netkml2_2_StyleType_httpwww_opengis_netkml2_2IconStyle', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1385, 2), )

    
    IconStyle = property(__IconStyle.value, __IconStyle.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LabelStyle uses Python identifier LabelStyle
    __LabelStyle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LabelStyle'), 'LabelStyle', '__httpwww_opengis_netkml2_2_StyleType_httpwww_opengis_netkml2_2LabelStyle', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1426, 2), )

    
    LabelStyle = property(__LabelStyle.value, __LabelStyle.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LineStyle uses Python identifier LineStyle
    __LineStyle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LineStyle'), 'LineStyle', '__httpwww_opengis_netkml2_2_StyleType_httpwww_opengis_netkml2_2LineStyle', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1446, 2), )

    
    LineStyle = property(__LineStyle.value, __LineStyle.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}PolyStyle uses Python identifier PolyStyle
    __PolyStyle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolyStyle'), 'PolyStyle', '__httpwww_opengis_netkml2_2_StyleType_httpwww_opengis_netkml2_2PolyStyle', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1466, 2), )

    
    PolyStyle = property(__PolyStyle.value, __PolyStyle.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}BalloonStyle uses Python identifier BalloonStyle
    __BalloonStyle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BalloonStyle'), 'BalloonStyle', '__httpwww_opengis_netkml2_2_StyleType_httpwww_opengis_netkml2_2BalloonStyle', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1487, 2), )

    
    BalloonStyle = property(__BalloonStyle.value, __BalloonStyle.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ListStyle uses Python identifier ListStyle
    __ListStyle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ListStyle'), 'ListStyle', '__httpwww_opengis_netkml2_2_StyleType_httpwww_opengis_netkml2_2ListStyle', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1516, 2), )

    
    ListStyle = property(__ListStyle.value, __ListStyle.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __StyleSimpleExtensionGroup.name() : __StyleSimpleExtensionGroup,
        __StyleObjectExtensionGroup.name() : __StyleObjectExtensionGroup,
        __IconStyle.name() : __IconStyle,
        __LabelStyle.name() : __LabelStyle,
        __LineStyle.name() : __LineStyle,
        __PolyStyle.name() : __PolyStyle,
        __BalloonStyle.name() : __BalloonStyle,
        __ListStyle.name() : __ListStyle
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.StyleType = StyleType
Namespace.addCategoryObject('typeBinding', 'StyleType', StyleType)


# Complex type {http://www.opengis.net/kml/2.2}StyleMapType with content type ELEMENT_ONLY
class StyleMapType (AbstractStyleSelectorType):
    """Complex type {http://www.opengis.net/kml/2.2}StyleMapType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StyleMapType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1305, 2)
    _ElementMap = AbstractStyleSelectorType._ElementMap.copy()
    _AttributeMap = AbstractStyleSelectorType._AttributeMap.copy()
    # Base type is AbstractStyleSelectorType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractStyleSelectorSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractStyleSelectorSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractStyleSelectorType
    
    # Element AbstractStyleSelectorObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractStyleSelectorObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractStyleSelectorType
    
    # Element {http://www.opengis.net/kml/2.2}StyleMapSimpleExtensionGroup uses Python identifier StyleMapSimpleExtensionGroup
    __StyleMapSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StyleMapSimpleExtensionGroup'), 'StyleMapSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_StyleMapType_httpwww_opengis_netkml2_2StyleMapSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1318, 2), )

    
    StyleMapSimpleExtensionGroup = property(__StyleMapSimpleExtensionGroup.value, __StyleMapSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}StyleMapObjectExtensionGroup uses Python identifier StyleMapObjectExtensionGroup
    __StyleMapObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StyleMapObjectExtensionGroup'), 'StyleMapObjectExtensionGroup', '__httpwww_opengis_netkml2_2_StyleMapType_httpwww_opengis_netkml2_2StyleMapObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1320, 2), )

    
    StyleMapObjectExtensionGroup = property(__StyleMapObjectExtensionGroup.value, __StyleMapObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Pair uses Python identifier Pair
    __Pair = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pair'), 'Pair', '__httpwww_opengis_netkml2_2_StyleMapType_httpwww_opengis_netkml2_2Pair', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1323, 2), )

    
    Pair = property(__Pair.value, __Pair.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __StyleMapSimpleExtensionGroup.name() : __StyleMapSimpleExtensionGroup,
        __StyleMapObjectExtensionGroup.name() : __StyleMapObjectExtensionGroup,
        __Pair.name() : __Pair
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.StyleMapType = StyleMapType
Namespace.addCategoryObject('typeBinding', 'StyleMapType', StyleMapType)


# Complex type {http://www.opengis.net/kml/2.2}AbstractColorStyleType with content type ELEMENT_ONLY
class AbstractColorStyleType (AbstractSubStyleType):
    """Complex type {http://www.opengis.net/kml/2.2}AbstractColorStyleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1366, 2)
    _ElementMap = AbstractSubStyleType._ElementMap.copy()
    _AttributeMap = AbstractSubStyleType._AttributeMap.copy()
    # Base type is AbstractSubStyleType
    
    # Element {http://www.opengis.net/kml/2.2}color uses Python identifier color
    __color = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'color'), 'color', '__httpwww_opengis_netkml2_2_AbstractColorStyleType_httpwww_opengis_netkml2_2color', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 195, 2), )

    
    color = property(__color.value, __color.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}colorMode uses Python identifier colorMode
    __colorMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'colorMode'), 'colorMode', '__httpwww_opengis_netkml2_2_AbstractColorStyleType_httpwww_opengis_netkml2_2colorMode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 196, 2), )

    
    colorMode = property(__colorMode.value, __colorMode.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractSubStyleSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element AbstractSubStyleObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractColorStyleObjectExtensionGroup uses Python identifier AbstractColorStyleObjectExtensionGroup
    __AbstractColorStyleObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleObjectExtensionGroup'), 'AbstractColorStyleObjectExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractColorStyleType_httpwww_opengis_netkml2_2AbstractColorStyleObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1380, 2), )

    
    AbstractColorStyleObjectExtensionGroup = property(__AbstractColorStyleObjectExtensionGroup.value, __AbstractColorStyleObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}AbstractColorStyleSimpleExtensionGroup uses Python identifier AbstractColorStyleSimpleExtensionGroup
    __AbstractColorStyleSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleSimpleExtensionGroup'), 'AbstractColorStyleSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_AbstractColorStyleType_httpwww_opengis_netkml2_2AbstractColorStyleSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1382, 2), )

    
    AbstractColorStyleSimpleExtensionGroup = property(__AbstractColorStyleSimpleExtensionGroup.value, __AbstractColorStyleSimpleExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __color.name() : __color,
        __colorMode.name() : __colorMode,
        __AbstractColorStyleObjectExtensionGroup.name() : __AbstractColorStyleObjectExtensionGroup,
        __AbstractColorStyleSimpleExtensionGroup.name() : __AbstractColorStyleSimpleExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractColorStyleType = AbstractColorStyleType
Namespace.addCategoryObject('typeBinding', 'AbstractColorStyleType', AbstractColorStyleType)


# Complex type {http://www.opengis.net/kml/2.2}BalloonStyleType with content type ELEMENT_ONLY
class BalloonStyleType (AbstractSubStyleType):
    """Complex type {http://www.opengis.net/kml/2.2}BalloonStyleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BalloonStyleType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1489, 2)
    _ElementMap = AbstractSubStyleType._ElementMap.copy()
    _AttributeMap = AbstractSubStyleType._AttributeMap.copy()
    # Base type is AbstractSubStyleType
    
    # Element {http://www.opengis.net/kml/2.2}bgColor uses Python identifier bgColor
    __bgColor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bgColor'), 'bgColor', '__httpwww_opengis_netkml2_2_BalloonStyleType_httpwww_opengis_netkml2_2bgColor', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 193, 2), )

    
    bgColor = property(__bgColor.value, __bgColor.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}color uses Python identifier color
    __color = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'color'), 'color', '__httpwww_opengis_netkml2_2_BalloonStyleType_httpwww_opengis_netkml2_2color', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 195, 2), )

    
    color = property(__color.value, __color.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}displayMode uses Python identifier displayMode
    __displayMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayMode'), 'displayMode', '__httpwww_opengis_netkml2_2_BalloonStyleType_httpwww_opengis_netkml2_2displayMode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 201, 2), )

    
    displayMode = property(__displayMode.value, __displayMode.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}text uses Python identifier text
    __text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'text'), 'text', '__httpwww_opengis_netkml2_2_BalloonStyleType_httpwww_opengis_netkml2_2text', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 266, 2), )

    
    text = property(__text.value, __text.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}textColor uses Python identifier textColor
    __textColor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'textColor'), 'textColor', '__httpwww_opengis_netkml2_2_BalloonStyleType_httpwww_opengis_netkml2_2textColor', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 267, 2), )

    
    textColor = property(__textColor.value, __textColor.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractSubStyleSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element AbstractSubStyleObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element {http://www.opengis.net/kml/2.2}BalloonStyleSimpleExtensionGroup uses Python identifier BalloonStyleSimpleExtensionGroup
    __BalloonStyleSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BalloonStyleSimpleExtensionGroup'), 'BalloonStyleSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_BalloonStyleType_httpwww_opengis_netkml2_2BalloonStyleSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1511, 2), )

    
    BalloonStyleSimpleExtensionGroup = property(__BalloonStyleSimpleExtensionGroup.value, __BalloonStyleSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}BalloonStyleObjectExtensionGroup uses Python identifier BalloonStyleObjectExtensionGroup
    __BalloonStyleObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BalloonStyleObjectExtensionGroup'), 'BalloonStyleObjectExtensionGroup', '__httpwww_opengis_netkml2_2_BalloonStyleType_httpwww_opengis_netkml2_2BalloonStyleObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1513, 2), )

    
    BalloonStyleObjectExtensionGroup = property(__BalloonStyleObjectExtensionGroup.value, __BalloonStyleObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __bgColor.name() : __bgColor,
        __color.name() : __color,
        __displayMode.name() : __displayMode,
        __text.name() : __text,
        __textColor.name() : __textColor,
        __BalloonStyleSimpleExtensionGroup.name() : __BalloonStyleSimpleExtensionGroup,
        __BalloonStyleObjectExtensionGroup.name() : __BalloonStyleObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BalloonStyleType = BalloonStyleType
Namespace.addCategoryObject('typeBinding', 'BalloonStyleType', BalloonStyleType)


# Complex type {http://www.opengis.net/kml/2.2}ListStyleType with content type ELEMENT_ONLY
class ListStyleType (AbstractSubStyleType):
    """Complex type {http://www.opengis.net/kml/2.2}ListStyleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ListStyleType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1518, 2)
    _ElementMap = AbstractSubStyleType._ElementMap.copy()
    _AttributeMap = AbstractSubStyleType._AttributeMap.copy()
    # Base type is AbstractSubStyleType
    
    # Element {http://www.opengis.net/kml/2.2}bgColor uses Python identifier bgColor
    __bgColor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bgColor'), 'bgColor', '__httpwww_opengis_netkml2_2_ListStyleType_httpwww_opengis_netkml2_2bgColor', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 193, 2), )

    
    bgColor = property(__bgColor.value, __bgColor.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}listItemType uses Python identifier listItemType
    __listItemType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'listItemType'), 'listItemType', '__httpwww_opengis_netkml2_2_ListStyleType_httpwww_opengis_netkml2_2listItemType', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 225, 2), )

    
    listItemType = property(__listItemType.value, __listItemType.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}maxSnippetLines uses Python identifier maxSnippetLines
    __maxSnippetLines = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxSnippetLines'), 'maxSnippetLines', '__httpwww_opengis_netkml2_2_ListStyleType_httpwww_opengis_netkml2_2maxSnippetLines', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 227, 2), )

    
    maxSnippetLines = property(__maxSnippetLines.value, __maxSnippetLines.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractSubStyleSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element AbstractSubStyleObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element {http://www.opengis.net/kml/2.2}ListStyleSimpleExtensionGroup uses Python identifier ListStyleSimpleExtensionGroup
    __ListStyleSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ListStyleSimpleExtensionGroup'), 'ListStyleSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_ListStyleType_httpwww_opengis_netkml2_2ListStyleSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1534, 2), )

    
    ListStyleSimpleExtensionGroup = property(__ListStyleSimpleExtensionGroup.value, __ListStyleSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ListStyleObjectExtensionGroup uses Python identifier ListStyleObjectExtensionGroup
    __ListStyleObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ListStyleObjectExtensionGroup'), 'ListStyleObjectExtensionGroup', '__httpwww_opengis_netkml2_2_ListStyleType_httpwww_opengis_netkml2_2ListStyleObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1536, 2), )

    
    ListStyleObjectExtensionGroup = property(__ListStyleObjectExtensionGroup.value, __ListStyleObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ItemIcon uses Python identifier ItemIcon
    __ItemIcon = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ItemIcon'), 'ItemIcon', '__httpwww_opengis_netkml2_2_ListStyleType_httpwww_opengis_netkml2_2ItemIcon', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1539, 2), )

    
    ItemIcon = property(__ItemIcon.value, __ItemIcon.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __bgColor.name() : __bgColor,
        __listItemType.name() : __listItemType,
        __maxSnippetLines.name() : __maxSnippetLines,
        __ListStyleSimpleExtensionGroup.name() : __ListStyleSimpleExtensionGroup,
        __ListStyleObjectExtensionGroup.name() : __ListStyleObjectExtensionGroup,
        __ItemIcon.name() : __ItemIcon
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ListStyleType = ListStyleType
Namespace.addCategoryObject('typeBinding', 'ListStyleType', ListStyleType)


# Complex type {http://www.opengis.net/kml/2.2}TimeStampType with content type ELEMENT_ONLY
class TimeStampType (AbstractTimePrimitiveType):
    """Complex type {http://www.opengis.net/kml/2.2}TimeStampType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeStampType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1562, 2)
    _ElementMap = AbstractTimePrimitiveType._ElementMap.copy()
    _AttributeMap = AbstractTimePrimitiveType._AttributeMap.copy()
    # Base type is AbstractTimePrimitiveType
    
    # Element {http://www.opengis.net/kml/2.2}when uses Python identifier when
    __when = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'when'), 'when', '__httpwww_opengis_netkml2_2_TimeStampType_httpwww_opengis_netkml2_2when', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 279, 2), )

    
    when = property(__when.value, __when.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractTimePrimitiveSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractTimePrimitiveSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractTimePrimitiveType
    
    # Element AbstractTimePrimitiveObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractTimePrimitiveObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractTimePrimitiveType
    
    # Element {http://www.opengis.net/kml/2.2}TimeStampSimpleExtensionGroup uses Python identifier TimeStampSimpleExtensionGroup
    __TimeStampSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeStampSimpleExtensionGroup'), 'TimeStampSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_TimeStampType_httpwww_opengis_netkml2_2TimeStampSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1575, 2), )

    
    TimeStampSimpleExtensionGroup = property(__TimeStampSimpleExtensionGroup.value, __TimeStampSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}TimeStampObjectExtensionGroup uses Python identifier TimeStampObjectExtensionGroup
    __TimeStampObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeStampObjectExtensionGroup'), 'TimeStampObjectExtensionGroup', '__httpwww_opengis_netkml2_2_TimeStampType_httpwww_opengis_netkml2_2TimeStampObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1577, 2), )

    
    TimeStampObjectExtensionGroup = property(__TimeStampObjectExtensionGroup.value, __TimeStampObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __when.name() : __when,
        __TimeStampSimpleExtensionGroup.name() : __TimeStampSimpleExtensionGroup,
        __TimeStampObjectExtensionGroup.name() : __TimeStampObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TimeStampType = TimeStampType
Namespace.addCategoryObject('typeBinding', 'TimeStampType', TimeStampType)


# Complex type {http://www.opengis.net/kml/2.2}TimeSpanType with content type ELEMENT_ONLY
class TimeSpanType (AbstractTimePrimitiveType):
    """Complex type {http://www.opengis.net/kml/2.2}TimeSpanType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeSpanType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1582, 2)
    _ElementMap = AbstractTimePrimitiveType._ElementMap.copy()
    _AttributeMap = AbstractTimePrimitiveType._AttributeMap.copy()
    # Base type is AbstractTimePrimitiveType
    
    # Element {http://www.opengis.net/kml/2.2}begin uses Python identifier begin
    __begin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'begin'), 'begin', '__httpwww_opengis_netkml2_2_TimeSpanType_httpwww_opengis_netkml2_2begin', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 192, 2), )

    
    begin = property(__begin.value, __begin.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}end uses Python identifier end
    __end = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'end'), 'end', '__httpwww_opengis_netkml2_2_TimeSpanType_httpwww_opengis_netkml2_2end', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 204, 2), )

    
    end = property(__end.value, __end.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractTimePrimitiveSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractTimePrimitiveSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractTimePrimitiveType
    
    # Element AbstractTimePrimitiveObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractTimePrimitiveObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractTimePrimitiveType
    
    # Element {http://www.opengis.net/kml/2.2}TimeSpanSimpleExtensionGroup uses Python identifier TimeSpanSimpleExtensionGroup
    __TimeSpanSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeSpanSimpleExtensionGroup'), 'TimeSpanSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_TimeSpanType_httpwww_opengis_netkml2_2TimeSpanSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1596, 2), )

    
    TimeSpanSimpleExtensionGroup = property(__TimeSpanSimpleExtensionGroup.value, __TimeSpanSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}TimeSpanObjectExtensionGroup uses Python identifier TimeSpanObjectExtensionGroup
    __TimeSpanObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeSpanObjectExtensionGroup'), 'TimeSpanObjectExtensionGroup', '__httpwww_opengis_netkml2_2_TimeSpanType_httpwww_opengis_netkml2_2TimeSpanObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1598, 2), )

    
    TimeSpanObjectExtensionGroup = property(__TimeSpanObjectExtensionGroup.value, __TimeSpanObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __begin.name() : __begin,
        __end.name() : __end,
        __TimeSpanSimpleExtensionGroup.name() : __TimeSpanSimpleExtensionGroup,
        __TimeSpanObjectExtensionGroup.name() : __TimeSpanObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TimeSpanType = TimeSpanType
Namespace.addCategoryObject('typeBinding', 'TimeSpanType', TimeSpanType)


# Complex type {http://www.opengis.net/kml/2.2}DocumentType with content type ELEMENT_ONLY
class DocumentType (AbstractContainerType):
    """Complex type {http://www.opengis.net/kml/2.2}DocumentType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DocumentType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 647, 2)
    _ElementMap = AbstractContainerType._ElementMap.copy()
    _AttributeMap = AbstractContainerType._AttributeMap.copy()
    # Base type is AbstractContainerType
    
    # Element address ({http://www.opengis.net/kml/2.2}address) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/kml/2.2}description) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element name ({http://www.opengis.net/kml/2.2}name) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element open ({http://www.opengis.net/kml/2.2}open) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element phoneNumber ({http://www.opengis.net/kml/2.2}phoneNumber) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element snippet ({http://www.opengis.net/kml/2.2}snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element styleUrl ({http://www.opengis.net/kml/2.2}styleUrl) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element visibility ({http://www.opengis.net/kml/2.2}visibility) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractFeatureGroup uses Python identifier AbstractFeatureGroup
    __AbstractFeatureGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureGroup'), 'AbstractFeatureGroup', '__httpwww_opengis_netkml2_2_DocumentType_httpwww_opengis_netkml2_2AbstractFeatureGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 302, 2), )

    
    AbstractFeatureGroup = property(__AbstractFeatureGroup.value, __AbstractFeatureGroup.set, None, None)

    
    # Element AbstractFeatureObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractFeatureSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Snippet ({http://www.opengis.net/kml/2.2}Snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractViewGroup ({http://www.opengis.net/kml/2.2}AbstractViewGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Metadata ({http://www.opengis.net/kml/2.2}Metadata) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ExtendedData ({http://www.opengis.net/kml/2.2}ExtendedData) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractContainerSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractContainerSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractContainerType
    
    # Element AbstractContainerObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractContainerObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractContainerType
    
    # Element AbstractStyleSelectorGroup ({http://www.opengis.net/kml/2.2}AbstractStyleSelectorGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractTimePrimitiveGroup ({http://www.opengis.net/kml/2.2}AbstractTimePrimitiveGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}DocumentSimpleExtensionGroup uses Python identifier DocumentSimpleExtensionGroup
    __DocumentSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DocumentSimpleExtensionGroup'), 'DocumentSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_DocumentType_httpwww_opengis_netkml2_2DocumentSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 662, 2), )

    
    DocumentSimpleExtensionGroup = property(__DocumentSimpleExtensionGroup.value, __DocumentSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}DocumentObjectExtensionGroup uses Python identifier DocumentObjectExtensionGroup
    __DocumentObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DocumentObjectExtensionGroup'), 'DocumentObjectExtensionGroup', '__httpwww_opengis_netkml2_2_DocumentType_httpwww_opengis_netkml2_2DocumentObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 664, 2), )

    
    DocumentObjectExtensionGroup = property(__DocumentObjectExtensionGroup.value, __DocumentObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}Schema uses Python identifier Schema
    __Schema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Schema'), 'Schema', '__httpwww_opengis_netkml2_2_DocumentType_httpwww_opengis_netkml2_2Schema', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 667, 2), )

    
    Schema = property(__Schema.value, __Schema.set, None, None)

    
    # Element Region ({http://www.opengis.net/kml/2.2}Region) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element author ({http://www.w3.org/2005/Atom}author) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element link ({http://www.w3.org/2005/Atom}link) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AddressDetails ({urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressDetails) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __AbstractFeatureGroup.name() : __AbstractFeatureGroup,
        __DocumentSimpleExtensionGroup.name() : __DocumentSimpleExtensionGroup,
        __DocumentObjectExtensionGroup.name() : __DocumentObjectExtensionGroup,
        __Schema.name() : __Schema
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DocumentType = DocumentType
Namespace.addCategoryObject('typeBinding', 'DocumentType', DocumentType)


# Complex type {http://www.opengis.net/kml/2.2}FolderType with content type ELEMENT_ONLY
class FolderType (AbstractContainerType):
    """Complex type {http://www.opengis.net/kml/2.2}FolderType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FolderType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 692, 2)
    _ElementMap = AbstractContainerType._ElementMap.copy()
    _AttributeMap = AbstractContainerType._AttributeMap.copy()
    # Base type is AbstractContainerType
    
    # Element address ({http://www.opengis.net/kml/2.2}address) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/kml/2.2}description) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element name ({http://www.opengis.net/kml/2.2}name) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element open ({http://www.opengis.net/kml/2.2}open) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element phoneNumber ({http://www.opengis.net/kml/2.2}phoneNumber) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element snippet ({http://www.opengis.net/kml/2.2}snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element styleUrl ({http://www.opengis.net/kml/2.2}styleUrl) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element visibility ({http://www.opengis.net/kml/2.2}visibility) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element {http://www.opengis.net/kml/2.2}AbstractFeatureGroup uses Python identifier AbstractFeatureGroup
    __AbstractFeatureGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureGroup'), 'AbstractFeatureGroup', '__httpwww_opengis_netkml2_2_FolderType_httpwww_opengis_netkml2_2AbstractFeatureGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 302, 2), )

    
    AbstractFeatureGroup = property(__AbstractFeatureGroup.value, __AbstractFeatureGroup.set, None, None)

    
    # Element AbstractFeatureObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractFeatureSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Snippet ({http://www.opengis.net/kml/2.2}Snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractViewGroup ({http://www.opengis.net/kml/2.2}AbstractViewGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Metadata ({http://www.opengis.net/kml/2.2}Metadata) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ExtendedData ({http://www.opengis.net/kml/2.2}ExtendedData) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractContainerSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractContainerSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractContainerType
    
    # Element AbstractContainerObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractContainerObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractContainerType
    
    # Element AbstractStyleSelectorGroup ({http://www.opengis.net/kml/2.2}AbstractStyleSelectorGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractTimePrimitiveGroup ({http://www.opengis.net/kml/2.2}AbstractTimePrimitiveGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}FolderSimpleExtensionGroup uses Python identifier FolderSimpleExtensionGroup
    __FolderSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FolderSimpleExtensionGroup'), 'FolderSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_FolderType_httpwww_opengis_netkml2_2FolderSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 706, 2), )

    
    FolderSimpleExtensionGroup = property(__FolderSimpleExtensionGroup.value, __FolderSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}FolderObjectExtensionGroup uses Python identifier FolderObjectExtensionGroup
    __FolderObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FolderObjectExtensionGroup'), 'FolderObjectExtensionGroup', '__httpwww_opengis_netkml2_2_FolderType_httpwww_opengis_netkml2_2FolderObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 708, 2), )

    
    FolderObjectExtensionGroup = property(__FolderObjectExtensionGroup.value, __FolderObjectExtensionGroup.set, None, None)

    
    # Element Region ({http://www.opengis.net/kml/2.2}Region) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element author ({http://www.w3.org/2005/Atom}author) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element link ({http://www.w3.org/2005/Atom}link) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AddressDetails ({urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressDetails) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __AbstractFeatureGroup.name() : __AbstractFeatureGroup,
        __FolderSimpleExtensionGroup.name() : __FolderSimpleExtensionGroup,
        __FolderObjectExtensionGroup.name() : __FolderObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FolderType = FolderType
Namespace.addCategoryObject('typeBinding', 'FolderType', FolderType)


# Complex type {http://www.opengis.net/kml/2.2}GroundOverlayType with content type ELEMENT_ONLY
class GroundOverlayType (AbstractOverlayType):
    """Complex type {http://www.opengis.net/kml/2.2}GroundOverlayType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GroundOverlayType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1122, 2)
    _ElementMap = AbstractOverlayType._ElementMap.copy()
    _AttributeMap = AbstractOverlayType._AttributeMap.copy()
    # Base type is AbstractOverlayType
    
    # Element address ({http://www.opengis.net/kml/2.2}address) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}altitude uses Python identifier altitude
    __altitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'altitude'), 'altitude', '__httpwww_opengis_netkml2_2_GroundOverlayType_httpwww_opengis_netkml2_2altitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 188, 2), )

    
    altitude = property(__altitude.value, __altitude.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}altitudeModeGroup uses Python identifier altitudeModeGroup
    __altitudeModeGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), 'altitudeModeGroup', '__httpwww_opengis_netkml2_2_GroundOverlayType_httpwww_opengis_netkml2_2altitudeModeGroup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2), )

    
    altitudeModeGroup = property(__altitudeModeGroup.value, __altitudeModeGroup.set, None, None)

    
    # Element color ({http://www.opengis.net/kml/2.2}color) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element description ({http://www.opengis.net/kml/2.2}description) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element drawOrder ({http://www.opengis.net/kml/2.2}drawOrder) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element name ({http://www.opengis.net/kml/2.2}name) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element open ({http://www.opengis.net/kml/2.2}open) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element phoneNumber ({http://www.opengis.net/kml/2.2}phoneNumber) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element snippet ({http://www.opengis.net/kml/2.2}snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element styleUrl ({http://www.opengis.net/kml/2.2}styleUrl) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element visibility ({http://www.opengis.net/kml/2.2}visibility) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractFeatureObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractFeatureSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Snippet ({http://www.opengis.net/kml/2.2}Snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractViewGroup ({http://www.opengis.net/kml/2.2}AbstractViewGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Metadata ({http://www.opengis.net/kml/2.2}Metadata) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ExtendedData ({http://www.opengis.net/kml/2.2}ExtendedData) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractOverlaySimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractOverlaySimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element AbstractOverlayObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractOverlayObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element AbstractStyleSelectorGroup ({http://www.opengis.net/kml/2.2}AbstractStyleSelectorGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractTimePrimitiveGroup ({http://www.opengis.net/kml/2.2}AbstractTimePrimitiveGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Region ({http://www.opengis.net/kml/2.2}Region) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Icon ({http://www.opengis.net/kml/2.2}Icon) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element {http://www.opengis.net/kml/2.2}GroundOverlaySimpleExtensionGroup uses Python identifier GroundOverlaySimpleExtensionGroup
    __GroundOverlaySimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GroundOverlaySimpleExtensionGroup'), 'GroundOverlaySimpleExtensionGroup', '__httpwww_opengis_netkml2_2_GroundOverlayType_httpwww_opengis_netkml2_2GroundOverlaySimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1137, 2), )

    
    GroundOverlaySimpleExtensionGroup = property(__GroundOverlaySimpleExtensionGroup.value, __GroundOverlaySimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}GroundOverlayObjectExtensionGroup uses Python identifier GroundOverlayObjectExtensionGroup
    __GroundOverlayObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GroundOverlayObjectExtensionGroup'), 'GroundOverlayObjectExtensionGroup', '__httpwww_opengis_netkml2_2_GroundOverlayType_httpwww_opengis_netkml2_2GroundOverlayObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1139, 2), )

    
    GroundOverlayObjectExtensionGroup = property(__GroundOverlayObjectExtensionGroup.value, __GroundOverlayObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LatLonBox uses Python identifier LatLonBox
    __LatLonBox = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LatLonBox'), 'LatLonBox', '__httpwww_opengis_netkml2_2_GroundOverlayType_httpwww_opengis_netkml2_2LatLonBox', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1163, 2), )

    
    LatLonBox = property(__LatLonBox.value, __LatLonBox.set, None, None)

    
    # Element author ({http://www.w3.org/2005/Atom}author) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element link ({http://www.w3.org/2005/Atom}link) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AddressDetails ({urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressDetails) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __altitude.name() : __altitude,
        __altitudeModeGroup.name() : __altitudeModeGroup,
        __GroundOverlaySimpleExtensionGroup.name() : __GroundOverlaySimpleExtensionGroup,
        __GroundOverlayObjectExtensionGroup.name() : __GroundOverlayObjectExtensionGroup,
        __LatLonBox.name() : __LatLonBox
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GroundOverlayType = GroundOverlayType
Namespace.addCategoryObject('typeBinding', 'GroundOverlayType', GroundOverlayType)


# Complex type {http://www.opengis.net/kml/2.2}ScreenOverlayType with content type ELEMENT_ONLY
class ScreenOverlayType (AbstractOverlayType):
    """Complex type {http://www.opengis.net/kml/2.2}ScreenOverlayType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScreenOverlayType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1185, 2)
    _ElementMap = AbstractOverlayType._ElementMap.copy()
    _AttributeMap = AbstractOverlayType._AttributeMap.copy()
    # Base type is AbstractOverlayType
    
    # Element address ({http://www.opengis.net/kml/2.2}address) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element color ({http://www.opengis.net/kml/2.2}color) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element description ({http://www.opengis.net/kml/2.2}description) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element drawOrder ({http://www.opengis.net/kml/2.2}drawOrder) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element name ({http://www.opengis.net/kml/2.2}name) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element open ({http://www.opengis.net/kml/2.2}open) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}overlayXY uses Python identifier overlayXY
    __overlayXY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'overlayXY'), 'overlayXY', '__httpwww_opengis_netkml2_2_ScreenOverlayType_httpwww_opengis_netkml2_2overlayXY', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 244, 2), )

    
    overlayXY = property(__overlayXY.value, __overlayXY.set, None, None)

    
    # Element phoneNumber ({http://www.opengis.net/kml/2.2}phoneNumber) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}rotation uses Python identifier rotation
    __rotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'rotation'), 'rotation', '__httpwww_opengis_netkml2_2_ScreenOverlayType_httpwww_opengis_netkml2_2rotation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 253, 2), )

    
    rotation = property(__rotation.value, __rotation.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}rotationXY uses Python identifier rotationXY
    __rotationXY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'rotationXY'), 'rotationXY', '__httpwww_opengis_netkml2_2_ScreenOverlayType_httpwww_opengis_netkml2_2rotationXY', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 254, 2), )

    
    rotationXY = property(__rotationXY.value, __rotationXY.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}screenXY uses Python identifier screenXY
    __screenXY = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'screenXY'), 'screenXY', '__httpwww_opengis_netkml2_2_ScreenOverlayType_httpwww_opengis_netkml2_2screenXY', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 256, 2), )

    
    screenXY = property(__screenXY.value, __screenXY.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}size uses Python identifier size
    __size = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'size'), 'size', '__httpwww_opengis_netkml2_2_ScreenOverlayType_httpwww_opengis_netkml2_2size', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 258, 2), )

    
    size = property(__size.value, __size.set, None, None)

    
    # Element snippet ({http://www.opengis.net/kml/2.2}snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element styleUrl ({http://www.opengis.net/kml/2.2}styleUrl) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element visibility ({http://www.opengis.net/kml/2.2}visibility) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractFeatureObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractFeatureSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Snippet ({http://www.opengis.net/kml/2.2}Snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractViewGroup ({http://www.opengis.net/kml/2.2}AbstractViewGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Metadata ({http://www.opengis.net/kml/2.2}Metadata) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ExtendedData ({http://www.opengis.net/kml/2.2}ExtendedData) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractOverlaySimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractOverlaySimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element AbstractOverlayObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractOverlayObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element AbstractStyleSelectorGroup ({http://www.opengis.net/kml/2.2}AbstractStyleSelectorGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractTimePrimitiveGroup ({http://www.opengis.net/kml/2.2}AbstractTimePrimitiveGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Region ({http://www.opengis.net/kml/2.2}Region) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Icon ({http://www.opengis.net/kml/2.2}Icon) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element {http://www.opengis.net/kml/2.2}ScreenOverlaySimpleExtensionGroup uses Python identifier ScreenOverlaySimpleExtensionGroup
    __ScreenOverlaySimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScreenOverlaySimpleExtensionGroup'), 'ScreenOverlaySimpleExtensionGroup', '__httpwww_opengis_netkml2_2_ScreenOverlayType_httpwww_opengis_netkml2_2ScreenOverlaySimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1202, 2), )

    
    ScreenOverlaySimpleExtensionGroup = property(__ScreenOverlaySimpleExtensionGroup.value, __ScreenOverlaySimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ScreenOverlayObjectExtensionGroup uses Python identifier ScreenOverlayObjectExtensionGroup
    __ScreenOverlayObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScreenOverlayObjectExtensionGroup'), 'ScreenOverlayObjectExtensionGroup', '__httpwww_opengis_netkml2_2_ScreenOverlayType_httpwww_opengis_netkml2_2ScreenOverlayObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1204, 2), )

    
    ScreenOverlayObjectExtensionGroup = property(__ScreenOverlayObjectExtensionGroup.value, __ScreenOverlayObjectExtensionGroup.set, None, None)

    
    # Element author ({http://www.w3.org/2005/Atom}author) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element link ({http://www.w3.org/2005/Atom}link) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AddressDetails ({urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressDetails) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __overlayXY.name() : __overlayXY,
        __rotation.name() : __rotation,
        __rotationXY.name() : __rotationXY,
        __screenXY.name() : __screenXY,
        __size.name() : __size,
        __ScreenOverlaySimpleExtensionGroup.name() : __ScreenOverlaySimpleExtensionGroup,
        __ScreenOverlayObjectExtensionGroup.name() : __ScreenOverlayObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ScreenOverlayType = ScreenOverlayType
Namespace.addCategoryObject('typeBinding', 'ScreenOverlayType', ScreenOverlayType)


# Complex type {http://www.opengis.net/kml/2.2}PhotoOverlayType with content type ELEMENT_ONLY
class PhotoOverlayType (AbstractOverlayType):
    """Complex type {http://www.opengis.net/kml/2.2}PhotoOverlayType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PhotoOverlayType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1209, 2)
    _ElementMap = AbstractOverlayType._ElementMap.copy()
    _AttributeMap = AbstractOverlayType._AttributeMap.copy()
    # Base type is AbstractOverlayType
    
    # Element address ({http://www.opengis.net/kml/2.2}address) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element color ({http://www.opengis.net/kml/2.2}color) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element description ({http://www.opengis.net/kml/2.2}description) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element drawOrder ({http://www.opengis.net/kml/2.2}drawOrder) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element name ({http://www.opengis.net/kml/2.2}name) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element open ({http://www.opengis.net/kml/2.2}open) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element phoneNumber ({http://www.opengis.net/kml/2.2}phoneNumber) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/kml/2.2}rotation uses Python identifier rotation
    __rotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'rotation'), 'rotation', '__httpwww_opengis_netkml2_2_PhotoOverlayType_httpwww_opengis_netkml2_2rotation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 253, 2), )

    
    rotation = property(__rotation.value, __rotation.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}shape uses Python identifier shape
    __shape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'shape'), 'shape', '__httpwww_opengis_netkml2_2_PhotoOverlayType_httpwww_opengis_netkml2_2shape', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 257, 2), )

    
    shape = property(__shape.value, __shape.set, None, None)

    
    # Element snippet ({http://www.opengis.net/kml/2.2}snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element styleUrl ({http://www.opengis.net/kml/2.2}styleUrl) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element visibility ({http://www.opengis.net/kml/2.2}visibility) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractFeatureObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractFeatureSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractFeatureSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Snippet ({http://www.opengis.net/kml/2.2}Snippet) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractViewGroup ({http://www.opengis.net/kml/2.2}AbstractViewGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Metadata ({http://www.opengis.net/kml/2.2}Metadata) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element ExtendedData ({http://www.opengis.net/kml/2.2}ExtendedData) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractOverlaySimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractOverlaySimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element AbstractOverlayObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractOverlayObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element AbstractStyleSelectorGroup ({http://www.opengis.net/kml/2.2}AbstractStyleSelectorGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AbstractTimePrimitiveGroup ({http://www.opengis.net/kml/2.2}AbstractTimePrimitiveGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Region ({http://www.opengis.net/kml/2.2}Region) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element Icon ({http://www.opengis.net/kml/2.2}Icon) inherited from {http://www.opengis.net/kml/2.2}AbstractOverlayType
    
    # Element {http://www.opengis.net/kml/2.2}Point uses Python identifier Point
    __Point = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Point'), 'Point', '__httpwww_opengis_netkml2_2_PhotoOverlayType_httpwww_opengis_netkml2_2Point', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 879, 2), )

    
    Point = property(__Point.value, __Point.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}PhotoOverlaySimpleExtensionGroup uses Python identifier PhotoOverlaySimpleExtensionGroup
    __PhotoOverlaySimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PhotoOverlaySimpleExtensionGroup'), 'PhotoOverlaySimpleExtensionGroup', '__httpwww_opengis_netkml2_2_PhotoOverlayType_httpwww_opengis_netkml2_2PhotoOverlaySimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1226, 2), )

    
    PhotoOverlaySimpleExtensionGroup = property(__PhotoOverlaySimpleExtensionGroup.value, __PhotoOverlaySimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}PhotoOverlayObjectExtensionGroup uses Python identifier PhotoOverlayObjectExtensionGroup
    __PhotoOverlayObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PhotoOverlayObjectExtensionGroup'), 'PhotoOverlayObjectExtensionGroup', '__httpwww_opengis_netkml2_2_PhotoOverlayType_httpwww_opengis_netkml2_2PhotoOverlayObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1228, 2), )

    
    PhotoOverlayObjectExtensionGroup = property(__PhotoOverlayObjectExtensionGroup.value, __PhotoOverlayObjectExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ViewVolume uses Python identifier ViewVolume
    __ViewVolume = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ViewVolume'), 'ViewVolume', '__httpwww_opengis_netkml2_2_PhotoOverlayType_httpwww_opengis_netkml2_2ViewVolume', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1231, 2), )

    
    ViewVolume = property(__ViewVolume.value, __ViewVolume.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}ImagePyramid uses Python identifier ImagePyramid
    __ImagePyramid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ImagePyramid'), 'ImagePyramid', '__httpwww_opengis_netkml2_2_PhotoOverlayType_httpwww_opengis_netkml2_2ImagePyramid', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1255, 2), )

    
    ImagePyramid = property(__ImagePyramid.value, __ImagePyramid.set, None, None)

    
    # Element author ({http://www.w3.org/2005/Atom}author) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element link ({http://www.w3.org/2005/Atom}link) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Element AddressDetails ({urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressDetails) inherited from {http://www.opengis.net/kml/2.2}AbstractFeatureType
    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __rotation.name() : __rotation,
        __shape.name() : __shape,
        __Point.name() : __Point,
        __PhotoOverlaySimpleExtensionGroup.name() : __PhotoOverlaySimpleExtensionGroup,
        __PhotoOverlayObjectExtensionGroup.name() : __PhotoOverlayObjectExtensionGroup,
        __ViewVolume.name() : __ViewVolume,
        __ImagePyramid.name() : __ImagePyramid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PhotoOverlayType = PhotoOverlayType
Namespace.addCategoryObject('typeBinding', 'PhotoOverlayType', PhotoOverlayType)


# Complex type {http://www.opengis.net/kml/2.2}IconStyleType with content type ELEMENT_ONLY
class IconStyleType (AbstractColorStyleType):
    """Complex type {http://www.opengis.net/kml/2.2}IconStyleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IconStyleType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1387, 2)
    _ElementMap = AbstractColorStyleType._ElementMap.copy()
    _AttributeMap = AbstractColorStyleType._AttributeMap.copy()
    # Base type is AbstractColorStyleType
    
    # Element color ({http://www.opengis.net/kml/2.2}color) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element colorMode ({http://www.opengis.net/kml/2.2}colorMode) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element {http://www.opengis.net/kml/2.2}heading uses Python identifier heading
    __heading = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heading'), 'heading', '__httpwww_opengis_netkml2_2_IconStyleType_httpwww_opengis_netkml2_2heading', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 210, 2), )

    
    heading = property(__heading.value, __heading.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}hotSpot uses Python identifier hotSpot
    __hotSpot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hotSpot'), 'hotSpot', '__httpwww_opengis_netkml2_2_IconStyleType_httpwww_opengis_netkml2_2hotSpot', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 218, 2), )

    
    hotSpot = property(__hotSpot.value, __hotSpot.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}scale uses Python identifier scale
    __scale = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'scale'), 'scale', '__httpwww_opengis_netkml2_2_IconStyleType_httpwww_opengis_netkml2_2scale', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 255, 2), )

    
    scale = property(__scale.value, __scale.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractSubStyleSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element AbstractSubStyleObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element AbstractColorStyleObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractColorStyleObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element AbstractColorStyleSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractColorStyleSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element {http://www.opengis.net/kml/2.2}Icon uses Python identifier Icon
    __Icon = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Icon'), 'Icon', '__httpwww_opengis_netkml2_2_IconStyleType_httpwww_opengis_netkml2_2Icon', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1393, 10), )

    
    Icon = property(__Icon.value, __Icon.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}IconStyleSimpleExtensionGroup uses Python identifier IconStyleSimpleExtensionGroup
    __IconStyleSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IconStyleSimpleExtensionGroup'), 'IconStyleSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_IconStyleType_httpwww_opengis_netkml2_2IconStyleSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1403, 2), )

    
    IconStyleSimpleExtensionGroup = property(__IconStyleSimpleExtensionGroup.value, __IconStyleSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}IconStyleObjectExtensionGroup uses Python identifier IconStyleObjectExtensionGroup
    __IconStyleObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IconStyleObjectExtensionGroup'), 'IconStyleObjectExtensionGroup', '__httpwww_opengis_netkml2_2_IconStyleType_httpwww_opengis_netkml2_2IconStyleObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1405, 2), )

    
    IconStyleObjectExtensionGroup = property(__IconStyleObjectExtensionGroup.value, __IconStyleObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __heading.name() : __heading,
        __hotSpot.name() : __hotSpot,
        __scale.name() : __scale,
        __Icon.name() : __Icon,
        __IconStyleSimpleExtensionGroup.name() : __IconStyleSimpleExtensionGroup,
        __IconStyleObjectExtensionGroup.name() : __IconStyleObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.IconStyleType = IconStyleType
Namespace.addCategoryObject('typeBinding', 'IconStyleType', IconStyleType)


# Complex type {http://www.opengis.net/kml/2.2}LabelStyleType with content type ELEMENT_ONLY
class LabelStyleType (AbstractColorStyleType):
    """Complex type {http://www.opengis.net/kml/2.2}LabelStyleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LabelStyleType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1428, 2)
    _ElementMap = AbstractColorStyleType._ElementMap.copy()
    _AttributeMap = AbstractColorStyleType._AttributeMap.copy()
    # Base type is AbstractColorStyleType
    
    # Element color ({http://www.opengis.net/kml/2.2}color) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element colorMode ({http://www.opengis.net/kml/2.2}colorMode) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element {http://www.opengis.net/kml/2.2}scale uses Python identifier scale
    __scale = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'scale'), 'scale', '__httpwww_opengis_netkml2_2_LabelStyleType_httpwww_opengis_netkml2_2scale', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 255, 2), )

    
    scale = property(__scale.value, __scale.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractSubStyleSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element AbstractSubStyleObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element AbstractColorStyleObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractColorStyleObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element AbstractColorStyleSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractColorStyleSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element {http://www.opengis.net/kml/2.2}LabelStyleSimpleExtensionGroup uses Python identifier LabelStyleSimpleExtensionGroup
    __LabelStyleSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LabelStyleSimpleExtensionGroup'), 'LabelStyleSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_LabelStyleType_httpwww_opengis_netkml2_2LabelStyleSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1441, 2), )

    
    LabelStyleSimpleExtensionGroup = property(__LabelStyleSimpleExtensionGroup.value, __LabelStyleSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LabelStyleObjectExtensionGroup uses Python identifier LabelStyleObjectExtensionGroup
    __LabelStyleObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LabelStyleObjectExtensionGroup'), 'LabelStyleObjectExtensionGroup', '__httpwww_opengis_netkml2_2_LabelStyleType_httpwww_opengis_netkml2_2LabelStyleObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1443, 2), )

    
    LabelStyleObjectExtensionGroup = property(__LabelStyleObjectExtensionGroup.value, __LabelStyleObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __scale.name() : __scale,
        __LabelStyleSimpleExtensionGroup.name() : __LabelStyleSimpleExtensionGroup,
        __LabelStyleObjectExtensionGroup.name() : __LabelStyleObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LabelStyleType = LabelStyleType
Namespace.addCategoryObject('typeBinding', 'LabelStyleType', LabelStyleType)


# Complex type {http://www.opengis.net/kml/2.2}LineStyleType with content type ELEMENT_ONLY
class LineStyleType (AbstractColorStyleType):
    """Complex type {http://www.opengis.net/kml/2.2}LineStyleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LineStyleType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1448, 2)
    _ElementMap = AbstractColorStyleType._ElementMap.copy()
    _AttributeMap = AbstractColorStyleType._AttributeMap.copy()
    # Base type is AbstractColorStyleType
    
    # Element color ({http://www.opengis.net/kml/2.2}color) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element colorMode ({http://www.opengis.net/kml/2.2}colorMode) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element {http://www.opengis.net/kml/2.2}width uses Python identifier width
    __width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'width'), 'width', '__httpwww_opengis_netkml2_2_LineStyleType_httpwww_opengis_netkml2_2width', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 280, 2), )

    
    width = property(__width.value, __width.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractSubStyleSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element AbstractSubStyleObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element AbstractColorStyleObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractColorStyleObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element AbstractColorStyleSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractColorStyleSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element {http://www.opengis.net/kml/2.2}LineStyleSimpleExtensionGroup uses Python identifier LineStyleSimpleExtensionGroup
    __LineStyleSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LineStyleSimpleExtensionGroup'), 'LineStyleSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_LineStyleType_httpwww_opengis_netkml2_2LineStyleSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1461, 2), )

    
    LineStyleSimpleExtensionGroup = property(__LineStyleSimpleExtensionGroup.value, __LineStyleSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}LineStyleObjectExtensionGroup uses Python identifier LineStyleObjectExtensionGroup
    __LineStyleObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LineStyleObjectExtensionGroup'), 'LineStyleObjectExtensionGroup', '__httpwww_opengis_netkml2_2_LineStyleType_httpwww_opengis_netkml2_2LineStyleObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1463, 2), )

    
    LineStyleObjectExtensionGroup = property(__LineStyleObjectExtensionGroup.value, __LineStyleObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __width.name() : __width,
        __LineStyleSimpleExtensionGroup.name() : __LineStyleSimpleExtensionGroup,
        __LineStyleObjectExtensionGroup.name() : __LineStyleObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LineStyleType = LineStyleType
Namespace.addCategoryObject('typeBinding', 'LineStyleType', LineStyleType)


# Complex type {http://www.opengis.net/kml/2.2}PolyStyleType with content type ELEMENT_ONLY
class PolyStyleType (AbstractColorStyleType):
    """Complex type {http://www.opengis.net/kml/2.2}PolyStyleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolyStyleType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1468, 2)
    _ElementMap = AbstractColorStyleType._ElementMap.copy()
    _AttributeMap = AbstractColorStyleType._AttributeMap.copy()
    # Base type is AbstractColorStyleType
    
    # Element color ({http://www.opengis.net/kml/2.2}color) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element colorMode ({http://www.opengis.net/kml/2.2}colorMode) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element {http://www.opengis.net/kml/2.2}fill uses Python identifier fill
    __fill = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fill'), 'fill', '__httpwww_opengis_netkml2_2_PolyStyleType_httpwww_opengis_netkml2_2fill', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 207, 2), )

    
    fill = property(__fill.value, __fill.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}outline uses Python identifier outline
    __outline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'outline'), 'outline', '__httpwww_opengis_netkml2_2_PolyStyleType_httpwww_opengis_netkml2_2outline', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 243, 2), )

    
    outline = property(__outline.value, __outline.set, None, None)

    
    # Element ObjectSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}ObjectSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Element AbstractSubStyleSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element AbstractSubStyleObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractSubStyleObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractSubStyleType
    
    # Element AbstractColorStyleObjectExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractColorStyleObjectExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element AbstractColorStyleSimpleExtensionGroup ({http://www.opengis.net/kml/2.2}AbstractColorStyleSimpleExtensionGroup) inherited from {http://www.opengis.net/kml/2.2}AbstractColorStyleType
    
    # Element {http://www.opengis.net/kml/2.2}PolyStyleSimpleExtensionGroup uses Python identifier PolyStyleSimpleExtensionGroup
    __PolyStyleSimpleExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolyStyleSimpleExtensionGroup'), 'PolyStyleSimpleExtensionGroup', '__httpwww_opengis_netkml2_2_PolyStyleType_httpwww_opengis_netkml2_2PolyStyleSimpleExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1482, 2), )

    
    PolyStyleSimpleExtensionGroup = property(__PolyStyleSimpleExtensionGroup.value, __PolyStyleSimpleExtensionGroup.set, None, None)

    
    # Element {http://www.opengis.net/kml/2.2}PolyStyleObjectExtensionGroup uses Python identifier PolyStyleObjectExtensionGroup
    __PolyStyleObjectExtensionGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolyStyleObjectExtensionGroup'), 'PolyStyleObjectExtensionGroup', '__httpwww_opengis_netkml2_2_PolyStyleType_httpwww_opengis_netkml2_2PolyStyleObjectExtensionGroup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1484, 2), )

    
    PolyStyleObjectExtensionGroup = property(__PolyStyleObjectExtensionGroup.value, __PolyStyleObjectExtensionGroup.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    
    # Attribute targetId inherited from {http://www.opengis.net/kml/2.2}AbstractObjectType
    _ElementMap.update({
        __fill.name() : __fill,
        __outline.name() : __outline,
        __PolyStyleSimpleExtensionGroup.name() : __PolyStyleSimpleExtensionGroup,
        __PolyStyleObjectExtensionGroup.name() : __PolyStyleObjectExtensionGroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolyStyleType = PolyStyleType
Namespace.addCategoryObject('typeBinding', 'PolyStyleType', PolyStyleType)


address = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'address'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 187, 2))
Namespace.addCategoryObject('elementBinding', address.name().localName(), address)

altitude = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitude'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 188, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', altitude.name().localName(), altitude)

altitudeModeGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2))
Namespace.addCategoryObject('elementBinding', altitudeModeGroup.name().localName(), altitudeModeGroup)

cookie = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cookie'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 197, 2))
Namespace.addCategoryObject('elementBinding', cookie.name().localName(), cookie)

description = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 199, 2))
Namespace.addCategoryObject('elementBinding', description.name().localName(), description)

displayName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 200, 2))
Namespace.addCategoryObject('elementBinding', displayName.name().localName(), displayName)

drawOrder = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'drawOrder'), pyxb.binding.datatypes.int, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 202, 2), unicode_default='0')
Namespace.addCategoryObject('elementBinding', drawOrder.name().localName(), drawOrder)

extrude = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extrude'), pyxb.binding.datatypes.boolean, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 206, 2), unicode_default='0')
Namespace.addCategoryObject('elementBinding', extrude.name().localName(), extrude)

fill = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fill'), pyxb.binding.datatypes.boolean, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 207, 2), unicode_default='1')
Namespace.addCategoryObject('elementBinding', fill.name().localName(), fill)

flyToView = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'flyToView'), pyxb.binding.datatypes.boolean, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 208, 2), unicode_default='0')
Namespace.addCategoryObject('elementBinding', flyToView.name().localName(), flyToView)

href = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'href'), pyxb.binding.datatypes.string, documentation='not anyURI due to $[x] substitution in\n      PhotoOverlay', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 211, 2))
Namespace.addCategoryObject('elementBinding', href.name().localName(), href)

httpQuery = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'httpQuery'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 217, 2))
Namespace.addCategoryObject('elementBinding', httpQuery.name().localName(), httpQuery)

linkDescription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'linkDescription'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 222, 2))
Namespace.addCategoryObject('elementBinding', linkDescription.name().localName(), linkDescription)

linkName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'linkName'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 223, 2))
Namespace.addCategoryObject('elementBinding', linkName.name().localName(), linkName)

maxSnippetLines = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxSnippetLines'), pyxb.binding.datatypes.int, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 227, 2), unicode_default='2')
Namespace.addCategoryObject('elementBinding', maxSnippetLines.name().localName(), maxSnippetLines)

maxSessionLength = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxSessionLength'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 228, 2), unicode_default='-1.0')
Namespace.addCategoryObject('elementBinding', maxSessionLength.name().localName(), maxSessionLength)

message = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 229, 2))
Namespace.addCategoryObject('elementBinding', message.name().localName(), message)

minAltitude = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'minAltitude'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 230, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', minAltitude.name().localName(), minAltitude)

minFadeExtent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'minFadeExtent'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 231, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', minFadeExtent.name().localName(), minFadeExtent)

minLodPixels = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'minLodPixels'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 232, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', minLodPixels.name().localName(), minLodPixels)

minRefreshPeriod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'minRefreshPeriod'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 233, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', minRefreshPeriod.name().localName(), minRefreshPeriod)

maxAltitude = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxAltitude'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 234, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', maxAltitude.name().localName(), maxAltitude)

maxFadeExtent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxFadeExtent'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 235, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', maxFadeExtent.name().localName(), maxFadeExtent)

maxLodPixels = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxLodPixels'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 236, 2), unicode_default='-1.0')
Namespace.addCategoryObject('elementBinding', maxLodPixels.name().localName(), maxLodPixels)

maxHeight = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxHeight'), pyxb.binding.datatypes.int, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 237, 2), unicode_default='0')
Namespace.addCategoryObject('elementBinding', maxHeight.name().localName(), maxHeight)

maxWidth = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxWidth'), pyxb.binding.datatypes.int, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 238, 2), unicode_default='0')
Namespace.addCategoryObject('elementBinding', maxWidth.name().localName(), maxWidth)

name = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 239, 2))
Namespace.addCategoryObject('elementBinding', name.name().localName(), name)

near = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'near'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 240, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', near.name().localName(), near)

open = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'open'), pyxb.binding.datatypes.boolean, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 242, 2), unicode_default='0')
Namespace.addCategoryObject('elementBinding', open.name().localName(), open)

outline = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'outline'), pyxb.binding.datatypes.boolean, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 243, 2), unicode_default='1')
Namespace.addCategoryObject('elementBinding', outline.name().localName(), outline)

phoneNumber = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 245, 2))
Namespace.addCategoryObject('elementBinding', phoneNumber.name().localName(), phoneNumber)

range = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'range'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 246, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', range.name().localName(), range)

refreshInterval = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refreshInterval'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 249, 2), unicode_default='4.0')
Namespace.addCategoryObject('elementBinding', refreshInterval.name().localName(), refreshInterval)

refreshVisibility = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refreshVisibility'), pyxb.binding.datatypes.boolean, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 250, 2), unicode_default='0')
Namespace.addCategoryObject('elementBinding', refreshVisibility.name().localName(), refreshVisibility)

scale = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'scale'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 255, 2), unicode_default='1.0')
Namespace.addCategoryObject('elementBinding', scale.name().localName(), scale)

sourceHref = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sourceHref'), pyxb.binding.datatypes.anyURI, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 260, 2))
Namespace.addCategoryObject('elementBinding', sourceHref.name().localName(), sourceHref)

snippet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'snippet'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 261, 2))
Namespace.addCategoryObject('elementBinding', snippet.name().localName(), snippet)

styleUrl = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'styleUrl'), pyxb.binding.datatypes.anyURI, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 263, 2))
Namespace.addCategoryObject('elementBinding', styleUrl.name().localName(), styleUrl)

targetHref = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'targetHref'), pyxb.binding.datatypes.anyURI, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 264, 2))
Namespace.addCategoryObject('elementBinding', targetHref.name().localName(), targetHref)

tessellate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tessellate'), pyxb.binding.datatypes.boolean, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 265, 2), unicode_default='0')
Namespace.addCategoryObject('elementBinding', tessellate.name().localName(), tessellate)

text = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'text'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 266, 2))
Namespace.addCategoryObject('elementBinding', text.name().localName(), text)

tileSize = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tileSize'), pyxb.binding.datatypes.int, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 268, 2), unicode_default='256')
Namespace.addCategoryObject('elementBinding', tileSize.name().localName(), tileSize)

value = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 271, 2))
Namespace.addCategoryObject('elementBinding', value.name().localName(), value)

viewBoundScale = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viewBoundScale'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 272, 2), unicode_default='1.0')
Namespace.addCategoryObject('elementBinding', viewBoundScale.name().localName(), viewBoundScale)

viewFormat = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viewFormat'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 273, 2))
Namespace.addCategoryObject('elementBinding', viewFormat.name().localName(), viewFormat)

viewRefreshTime = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viewRefreshTime'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 276, 2), unicode_default='4.0')
Namespace.addCategoryObject('elementBinding', viewRefreshTime.name().localName(), viewRefreshTime)

visibility = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'visibility'), pyxb.binding.datatypes.boolean, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 277, 2), unicode_default='1')
Namespace.addCategoryObject('elementBinding', visibility.name().localName(), visibility)

width = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'width'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 280, 2), unicode_default='1.0')
Namespace.addCategoryObject('elementBinding', width.name().localName(), width)

x = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'x'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 281, 2), unicode_default='1.0')
Namespace.addCategoryObject('elementBinding', x.name().localName(), x)

y = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'y'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 282, 2), unicode_default='1.0')
Namespace.addCategoryObject('elementBinding', y.name().localName(), y)

z = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'z'), pyxb.binding.datatypes.double, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 283, 2), unicode_default='1.0')
Namespace.addCategoryObject('elementBinding', z.name().localName(), z)

ObjectSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 294, 2))
Namespace.addCategoryObject('elementBinding', ObjectSimpleExtensionGroup.name().localName(), ObjectSimpleExtensionGroup)

AbstractFeatureObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 345, 2))
Namespace.addCategoryObject('elementBinding', AbstractFeatureObjectExtensionGroup.name().localName(), AbstractFeatureObjectExtensionGroup)

AbstractFeatureSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 347, 2))
Namespace.addCategoryObject('elementBinding', AbstractFeatureSimpleExtensionGroup.name().localName(), AbstractFeatureSimpleExtensionGroup)

AbstractViewSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 373, 2))
Namespace.addCategoryObject('elementBinding', AbstractViewSimpleExtensionGroup.name().localName(), AbstractViewSimpleExtensionGroup)

AbstractViewObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 375, 2))
Namespace.addCategoryObject('elementBinding', AbstractViewObjectExtensionGroup.name().localName(), AbstractViewObjectExtensionGroup)

LookAtSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LookAtSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 399, 2))
Namespace.addCategoryObject('elementBinding', LookAtSimpleExtensionGroup.name().localName(), LookAtSimpleExtensionGroup)

LookAtObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LookAtObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 401, 2))
Namespace.addCategoryObject('elementBinding', LookAtObjectExtensionGroup.name().localName(), LookAtObjectExtensionGroup)

CameraSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CameraSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 425, 2))
Namespace.addCategoryObject('elementBinding', CameraSimpleExtensionGroup.name().localName(), CameraSimpleExtensionGroup)

CameraObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CameraObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 427, 2))
Namespace.addCategoryObject('elementBinding', CameraObjectExtensionGroup.name().localName(), CameraObjectExtensionGroup)

SchemaDataExtension = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SchemaDataExtension'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 470, 2))
Namespace.addCategoryObject('elementBinding', SchemaDataExtension.name().localName(), SchemaDataExtension)

DataExtension = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataExtension'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 495, 2))
Namespace.addCategoryObject('elementBinding', DataExtension.name().localName(), DataExtension)

AbstractContainerSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 511, 2))
Namespace.addCategoryObject('elementBinding', AbstractContainerSimpleExtensionGroup.name().localName(), AbstractContainerSimpleExtensionGroup)

AbstractContainerObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 513, 2))
Namespace.addCategoryObject('elementBinding', AbstractContainerObjectExtensionGroup.name().localName(), AbstractContainerObjectExtensionGroup)

AbstractGeometrySimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometrySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 530, 2))
Namespace.addCategoryObject('elementBinding', AbstractGeometrySimpleExtensionGroup.name().localName(), AbstractGeometrySimpleExtensionGroup)

AbstractGeometryObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 532, 2))
Namespace.addCategoryObject('elementBinding', AbstractGeometryObjectExtensionGroup.name().localName(), AbstractGeometryObjectExtensionGroup)

AbstractOverlaySimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlaySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 552, 2))
Namespace.addCategoryObject('elementBinding', AbstractOverlaySimpleExtensionGroup.name().localName(), AbstractOverlaySimpleExtensionGroup)

AbstractOverlayObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlayObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 554, 2))
Namespace.addCategoryObject('elementBinding', AbstractOverlayObjectExtensionGroup.name().localName(), AbstractOverlayObjectExtensionGroup)

AbstractStyleSelectorSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 572, 2))
Namespace.addCategoryObject('elementBinding', AbstractStyleSelectorSimpleExtensionGroup.name().localName(), AbstractStyleSelectorSimpleExtensionGroup)

AbstractStyleSelectorObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 574, 2))
Namespace.addCategoryObject('elementBinding', AbstractStyleSelectorObjectExtensionGroup.name().localName(), AbstractStyleSelectorObjectExtensionGroup)

AbstractTimePrimitiveSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 592, 2))
Namespace.addCategoryObject('elementBinding', AbstractTimePrimitiveSimpleExtensionGroup.name().localName(), AbstractTimePrimitiveSimpleExtensionGroup)

AbstractTimePrimitiveObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 594, 2))
Namespace.addCategoryObject('elementBinding', AbstractTimePrimitiveObjectExtensionGroup.name().localName(), AbstractTimePrimitiveObjectExtensionGroup)

KmlSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KmlSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 617, 2))
Namespace.addCategoryObject('elementBinding', KmlSimpleExtensionGroup.name().localName(), KmlSimpleExtensionGroup)

KmlObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KmlObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 618, 2))
Namespace.addCategoryObject('elementBinding', KmlObjectExtensionGroup.name().localName(), KmlObjectExtensionGroup)

NetworkLinkControlSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkControlSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 640, 2))
Namespace.addCategoryObject('elementBinding', NetworkLinkControlSimpleExtensionGroup.name().localName(), NetworkLinkControlSimpleExtensionGroup)

NetworkLinkControlObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkControlObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 642, 2))
Namespace.addCategoryObject('elementBinding', NetworkLinkControlObjectExtensionGroup.name().localName(), NetworkLinkControlObjectExtensionGroup)

DocumentSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DocumentSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 662, 2))
Namespace.addCategoryObject('elementBinding', DocumentSimpleExtensionGroup.name().localName(), DocumentSimpleExtensionGroup)

DocumentObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DocumentObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 664, 2))
Namespace.addCategoryObject('elementBinding', DocumentObjectExtensionGroup.name().localName(), DocumentObjectExtensionGroup)

SchemaExtension = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SchemaExtension'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 676, 2))
Namespace.addCategoryObject('elementBinding', SchemaExtension.name().localName(), SchemaExtension)

SimpleFieldExtension = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SimpleFieldExtension'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 688, 2))
Namespace.addCategoryObject('elementBinding', SimpleFieldExtension.name().localName(), SimpleFieldExtension)

FolderSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FolderSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 706, 2))
Namespace.addCategoryObject('elementBinding', FolderSimpleExtensionGroup.name().localName(), FolderSimpleExtensionGroup)

FolderObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FolderObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 708, 2))
Namespace.addCategoryObject('elementBinding', FolderObjectExtensionGroup.name().localName(), FolderObjectExtensionGroup)

PlacemarkSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlacemarkSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 726, 2))
Namespace.addCategoryObject('elementBinding', PlacemarkSimpleExtensionGroup.name().localName(), PlacemarkSimpleExtensionGroup)

PlacemarkObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlacemarkObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 728, 2))
Namespace.addCategoryObject('elementBinding', PlacemarkObjectExtensionGroup.name().localName(), PlacemarkObjectExtensionGroup)

NetworkLinkSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 754, 2))
Namespace.addCategoryObject('elementBinding', NetworkLinkSimpleExtensionGroup.name().localName(), NetworkLinkSimpleExtensionGroup)

NetworkLinkObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 756, 2))
Namespace.addCategoryObject('elementBinding', NetworkLinkObjectExtensionGroup.name().localName(), NetworkLinkObjectExtensionGroup)

RegionSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegionSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 775, 2))
Namespace.addCategoryObject('elementBinding', RegionSimpleExtensionGroup.name().localName(), RegionSimpleExtensionGroup)

RegionObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegionObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 777, 2))
Namespace.addCategoryObject('elementBinding', RegionObjectExtensionGroup.name().localName(), RegionObjectExtensionGroup)

LatLonAltBoxSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LatLonAltBoxSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 797, 2))
Namespace.addCategoryObject('elementBinding', LatLonAltBoxSimpleExtensionGroup.name().localName(), LatLonAltBoxSimpleExtensionGroup)

LatLonAltBoxObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LatLonAltBoxObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 799, 2))
Namespace.addCategoryObject('elementBinding', LatLonAltBoxObjectExtensionGroup.name().localName(), LatLonAltBoxObjectExtensionGroup)

LodSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LodSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 820, 2))
Namespace.addCategoryObject('elementBinding', LodSimpleExtensionGroup.name().localName(), LodSimpleExtensionGroup)

LodObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LodObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 821, 2))
Namespace.addCategoryObject('elementBinding', LodObjectExtensionGroup.name().localName(), LodObjectExtensionGroup)

LinkSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinkSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 853, 2))
Namespace.addCategoryObject('elementBinding', LinkSimpleExtensionGroup.name().localName(), LinkSimpleExtensionGroup)

LinkObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinkObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 855, 2))
Namespace.addCategoryObject('elementBinding', LinkObjectExtensionGroup.name().localName(), LinkObjectExtensionGroup)

MultiGeometrySimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultiGeometrySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 874, 2))
Namespace.addCategoryObject('elementBinding', MultiGeometrySimpleExtensionGroup.name().localName(), MultiGeometrySimpleExtensionGroup)

MultiGeometryObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultiGeometryObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 876, 2))
Namespace.addCategoryObject('elementBinding', MultiGeometryObjectExtensionGroup.name().localName(), MultiGeometryObjectExtensionGroup)

PointSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PointSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 896, 2))
Namespace.addCategoryObject('elementBinding', PointSimpleExtensionGroup.name().localName(), PointSimpleExtensionGroup)

PointObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PointObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 898, 2))
Namespace.addCategoryObject('elementBinding', PointObjectExtensionGroup.name().localName(), PointObjectExtensionGroup)

LineStringSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LineStringSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 919, 2))
Namespace.addCategoryObject('elementBinding', LineStringSimpleExtensionGroup.name().localName(), LineStringSimpleExtensionGroup)

LineStringObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LineStringObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 921, 2))
Namespace.addCategoryObject('elementBinding', LineStringObjectExtensionGroup.name().localName(), LineStringObjectExtensionGroup)

LinearRingSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearRingSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 942, 2))
Namespace.addCategoryObject('elementBinding', LinearRingSimpleExtensionGroup.name().localName(), LinearRingSimpleExtensionGroup)

LinearRingObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearRingObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 944, 2))
Namespace.addCategoryObject('elementBinding', LinearRingObjectExtensionGroup.name().localName(), LinearRingObjectExtensionGroup)

PolygonSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolygonSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 967, 2))
Namespace.addCategoryObject('elementBinding', PolygonSimpleExtensionGroup.name().localName(), PolygonSimpleExtensionGroup)

PolygonObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolygonObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 969, 2))
Namespace.addCategoryObject('elementBinding', PolygonObjectExtensionGroup.name().localName(), PolygonObjectExtensionGroup)

BoundarySimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BoundarySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 983, 2))
Namespace.addCategoryObject('elementBinding', BoundarySimpleExtensionGroup.name().localName(), BoundarySimpleExtensionGroup)

BoundaryObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BoundaryObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 985, 2))
Namespace.addCategoryObject('elementBinding', BoundaryObjectExtensionGroup.name().localName(), BoundaryObjectExtensionGroup)

ModelSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModelSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1008, 2))
Namespace.addCategoryObject('elementBinding', ModelSimpleExtensionGroup.name().localName(), ModelSimpleExtensionGroup)

ModelObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModelObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1010, 2))
Namespace.addCategoryObject('elementBinding', ModelObjectExtensionGroup.name().localName(), ModelObjectExtensionGroup)

LocationSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocationSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1030, 2))
Namespace.addCategoryObject('elementBinding', LocationSimpleExtensionGroup.name().localName(), LocationSimpleExtensionGroup)

LocationObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocationObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1032, 2))
Namespace.addCategoryObject('elementBinding', LocationObjectExtensionGroup.name().localName(), LocationObjectExtensionGroup)

OrientationSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrientationSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1052, 2))
Namespace.addCategoryObject('elementBinding', OrientationSimpleExtensionGroup.name().localName(), OrientationSimpleExtensionGroup)

OrientationObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrientationObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1054, 2))
Namespace.addCategoryObject('elementBinding', OrientationObjectExtensionGroup.name().localName(), OrientationObjectExtensionGroup)

ScaleSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScaleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1074, 2))
Namespace.addCategoryObject('elementBinding', ScaleSimpleExtensionGroup.name().localName(), ScaleSimpleExtensionGroup)

ScaleObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScaleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1076, 2))
Namespace.addCategoryObject('elementBinding', ScaleObjectExtensionGroup.name().localName(), ScaleObjectExtensionGroup)

ResourceMapSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResourceMapSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1094, 2))
Namespace.addCategoryObject('elementBinding', ResourceMapSimpleExtensionGroup.name().localName(), ResourceMapSimpleExtensionGroup)

ResourceMapObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResourceMapObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1096, 2))
Namespace.addCategoryObject('elementBinding', ResourceMapObjectExtensionGroup.name().localName(), ResourceMapObjectExtensionGroup)

AliasSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AliasSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1115, 2))
Namespace.addCategoryObject('elementBinding', AliasSimpleExtensionGroup.name().localName(), AliasSimpleExtensionGroup)

AliasObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AliasObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1117, 2))
Namespace.addCategoryObject('elementBinding', AliasObjectExtensionGroup.name().localName(), AliasObjectExtensionGroup)

GroundOverlaySimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GroundOverlaySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1137, 2))
Namespace.addCategoryObject('elementBinding', GroundOverlaySimpleExtensionGroup.name().localName(), GroundOverlaySimpleExtensionGroup)

GroundOverlayObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GroundOverlayObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1139, 2))
Namespace.addCategoryObject('elementBinding', GroundOverlayObjectExtensionGroup.name().localName(), GroundOverlayObjectExtensionGroup)

AbstractLatLonBoxSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractLatLonBoxSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1158, 2))
Namespace.addCategoryObject('elementBinding', AbstractLatLonBoxSimpleExtensionGroup.name().localName(), AbstractLatLonBoxSimpleExtensionGroup)

AbstractLatLonBoxObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractLatLonBoxObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1160, 2))
Namespace.addCategoryObject('elementBinding', AbstractLatLonBoxObjectExtensionGroup.name().localName(), AbstractLatLonBoxObjectExtensionGroup)

LatLonBoxSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LatLonBoxSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1178, 2))
Namespace.addCategoryObject('elementBinding', LatLonBoxSimpleExtensionGroup.name().localName(), LatLonBoxSimpleExtensionGroup)

LatLonBoxObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LatLonBoxObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1180, 2))
Namespace.addCategoryObject('elementBinding', LatLonBoxObjectExtensionGroup.name().localName(), LatLonBoxObjectExtensionGroup)

ScreenOverlaySimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScreenOverlaySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1202, 2))
Namespace.addCategoryObject('elementBinding', ScreenOverlaySimpleExtensionGroup.name().localName(), ScreenOverlaySimpleExtensionGroup)

ScreenOverlayObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScreenOverlayObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1204, 2))
Namespace.addCategoryObject('elementBinding', ScreenOverlayObjectExtensionGroup.name().localName(), ScreenOverlayObjectExtensionGroup)

PhotoOverlaySimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhotoOverlaySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1226, 2))
Namespace.addCategoryObject('elementBinding', PhotoOverlaySimpleExtensionGroup.name().localName(), PhotoOverlaySimpleExtensionGroup)

PhotoOverlayObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhotoOverlayObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1228, 2))
Namespace.addCategoryObject('elementBinding', PhotoOverlayObjectExtensionGroup.name().localName(), PhotoOverlayObjectExtensionGroup)

ViewVolumeSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ViewVolumeSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1250, 2))
Namespace.addCategoryObject('elementBinding', ViewVolumeSimpleExtensionGroup.name().localName(), ViewVolumeSimpleExtensionGroup)

ViewVolumeObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ViewVolumeObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1252, 2))
Namespace.addCategoryObject('elementBinding', ViewVolumeObjectExtensionGroup.name().localName(), ViewVolumeObjectExtensionGroup)

ImagePyramidSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ImagePyramidSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1273, 2))
Namespace.addCategoryObject('elementBinding', ImagePyramidSimpleExtensionGroup.name().localName(), ImagePyramidSimpleExtensionGroup)

ImagePyramidObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ImagePyramidObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1275, 2))
Namespace.addCategoryObject('elementBinding', ImagePyramidObjectExtensionGroup.name().localName(), ImagePyramidObjectExtensionGroup)

StyleSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1298, 2))
Namespace.addCategoryObject('elementBinding', StyleSimpleExtensionGroup.name().localName(), StyleSimpleExtensionGroup)

StyleObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1300, 2))
Namespace.addCategoryObject('elementBinding', StyleObjectExtensionGroup.name().localName(), StyleObjectExtensionGroup)

StyleMapSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StyleMapSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1318, 2))
Namespace.addCategoryObject('elementBinding', StyleMapSimpleExtensionGroup.name().localName(), StyleMapSimpleExtensionGroup)

StyleMapObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StyleMapObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1320, 2))
Namespace.addCategoryObject('elementBinding', StyleMapObjectExtensionGroup.name().localName(), StyleMapObjectExtensionGroup)

PairSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PairSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1340, 2))
Namespace.addCategoryObject('elementBinding', PairSimpleExtensionGroup.name().localName(), PairSimpleExtensionGroup)

PairObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PairObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1342, 2))
Namespace.addCategoryObject('elementBinding', PairObjectExtensionGroup.name().localName(), PairObjectExtensionGroup)

AbstractSubStyleSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1359, 2))
Namespace.addCategoryObject('elementBinding', AbstractSubStyleSimpleExtensionGroup.name().localName(), AbstractSubStyleSimpleExtensionGroup)

AbstractSubStyleObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1361, 2))
Namespace.addCategoryObject('elementBinding', AbstractSubStyleObjectExtensionGroup.name().localName(), AbstractSubStyleObjectExtensionGroup)

AbstractColorStyleObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1380, 2))
Namespace.addCategoryObject('elementBinding', AbstractColorStyleObjectExtensionGroup.name().localName(), AbstractColorStyleObjectExtensionGroup)

AbstractColorStyleSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1382, 2))
Namespace.addCategoryObject('elementBinding', AbstractColorStyleSimpleExtensionGroup.name().localName(), AbstractColorStyleSimpleExtensionGroup)

IconStyleSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IconStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1403, 2))
Namespace.addCategoryObject('elementBinding', IconStyleSimpleExtensionGroup.name().localName(), IconStyleSimpleExtensionGroup)

IconStyleObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IconStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1405, 2))
Namespace.addCategoryObject('elementBinding', IconStyleObjectExtensionGroup.name().localName(), IconStyleObjectExtensionGroup)

BasicLinkSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BasicLinkSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1421, 2))
Namespace.addCategoryObject('elementBinding', BasicLinkSimpleExtensionGroup.name().localName(), BasicLinkSimpleExtensionGroup)

BasicLinkObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BasicLinkObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1423, 2))
Namespace.addCategoryObject('elementBinding', BasicLinkObjectExtensionGroup.name().localName(), BasicLinkObjectExtensionGroup)

LabelStyleSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LabelStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1441, 2))
Namespace.addCategoryObject('elementBinding', LabelStyleSimpleExtensionGroup.name().localName(), LabelStyleSimpleExtensionGroup)

LabelStyleObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LabelStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1443, 2))
Namespace.addCategoryObject('elementBinding', LabelStyleObjectExtensionGroup.name().localName(), LabelStyleObjectExtensionGroup)

LineStyleSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LineStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1461, 2))
Namespace.addCategoryObject('elementBinding', LineStyleSimpleExtensionGroup.name().localName(), LineStyleSimpleExtensionGroup)

LineStyleObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LineStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1463, 2))
Namespace.addCategoryObject('elementBinding', LineStyleObjectExtensionGroup.name().localName(), LineStyleObjectExtensionGroup)

PolyStyleSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolyStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1482, 2))
Namespace.addCategoryObject('elementBinding', PolyStyleSimpleExtensionGroup.name().localName(), PolyStyleSimpleExtensionGroup)

PolyStyleObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolyStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1484, 2))
Namespace.addCategoryObject('elementBinding', PolyStyleObjectExtensionGroup.name().localName(), PolyStyleObjectExtensionGroup)

BalloonStyleSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BalloonStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1511, 2))
Namespace.addCategoryObject('elementBinding', BalloonStyleSimpleExtensionGroup.name().localName(), BalloonStyleSimpleExtensionGroup)

BalloonStyleObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BalloonStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1513, 2))
Namespace.addCategoryObject('elementBinding', BalloonStyleObjectExtensionGroup.name().localName(), BalloonStyleObjectExtensionGroup)

ListStyleSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ListStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1534, 2))
Namespace.addCategoryObject('elementBinding', ListStyleSimpleExtensionGroup.name().localName(), ListStyleSimpleExtensionGroup)

ListStyleObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ListStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1536, 2))
Namespace.addCategoryObject('elementBinding', ListStyleObjectExtensionGroup.name().localName(), ListStyleObjectExtensionGroup)

ItemIconSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ItemIconSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1555, 2))
Namespace.addCategoryObject('elementBinding', ItemIconSimpleExtensionGroup.name().localName(), ItemIconSimpleExtensionGroup)

ItemIconObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ItemIconObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1557, 2))
Namespace.addCategoryObject('elementBinding', ItemIconObjectExtensionGroup.name().localName(), ItemIconObjectExtensionGroup)

TimeStampSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeStampSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1575, 2))
Namespace.addCategoryObject('elementBinding', TimeStampSimpleExtensionGroup.name().localName(), TimeStampSimpleExtensionGroup)

TimeStampObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeStampObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1577, 2))
Namespace.addCategoryObject('elementBinding', TimeStampObjectExtensionGroup.name().localName(), TimeStampObjectExtensionGroup)

TimeSpanSimpleExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeSpanSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1596, 2))
Namespace.addCategoryObject('elementBinding', TimeSpanSimpleExtensionGroup.name().localName(), TimeSpanSimpleExtensionGroup)

TimeSpanObjectExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeSpanObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1598, 2))
Namespace.addCategoryObject('elementBinding', TimeSpanObjectExtensionGroup.name().localName(), TimeSpanObjectExtensionGroup)

UpdateOpExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UpdateOpExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1615, 2))
Namespace.addCategoryObject('elementBinding', UpdateOpExtensionGroup.name().localName(), UpdateOpExtensionGroup)

UpdateExtensionGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UpdateExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1616, 2))
Namespace.addCategoryObject('elementBinding', UpdateExtensionGroup.name().localName(), UpdateExtensionGroup)

altitudeMode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitudeMode'), altitudeModeEnumType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 190, 2), unicode_default='clampToGround')
Namespace.addCategoryObject('elementBinding', altitudeMode.name().localName(), altitudeMode)

begin = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'begin'), dateTimeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 192, 2))
Namespace.addCategoryObject('elementBinding', begin.name().localName(), begin)

bgColor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bgColor'), colorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 193, 2), unicode_default='ffffffff')
Namespace.addCategoryObject('elementBinding', bgColor.name().localName(), bgColor)

bottomFov = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bottomFov'), angle90Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 194, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', bottomFov.name().localName(), bottomFov)

color = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'color'), colorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 195, 2), unicode_default='ffffffff')
Namespace.addCategoryObject('elementBinding', color.name().localName(), color)

colorMode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'colorMode'), colorModeEnumType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 196, 2), unicode_default='normal')
Namespace.addCategoryObject('elementBinding', colorMode.name().localName(), colorMode)

coordinates = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coordinates'), coordinatesType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 198, 2))
Namespace.addCategoryObject('elementBinding', coordinates.name().localName(), coordinates)

displayMode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayMode'), displayModeEnumType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 201, 2), unicode_default='default')
Namespace.addCategoryObject('elementBinding', displayMode.name().localName(), displayMode)

east = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'east'), angle180Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 203, 2), unicode_default='180.0')
Namespace.addCategoryObject('elementBinding', east.name().localName(), east)

end = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'end'), dateTimeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 204, 2))
Namespace.addCategoryObject('elementBinding', end.name().localName(), end)

expires = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expires'), dateTimeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 205, 2))
Namespace.addCategoryObject('elementBinding', expires.name().localName(), expires)

gridOrigin = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'gridOrigin'), gridOriginEnumType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 209, 2), unicode_default='lowerLeft')
Namespace.addCategoryObject('elementBinding', gridOrigin.name().localName(), gridOrigin)

heading = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heading'), angle360Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 210, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', heading.name().localName(), heading)

key = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'key'), styleStateEnumType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 219, 2), unicode_default='normal')
Namespace.addCategoryObject('elementBinding', key.name().localName(), key)

latitude = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'latitude'), angle90Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 220, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', latitude.name().localName(), latitude)

leftFov = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'leftFov'), angle180Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 221, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', leftFov.name().localName(), leftFov)

linkSnippet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'linkSnippet'), SnippetType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 224, 2))
Namespace.addCategoryObject('elementBinding', linkSnippet.name().localName(), linkSnippet)

listItemType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'listItemType'), listItemTypeEnumType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 225, 2), unicode_default='check')
Namespace.addCategoryObject('elementBinding', listItemType.name().localName(), listItemType)

longitude = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'longitude'), angle180Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 226, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', longitude.name().localName(), longitude)

north = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'north'), angle180Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 241, 2), unicode_default='180.0')
Namespace.addCategoryObject('elementBinding', north.name().localName(), north)

refreshMode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refreshMode'), refreshModeEnumType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 247, 2), unicode_default='onChange')
Namespace.addCategoryObject('elementBinding', refreshMode.name().localName(), refreshMode)

rightFov = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rightFov'), angle180Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 251, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', rightFov.name().localName(), rightFov)

roll = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'roll'), angle180Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 252, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', roll.name().localName(), roll)

rotation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rotation'), angle180Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 253, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', rotation.name().localName(), rotation)

shape = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shape'), shapeEnumType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 257, 2), unicode_default='rectangle')
Namespace.addCategoryObject('elementBinding', shape.name().localName(), shape)

south = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'south'), angle180Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 259, 2), unicode_default='-180.0')
Namespace.addCategoryObject('elementBinding', south.name().localName(), south)

textColor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'textColor'), colorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 267, 2), unicode_default='ff000000')
Namespace.addCategoryObject('elementBinding', textColor.name().localName(), textColor)

tilt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tilt'), anglepos180Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 269, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', tilt.name().localName(), tilt)

topFov = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'topFov'), angle90Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 270, 2), unicode_default='0.0')
Namespace.addCategoryObject('elementBinding', topFov.name().localName(), topFov)

viewRefreshMode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viewRefreshMode'), viewRefreshModeEnumType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 274, 2), unicode_default='never')
Namespace.addCategoryObject('elementBinding', viewRefreshMode.name().localName(), viewRefreshMode)

west = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'west'), angle180Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 278, 2), unicode_default='-180.0')
Namespace.addCategoryObject('elementBinding', west.name().localName(), west)

when = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'when'), dateTimeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 279, 2))
Namespace.addCategoryObject('elementBinding', when.name().localName(), when)

AbstractObjectGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractObjectGroup'), AbstractObjectType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 285, 2))
Namespace.addCategoryObject('elementBinding', AbstractObjectGroup.name().localName(), AbstractObjectGroup)

Snippet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Snippet'), SnippetType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 350, 2))
Namespace.addCategoryObject('elementBinding', Snippet.name().localName(), Snippet)

Metadata = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Metadata'), MetadataType, documentation='Metadata deprecated in 2.2', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 430, 2))
Namespace.addCategoryObject('elementBinding', Metadata.name().localName(), Metadata)

ExtendedData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExtendedData'), ExtendedDataType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 446, 2))
Namespace.addCategoryObject('elementBinding', ExtendedData.name().localName(), ExtendedData)

SimpleData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SimpleData'), SimpleDataType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 472, 2))
Namespace.addCategoryObject('elementBinding', SimpleData.name().localName(), SimpleData)

kml = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'kml'), KmlType, documentation='\n\n      <kml> is the root element.\n\n      ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 597, 2))
Namespace.addCategoryObject('elementBinding', kml.name().localName(), kml)

NetworkLinkControl = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkControl'), NetworkLinkControlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 621, 2))
Namespace.addCategoryObject('elementBinding', NetworkLinkControl.name().localName(), NetworkLinkControl)

Schema = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Schema'), SchemaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 667, 2))
Namespace.addCategoryObject('elementBinding', Schema.name().localName(), Schema)

SimpleField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SimpleField'), SimpleFieldType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 678, 2))
Namespace.addCategoryObject('elementBinding', SimpleField.name().localName(), SimpleField)

outerBoundaryIs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'outerBoundaryIs'), BoundaryType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 972, 2))
Namespace.addCategoryObject('elementBinding', outerBoundaryIs.name().localName(), outerBoundaryIs)

innerBoundaryIs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'innerBoundaryIs'), BoundaryType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 973, 2))
Namespace.addCategoryObject('elementBinding', innerBoundaryIs.name().localName(), innerBoundaryIs)

Update = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Update'), UpdateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1601, 2))
Namespace.addCategoryObject('elementBinding', Update.name().localName(), Update)

Create = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Create'), CreateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1618, 2))
Namespace.addCategoryObject('elementBinding', Create.name().localName(), Create)

Delete = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Delete'), DeleteType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1626, 2))
Namespace.addCategoryObject('elementBinding', Delete.name().localName(), Delete)

Change = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Change'), ChangeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1634, 2))
Namespace.addCategoryObject('elementBinding', Change.name().localName(), Change)

hotSpot = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hotSpot'), vec2Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 218, 2))
Namespace.addCategoryObject('elementBinding', hotSpot.name().localName(), hotSpot)

overlayXY = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'overlayXY'), vec2Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 244, 2))
Namespace.addCategoryObject('elementBinding', overlayXY.name().localName(), overlayXY)

rotationXY = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rotationXY'), vec2Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 254, 2))
Namespace.addCategoryObject('elementBinding', rotationXY.name().localName(), rotationXY)

screenXY = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'screenXY'), vec2Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 256, 2))
Namespace.addCategoryObject('elementBinding', screenXY.name().localName(), screenXY)

size = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'size'), vec2Type, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 258, 2))
Namespace.addCategoryObject('elementBinding', size.name().localName(), size)

state = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'state'), itemIconStateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 262, 2))
Namespace.addCategoryObject('elementBinding', state.name().localName(), state)

AbstractFeatureGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureGroup'), AbstractFeatureType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 302, 2))
Namespace.addCategoryObject('elementBinding', AbstractFeatureGroup.name().localName(), AbstractFeatureGroup)

AbstractViewGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup'), AbstractViewType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 359, 2))
Namespace.addCategoryObject('elementBinding', AbstractViewGroup.name().localName(), AbstractViewGroup)

SchemaData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SchemaData'), SchemaDataType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 456, 2))
Namespace.addCategoryObject('elementBinding', SchemaData.name().localName(), SchemaData)

Data = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Data'), DataType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 481, 2))
Namespace.addCategoryObject('elementBinding', Data.name().localName(), Data)

AbstractGeometryGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryGroup'), AbstractGeometryType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 516, 2))
Namespace.addCategoryObject('elementBinding', AbstractGeometryGroup.name().localName(), AbstractGeometryGroup)

AbstractStyleSelectorGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup'), AbstractStyleSelectorType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 557, 2))
Namespace.addCategoryObject('elementBinding', AbstractStyleSelectorGroup.name().localName(), AbstractStyleSelectorGroup)

AbstractTimePrimitiveGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveGroup'), AbstractTimePrimitiveType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 577, 2))
Namespace.addCategoryObject('elementBinding', AbstractTimePrimitiveGroup.name().localName(), AbstractTimePrimitiveGroup)

Region = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Region'), RegionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 759, 2))
Namespace.addCategoryObject('elementBinding', Region.name().localName(), Region)

Lod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Lod'), LodType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 802, 2))
Namespace.addCategoryObject('elementBinding', Lod.name().localName(), Lod)

Location = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Location'), LocationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1013, 2))
Namespace.addCategoryObject('elementBinding', Location.name().localName(), Location)

Orientation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Orientation'), OrientationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1035, 2))
Namespace.addCategoryObject('elementBinding', Orientation.name().localName(), Orientation)

Scale = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Scale'), ScaleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1057, 2))
Namespace.addCategoryObject('elementBinding', Scale.name().localName(), Scale)

ResourceMap = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResourceMap'), ResourceMapType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1079, 2))
Namespace.addCategoryObject('elementBinding', ResourceMap.name().localName(), ResourceMap)

Alias = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Alias'), AliasType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1099, 2))
Namespace.addCategoryObject('elementBinding', Alias.name().localName(), Alias)

ViewVolume = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ViewVolume'), ViewVolumeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1231, 2))
Namespace.addCategoryObject('elementBinding', ViewVolume.name().localName(), ViewVolume)

ImagePyramid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ImagePyramid'), ImagePyramidType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1255, 2))
Namespace.addCategoryObject('elementBinding', ImagePyramid.name().localName(), ImagePyramid)

Pair = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pair'), PairType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1323, 2))
Namespace.addCategoryObject('elementBinding', Pair.name().localName(), Pair)

AbstractSubStyleGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleGroup'), AbstractSubStyleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1345, 2))
Namespace.addCategoryObject('elementBinding', AbstractSubStyleGroup.name().localName(), AbstractSubStyleGroup)

ItemIcon = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ItemIcon'), ItemIconType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1539, 2))
Namespace.addCategoryObject('elementBinding', ItemIcon.name().localName(), ItemIcon)

LookAt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LookAt'), LookAtType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 378, 2))
Namespace.addCategoryObject('elementBinding', LookAt.name().localName(), LookAt)

Camera = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Camera'), CameraType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 404, 2))
Namespace.addCategoryObject('elementBinding', Camera.name().localName(), Camera)

AbstractContainerGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerGroup'), AbstractContainerType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 497, 2))
Namespace.addCategoryObject('elementBinding', AbstractContainerGroup.name().localName(), AbstractContainerGroup)

AbstractOverlayGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlayGroup'), AbstractOverlayType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 535, 2))
Namespace.addCategoryObject('elementBinding', AbstractOverlayGroup.name().localName(), AbstractOverlayGroup)

Placemark = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Placemark'), PlacemarkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 711, 2))
Namespace.addCategoryObject('elementBinding', Placemark.name().localName(), Placemark)

NetworkLink = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkLink'), NetworkLinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 731, 2))
Namespace.addCategoryObject('elementBinding', NetworkLink.name().localName(), NetworkLink)

LatLonAltBox = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LatLonAltBox'), LatLonAltBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 780, 2))
Namespace.addCategoryObject('elementBinding', LatLonAltBox.name().localName(), LatLonAltBox)

Icon = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Icon'), LinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 824, 2))
Namespace.addCategoryObject('elementBinding', Icon.name().localName(), Icon)

Link = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Link'), LinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 826, 2))
Namespace.addCategoryObject('elementBinding', Link.name().localName(), Link)

Url = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Url'), LinkType, documentation='Url deprecated in 2.2', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 828, 2))
Namespace.addCategoryObject('elementBinding', Url.name().localName(), Url)

MultiGeometry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultiGeometry'), MultiGeometryType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 858, 2))
Namespace.addCategoryObject('elementBinding', MultiGeometry.name().localName(), MultiGeometry)

Point = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Point'), PointType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 879, 2))
Namespace.addCategoryObject('elementBinding', Point.name().localName(), Point)

LineString = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LineString'), LineStringType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 901, 2))
Namespace.addCategoryObject('elementBinding', LineString.name().localName(), LineString)

LinearRing = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearRing'), LinearRingType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 924, 2))
Namespace.addCategoryObject('elementBinding', LinearRing.name().localName(), LinearRing)

Polygon = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Polygon'), PolygonType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 947, 2))
Namespace.addCategoryObject('elementBinding', Polygon.name().localName(), Polygon)

Model = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Model'), ModelType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 988, 2))
Namespace.addCategoryObject('elementBinding', Model.name().localName(), Model)

LatLonBox = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LatLonBox'), LatLonBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1163, 2))
Namespace.addCategoryObject('elementBinding', LatLonBox.name().localName(), LatLonBox)

Style = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Style'), StyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1278, 2))
Namespace.addCategoryObject('elementBinding', Style.name().localName(), Style)

StyleMap = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StyleMap'), StyleMapType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1303, 2))
Namespace.addCategoryObject('elementBinding', StyleMap.name().localName(), StyleMap)

AbstractColorStyleGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleGroup'), AbstractColorStyleType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1364, 2))
Namespace.addCategoryObject('elementBinding', AbstractColorStyleGroup.name().localName(), AbstractColorStyleGroup)

BalloonStyle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BalloonStyle'), BalloonStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1487, 2))
Namespace.addCategoryObject('elementBinding', BalloonStyle.name().localName(), BalloonStyle)

ListStyle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ListStyle'), ListStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1516, 2))
Namespace.addCategoryObject('elementBinding', ListStyle.name().localName(), ListStyle)

TimeStamp = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeStamp'), TimeStampType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1560, 2))
Namespace.addCategoryObject('elementBinding', TimeStamp.name().localName(), TimeStamp)

TimeSpan = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeSpan'), TimeSpanType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1580, 2))
Namespace.addCategoryObject('elementBinding', TimeSpan.name().localName(), TimeSpan)

Document = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Document'), DocumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 645, 2))
Namespace.addCategoryObject('elementBinding', Document.name().localName(), Document)

Folder = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Folder'), FolderType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 690, 2))
Namespace.addCategoryObject('elementBinding', Folder.name().localName(), Folder)

GroundOverlay = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GroundOverlay'), GroundOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1120, 2))
Namespace.addCategoryObject('elementBinding', GroundOverlay.name().localName(), GroundOverlay)

ScreenOverlay = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScreenOverlay'), ScreenOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1183, 2))
Namespace.addCategoryObject('elementBinding', ScreenOverlay.name().localName(), ScreenOverlay)

PhotoOverlay = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhotoOverlay'), PhotoOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1207, 2))
Namespace.addCategoryObject('elementBinding', PhotoOverlay.name().localName(), PhotoOverlay)

IconStyle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IconStyle'), IconStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1385, 2))
Namespace.addCategoryObject('elementBinding', IconStyle.name().localName(), IconStyle)

LabelStyle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LabelStyle'), LabelStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1426, 2))
Namespace.addCategoryObject('elementBinding', LabelStyle.name().localName(), LabelStyle)

LineStyle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LineStyle'), LineStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1446, 2))
Namespace.addCategoryObject('elementBinding', LineStyle.name().localName(), LineStyle)

PolyStyle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolyStyle'), PolyStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1466, 2))
Namespace.addCategoryObject('elementBinding', PolyStyle.name().localName(), PolyStyle)



AbstractObjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractObjectType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 294, 2)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractObjectType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractObjectType._Automaton = _BuildAutomaton()




def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 441, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 441, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MetadataType._Automaton = _BuildAutomaton_()




ExtendedDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SchemaData'), SchemaDataType, scope=ExtendedDataType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 456, 2)))

ExtendedDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Data'), DataType, scope=ExtendedDataType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 481, 2)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 449, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 450, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 451, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ExtendedDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Data')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 449, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ExtendedDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SchemaData')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 450, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.opengis.net/kml/2.2')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 451, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ExtendedDataType._Automaton = _BuildAutomaton_2()




KmlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureGroup'), AbstractFeatureType, abstract=pyxb.binding.datatypes.boolean(1), scope=KmlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 302, 2)))

KmlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KmlSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=KmlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 617, 2)))

KmlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'KmlObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=KmlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 618, 2)))

KmlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkControl'), NetworkLinkControlType, scope=KmlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 621, 2)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 608, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 609, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 610, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 612, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(KmlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkControl')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 608, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(KmlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 609, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(KmlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KmlSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 610, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(KmlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'KmlObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 612, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
KmlType._Automaton = _BuildAutomaton_3()




NetworkLinkControlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cookie'), pyxb.binding.datatypes.string, scope=NetworkLinkControlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 197, 2)))

NetworkLinkControlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'expires'), dateTimeType, scope=NetworkLinkControlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 205, 2)))

NetworkLinkControlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'linkDescription'), pyxb.binding.datatypes.string, scope=NetworkLinkControlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 222, 2)))

NetworkLinkControlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'linkName'), pyxb.binding.datatypes.string, scope=NetworkLinkControlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 223, 2)))

NetworkLinkControlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'linkSnippet'), SnippetType, scope=NetworkLinkControlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 224, 2)))

NetworkLinkControlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxSessionLength'), pyxb.binding.datatypes.double, scope=NetworkLinkControlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 228, 2), unicode_default='-1.0'))

NetworkLinkControlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'message'), pyxb.binding.datatypes.string, scope=NetworkLinkControlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 229, 2)))

NetworkLinkControlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'minRefreshPeriod'), pyxb.binding.datatypes.double, scope=NetworkLinkControlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 233, 2), unicode_default='0.0'))

NetworkLinkControlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup'), AbstractViewType, abstract=pyxb.binding.datatypes.boolean(1), scope=NetworkLinkControlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 359, 2)))

NetworkLinkControlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkControlSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=NetworkLinkControlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 640, 2)))

NetworkLinkControlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkControlObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=NetworkLinkControlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 642, 2)))

NetworkLinkControlType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Update'), UpdateType, scope=NetworkLinkControlType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1601, 2)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 624, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 625, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 626, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 627, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 628, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 629, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 630, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 631, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 632, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 633, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 634, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 636, 6))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkControlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'minRefreshPeriod')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 624, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkControlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxSessionLength')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 625, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkControlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cookie')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 626, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkControlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'message')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 627, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkControlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'linkName')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 628, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkControlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'linkDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 629, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkControlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'linkSnippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 630, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkControlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'expires')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 631, 6))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkControlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Update')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 632, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkControlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 633, 6))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkControlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkControlSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 634, 6))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkControlType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkControlObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 636, 6))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
NetworkLinkControlType._Automaton = _BuildAutomaton_4()




SchemaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SchemaExtension'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=SchemaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 676, 2)))

SchemaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SimpleField'), SimpleFieldType, scope=SchemaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 678, 2)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 670, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 671, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SchemaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SimpleField')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 670, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SchemaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SchemaExtension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 671, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SchemaType._Automaton = _BuildAutomaton_5()




SimpleFieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=SimpleFieldType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 200, 2)))

SimpleFieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SimpleFieldExtension'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=SimpleFieldType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 688, 2)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 681, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 682, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SimpleFieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 681, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SimpleFieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SimpleFieldExtension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 682, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SimpleFieldType._Automaton = _BuildAutomaton_6()




BoundaryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearRing'), LinearRingType, scope=BoundaryType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 924, 2)))

BoundaryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BoundarySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=BoundaryType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 983, 2)))

BoundaryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BoundaryObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=BoundaryType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 985, 2)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 976, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 977, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 979, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BoundaryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinearRing')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 976, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BoundaryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BoundarySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 977, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BoundaryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BoundaryObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 979, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BoundaryType._Automaton = _BuildAutomaton_7()




UpdateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'targetHref'), pyxb.binding.datatypes.anyURI, scope=UpdateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 264, 2)))

UpdateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UpdateOpExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=UpdateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1615, 2)))

UpdateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UpdateExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=UpdateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1616, 2)))

UpdateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Create'), CreateType, scope=UpdateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1618, 2)))

UpdateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Delete'), DeleteType, scope=UpdateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1626, 2)))

UpdateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Change'), ChangeType, scope=UpdateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1634, 2)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1611, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UpdateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'targetHref')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1604, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UpdateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Create')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1606, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UpdateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Delete')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1607, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UpdateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Change')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1608, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UpdateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UpdateOpExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1609, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UpdateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UpdateExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1611, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UpdateType._Automaton = _BuildAutomaton_8()




CreateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerGroup'), AbstractContainerType, abstract=pyxb.binding.datatypes.boolean(1), scope=CreateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 497, 2)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1621, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CreateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1621, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CreateType._Automaton = _BuildAutomaton_9()




DeleteType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureGroup'), AbstractFeatureType, abstract=pyxb.binding.datatypes.boolean(1), scope=DeleteType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 302, 2)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1629, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DeleteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1629, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DeleteType._Automaton = _BuildAutomaton_10()




ChangeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractObjectGroup'), AbstractObjectType, abstract=pyxb.binding.datatypes.boolean(1), scope=ChangeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 285, 2)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1637, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ChangeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractObjectGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1637, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ChangeType._Automaton = _BuildAutomaton_11()




AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'address'), pyxb.binding.datatypes.string, scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 187, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 199, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 239, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'open'), pyxb.binding.datatypes.boolean, scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 242, 2), unicode_default='0'))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber'), pyxb.binding.datatypes.string, scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 245, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'snippet'), pyxb.binding.datatypes.string, scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 261, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'styleUrl'), pyxb.binding.datatypes.anyURI, scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 263, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'visibility'), pyxb.binding.datatypes.boolean, scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 277, 2), unicode_default='1'))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 345, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 347, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Snippet'), SnippetType, scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 350, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup'), AbstractViewType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 359, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Metadata'), MetadataType, scope=AbstractFeatureType, documentation='Metadata deprecated in 2.2', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 430, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExtendedData'), ExtendedDataType, scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 446, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup'), AbstractStyleSelectorType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 557, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveGroup'), AbstractTimePrimitiveType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 577, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Region'), RegionType, scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 759, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_atom, 'author'), pyxb.bundles.opengis.atom.atomPersonConstruct, scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/atom-author-link.xsd', 28, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_atom, 'link'), pyxb.bundles.opengis.atom.CTD_ANON, scope=AbstractFeatureType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/atom-author-link.xsd', 31, 2)))

AbstractFeatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_xal, 'AddressDetails'), pyxb.bundles.opengis.misc.xAL.AddressDetails_, scope=AbstractFeatureType, documentation='This container defines the details of the address. Can define multiple addresses including tracking address history', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/citygml/xAL/xAL.xsd', 44, 1)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    counters.add(cc_20)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visibility')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'open')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'author')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'link')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_xal, 'AddressDetails')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'styleUrl')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Region')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Metadata')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtendedData')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(AbstractFeatureType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractFeatureType._Automaton = _BuildAutomaton_12()




AbstractViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractViewType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 373, 2)))

AbstractViewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractViewType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 375, 2)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 365, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 367, 10))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractViewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractViewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 365, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractViewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 367, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractViewType._Automaton = _BuildAutomaton_13()




SchemaDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SchemaDataExtension'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=SchemaDataType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 470, 2)))

SchemaDataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SimpleData'), SimpleDataType, scope=SchemaDataType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 472, 2)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 462, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 463, 10))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SchemaDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SchemaDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SimpleData')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 462, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SchemaDataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SchemaDataExtension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 463, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SchemaDataType._Automaton = _BuildAutomaton_14()




DataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayName'), pyxb.binding.datatypes.string, scope=DataType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 200, 2)))

DataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), pyxb.binding.datatypes.string, scope=DataType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 271, 2)))

DataType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataExtension'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=DataType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 495, 2)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 487, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 489, 10))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayName')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 487, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 488, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DataType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataExtension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 489, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DataType._Automaton = _BuildAutomaton_15()




AbstractGeometryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometrySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractGeometryType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 530, 2)))

AbstractGeometryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractGeometryType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 532, 2)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometrySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractGeometryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractGeometryType._Automaton = _BuildAutomaton_16()




AbstractStyleSelectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractStyleSelectorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 572, 2)))

AbstractStyleSelectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractStyleSelectorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 574, 2)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 564, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 566, 10))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractStyleSelectorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractStyleSelectorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 564, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractStyleSelectorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 566, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractStyleSelectorType._Automaton = _BuildAutomaton_17()




AbstractTimePrimitiveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractTimePrimitiveType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 592, 2)))

AbstractTimePrimitiveType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractTimePrimitiveType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 594, 2)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 584, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 586, 10))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 584, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractTimePrimitiveType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 586, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractTimePrimitiveType._Automaton = _BuildAutomaton_18()




RegionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegionSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=RegionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 775, 2)))

RegionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RegionObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=RegionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 777, 2)))

RegionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LatLonAltBox'), LatLonAltBoxType, scope=RegionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 780, 2)))

RegionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Lod'), LodType, scope=RegionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 802, 2)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 765, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 766, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 767, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 769, 10))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RegionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RegionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LatLonAltBox')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 765, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(RegionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Lod')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 766, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(RegionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegionSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 767, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(RegionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RegionObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 769, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
RegionType._Automaton = _BuildAutomaton_19()




LodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'minFadeExtent'), pyxb.binding.datatypes.double, scope=LodType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 231, 2), unicode_default='0.0'))

LodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'minLodPixels'), pyxb.binding.datatypes.double, scope=LodType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 232, 2), unicode_default='0.0'))

LodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxFadeExtent'), pyxb.binding.datatypes.double, scope=LodType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 235, 2), unicode_default='0.0'))

LodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxLodPixels'), pyxb.binding.datatypes.double, scope=LodType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 236, 2), unicode_default='-1.0'))

LodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LodSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=LodType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 820, 2)))

LodType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LodObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LodType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 821, 2)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 808, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 809, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 810, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 811, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 812, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 814, 10))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LodType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LodType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'minLodPixels')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 808, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LodType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxLodPixels')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 809, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LodType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'minFadeExtent')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 810, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LodType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxFadeExtent')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 811, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LodType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LodSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 812, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(LodType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LodObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 814, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LodType._Automaton = _BuildAutomaton_20()




LocationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitude'), pyxb.binding.datatypes.double, scope=LocationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 188, 2), unicode_default='0.0'))

LocationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'latitude'), angle90Type, scope=LocationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 220, 2), unicode_default='0.0'))

LocationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'longitude'), angle180Type, scope=LocationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 226, 2), unicode_default='0.0'))

LocationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocationSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=LocationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1030, 2)))

LocationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocationObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LocationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1032, 2)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1019, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1020, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1021, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1022, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1024, 10))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'longitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1019, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'latitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1020, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'altitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1021, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LocationSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1022, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LocationObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1024, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LocationType._Automaton = _BuildAutomaton_21()




OrientationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heading'), angle360Type, scope=OrientationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 210, 2), unicode_default='0.0'))

OrientationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'roll'), angle180Type, scope=OrientationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 252, 2), unicode_default='0.0'))

OrientationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tilt'), anglepos180Type, scope=OrientationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 269, 2), unicode_default='0.0'))

OrientationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrientationSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=OrientationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1052, 2)))

OrientationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrientationObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=OrientationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1054, 2)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1041, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1042, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1043, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1044, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1046, 10))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OrientationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OrientationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heading')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1041, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(OrientationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tilt')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1042, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(OrientationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'roll')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1043, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(OrientationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrientationSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1044, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(OrientationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrientationObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1046, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
OrientationType._Automaton = _BuildAutomaton_22()




ScaleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'x'), pyxb.binding.datatypes.double, scope=ScaleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 281, 2), unicode_default='1.0'))

ScaleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'y'), pyxb.binding.datatypes.double, scope=ScaleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 282, 2), unicode_default='1.0'))

ScaleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'z'), pyxb.binding.datatypes.double, scope=ScaleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 283, 2), unicode_default='1.0'))

ScaleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScaleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=ScaleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1074, 2)))

ScaleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScaleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=ScaleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1076, 2)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1063, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1064, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1065, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1066, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1068, 10))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ScaleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ScaleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'x')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1063, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ScaleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'y')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1064, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ScaleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'z')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1065, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ScaleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScaleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1066, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ScaleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScaleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1068, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ScaleType._Automaton = _BuildAutomaton_23()




ResourceMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResourceMapSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=ResourceMapType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1094, 2)))

ResourceMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResourceMapObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=ResourceMapType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1096, 2)))

ResourceMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Alias'), AliasType, scope=ResourceMapType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1099, 2)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1085, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1086, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1088, 10))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResourceMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResourceMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Alias')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1085, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResourceMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResourceMapSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1086, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ResourceMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResourceMapObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1088, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ResourceMapType._Automaton = _BuildAutomaton_24()




AliasType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sourceHref'), pyxb.binding.datatypes.anyURI, scope=AliasType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 260, 2)))

AliasType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'targetHref'), pyxb.binding.datatypes.anyURI, scope=AliasType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 264, 2)))

AliasType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AliasSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=AliasType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1115, 2)))

AliasType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AliasObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=AliasType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1117, 2)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1105, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1106, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1107, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1109, 10))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AliasType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AliasType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'targetHref')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1105, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AliasType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sourceHref')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1106, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AliasType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AliasSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1107, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AliasType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AliasObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1109, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AliasType._Automaton = _BuildAutomaton_25()




AbstractLatLonBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'east'), angle180Type, scope=AbstractLatLonBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 203, 2), unicode_default='180.0'))

AbstractLatLonBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'north'), angle180Type, scope=AbstractLatLonBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 241, 2), unicode_default='180.0'))

AbstractLatLonBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'south'), angle180Type, scope=AbstractLatLonBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 259, 2), unicode_default='-180.0'))

AbstractLatLonBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'west'), angle180Type, scope=AbstractLatLonBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 278, 2), unicode_default='-180.0'))

AbstractLatLonBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractLatLonBoxSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractLatLonBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1158, 2)))

AbstractLatLonBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractLatLonBoxObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractLatLonBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1160, 2)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1146, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1147, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1148, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1149, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1150, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1152, 10))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractLatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractLatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'north')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1146, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractLatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'south')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1147, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AbstractLatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'east')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1148, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AbstractLatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'west')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1149, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AbstractLatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractLatLonBoxSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1150, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AbstractLatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractLatLonBoxObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1152, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractLatLonBoxType._Automaton = _BuildAutomaton_26()




ViewVolumeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bottomFov'), angle90Type, scope=ViewVolumeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 194, 2), unicode_default='0.0'))

ViewVolumeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'leftFov'), angle180Type, scope=ViewVolumeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 221, 2), unicode_default='0.0'))

ViewVolumeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'near'), pyxb.binding.datatypes.double, scope=ViewVolumeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 240, 2), unicode_default='0.0'))

ViewVolumeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rightFov'), angle180Type, scope=ViewVolumeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 251, 2), unicode_default='0.0'))

ViewVolumeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'topFov'), angle90Type, scope=ViewVolumeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 270, 2), unicode_default='0.0'))

ViewVolumeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ViewVolumeSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=ViewVolumeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1250, 2)))

ViewVolumeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ViewVolumeObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=ViewVolumeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1252, 2)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1237, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1238, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1239, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1240, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1241, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1242, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1244, 10))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ViewVolumeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ViewVolumeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'leftFov')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1237, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ViewVolumeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rightFov')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1238, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ViewVolumeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bottomFov')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1239, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ViewVolumeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'topFov')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1240, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ViewVolumeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'near')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1241, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ViewVolumeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ViewVolumeSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1242, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ViewVolumeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ViewVolumeObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1244, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ViewVolumeType._Automaton = _BuildAutomaton_27()




ImagePyramidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'gridOrigin'), gridOriginEnumType, scope=ImagePyramidType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 209, 2), unicode_default='lowerLeft'))

ImagePyramidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxHeight'), pyxb.binding.datatypes.int, scope=ImagePyramidType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 237, 2), unicode_default='0'))

ImagePyramidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxWidth'), pyxb.binding.datatypes.int, scope=ImagePyramidType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 238, 2), unicode_default='0'))

ImagePyramidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tileSize'), pyxb.binding.datatypes.int, scope=ImagePyramidType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 268, 2), unicode_default='256'))

ImagePyramidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ImagePyramidSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=ImagePyramidType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1273, 2)))

ImagePyramidType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ImagePyramidObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=ImagePyramidType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1275, 2)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1261, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1262, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1263, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1264, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1265, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1267, 10))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ImagePyramidType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ImagePyramidType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tileSize')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1261, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ImagePyramidType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxWidth')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1262, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ImagePyramidType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxHeight')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1263, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ImagePyramidType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'gridOrigin')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1264, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ImagePyramidType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ImagePyramidSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1265, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ImagePyramidType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ImagePyramidObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1267, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ImagePyramidType._Automaton = _BuildAutomaton_28()




PairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'key'), styleStateEnumType, scope=PairType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 219, 2), unicode_default='normal'))

PairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'styleUrl'), pyxb.binding.datatypes.anyURI, scope=PairType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 263, 2)))

PairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup'), AbstractStyleSelectorType, abstract=pyxb.binding.datatypes.boolean(1), scope=PairType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 557, 2)))

PairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PairSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=PairType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1340, 2)))

PairType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PairObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=PairType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1342, 2)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1329, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1330, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1331, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1332, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1334, 10))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'key')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1329, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'styleUrl')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1330, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1331, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PairSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1332, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PairType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PairObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1334, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PairType._Automaton = _BuildAutomaton_29()




AbstractSubStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractSubStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1359, 2)))

AbstractSubStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractSubStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1361, 2)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSubStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSubStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSubStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractSubStyleType._Automaton = _BuildAutomaton_30()




BasicLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'href'), pyxb.binding.datatypes.string, scope=BasicLinkType, documentation='not anyURI due to $[x] substitution in\n      PhotoOverlay', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 211, 2)))

BasicLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BasicLinkSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=BasicLinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1421, 2)))

BasicLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BasicLinkObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=BasicLinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1423, 2)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1412, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1413, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1415, 10))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BasicLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BasicLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'href')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1412, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BasicLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BasicLinkSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1413, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BasicLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BasicLinkObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1415, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BasicLinkType._Automaton = _BuildAutomaton_31()




ItemIconType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'href'), pyxb.binding.datatypes.string, scope=ItemIconType, documentation='not anyURI due to $[x] substitution in\n      PhotoOverlay', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 211, 2)))

ItemIconType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'state'), itemIconStateType, scope=ItemIconType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 262, 2)))

ItemIconType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ItemIconSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=ItemIconType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1555, 2)))

ItemIconType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ItemIconObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=ItemIconType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1557, 2)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1545, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1546, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1547, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1549, 10))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ItemIconType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ItemIconType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'state')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1545, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ItemIconType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'href')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1546, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ItemIconType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ItemIconSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1547, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ItemIconType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ItemIconObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1549, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ItemIconType._Automaton = _BuildAutomaton_32()




LookAtType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitude'), pyxb.binding.datatypes.double, scope=LookAtType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 188, 2), unicode_default='0.0'))

LookAtType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LookAtType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2)))

LookAtType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heading'), angle360Type, scope=LookAtType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 210, 2), unicode_default='0.0'))

LookAtType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'latitude'), angle90Type, scope=LookAtType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 220, 2), unicode_default='0.0'))

LookAtType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'longitude'), angle180Type, scope=LookAtType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 226, 2), unicode_default='0.0'))

LookAtType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'range'), pyxb.binding.datatypes.double, scope=LookAtType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 246, 2), unicode_default='0.0'))

LookAtType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tilt'), anglepos180Type, scope=LookAtType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 269, 2), unicode_default='0.0'))

LookAtType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LookAtSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=LookAtType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 399, 2)))

LookAtType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LookAtObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LookAtType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 401, 2)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 365, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 367, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 384, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 385, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 386, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 387, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 388, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 389, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 390, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 391, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 393, 10))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LookAtType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LookAtType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 365, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LookAtType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 367, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LookAtType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'longitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 384, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LookAtType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'latitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 385, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LookAtType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'altitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 386, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(LookAtType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heading')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 387, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(LookAtType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tilt')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 388, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(LookAtType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'range')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 389, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(LookAtType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 390, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(LookAtType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LookAtSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 391, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(LookAtType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LookAtObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 393, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LookAtType._Automaton = _BuildAutomaton_33()




CameraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitude'), pyxb.binding.datatypes.double, scope=CameraType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 188, 2), unicode_default='0.0'))

CameraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CameraType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2)))

CameraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heading'), angle360Type, scope=CameraType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 210, 2), unicode_default='0.0'))

CameraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'latitude'), angle90Type, scope=CameraType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 220, 2), unicode_default='0.0'))

CameraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'longitude'), angle180Type, scope=CameraType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 226, 2), unicode_default='0.0'))

CameraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'roll'), angle180Type, scope=CameraType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 252, 2), unicode_default='0.0'))

CameraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tilt'), anglepos180Type, scope=CameraType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 269, 2), unicode_default='0.0'))

CameraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CameraSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=CameraType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 425, 2)))

CameraType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CameraObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CameraType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 427, 2)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 365, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 367, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 410, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 411, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 412, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 413, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 414, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 415, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 416, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 417, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 419, 10))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CameraType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CameraType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 365, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CameraType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 367, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CameraType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'longitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 410, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CameraType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'latitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 411, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CameraType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'altitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 412, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CameraType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heading')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 413, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CameraType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tilt')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 414, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CameraType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'roll')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 415, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CameraType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 416, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CameraType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CameraSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 417, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CameraType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CameraObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 419, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CameraType._Automaton = _BuildAutomaton_34()




AbstractContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractContainerType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 511, 2)))

AbstractContainerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractContainerType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 513, 2)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 503, 10))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 505, 10))
    counters.add(cc_22)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visibility')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'open')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'author')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'link')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_xal, 'AddressDetails')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'styleUrl')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Region')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Metadata')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtendedData')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 503, 10))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(AbstractContainerType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 505, 10))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    st_22._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractContainerType._Automaton = _BuildAutomaton_35()




AbstractOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'color'), colorType, scope=AbstractOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 195, 2), unicode_default='ffffffff'))

AbstractOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'drawOrder'), pyxb.binding.datatypes.int, scope=AbstractOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 202, 2), unicode_default='0'))

AbstractOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlaySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 552, 2)))

AbstractOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlayObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 554, 2)))

AbstractOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Icon'), LinkType, scope=AbstractOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 824, 2)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 541, 10))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 542, 10))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 543, 10))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 544, 10))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 546, 10))
    counters.add(cc_25)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visibility')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'open')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'author')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'link')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_xal, 'AddressDetails')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'styleUrl')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Region')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Metadata')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtendedData')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'color')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 541, 10))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'drawOrder')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 542, 10))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Icon')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 543, 10))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlaySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 544, 10))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(AbstractOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlayObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 546, 10))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractOverlayType._Automaton = _BuildAutomaton_36()




PlacemarkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryGroup'), AbstractGeometryType, abstract=pyxb.binding.datatypes.boolean(1), scope=PlacemarkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 516, 2)))

PlacemarkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlacemarkSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=PlacemarkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 726, 2)))

PlacemarkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlacemarkObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=PlacemarkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 728, 2)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 717, 10))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 718, 10))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 720, 10))
    counters.add(cc_23)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visibility')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'open')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'author')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'link')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_xal, 'AddressDetails')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'styleUrl')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Region')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Metadata')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtendedData')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 717, 10))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlacemarkSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 718, 10))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(PlacemarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlacemarkObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 720, 10))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PlacemarkType._Automaton = _BuildAutomaton_37()




NetworkLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'flyToView'), pyxb.binding.datatypes.boolean, scope=NetworkLinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 208, 2), unicode_default='0'))

NetworkLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refreshVisibility'), pyxb.binding.datatypes.boolean, scope=NetworkLinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 250, 2), unicode_default='0'))

NetworkLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=NetworkLinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 754, 2)))

NetworkLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=NetworkLinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 756, 2)))

NetworkLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Link'), LinkType, scope=NetworkLinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 826, 2)))

NetworkLinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Url'), LinkType, scope=NetworkLinkType, documentation='Url deprecated in 2.2', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 828, 2)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 737, 10))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 738, 10))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 743, 12))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 744, 12))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 746, 10))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 748, 10))
    counters.add(cc_26)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visibility')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'open')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'author')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'link')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_xal, 'AddressDetails')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'styleUrl')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Region')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Metadata')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtendedData')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'refreshVisibility')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 737, 10))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'flyToView')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 738, 10))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Url')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 743, 12))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Link')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 744, 12))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 746, 10))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(NetworkLinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NetworkLinkObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 748, 10))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_26, True) ]))
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
NetworkLinkType._Automaton = _BuildAutomaton_38()




LatLonAltBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LatLonAltBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2)))

LatLonAltBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'minAltitude'), pyxb.binding.datatypes.double, scope=LatLonAltBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 230, 2), unicode_default='0.0'))

LatLonAltBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxAltitude'), pyxb.binding.datatypes.double, scope=LatLonAltBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 234, 2), unicode_default='0.0'))

LatLonAltBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LatLonAltBoxSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=LatLonAltBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 797, 2)))

LatLonAltBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LatLonAltBoxObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LatLonAltBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 799, 2)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1146, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1147, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1148, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1149, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1150, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1152, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 786, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 787, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 788, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 789, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 791, 10))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LatLonAltBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LatLonAltBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'north')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1146, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LatLonAltBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'south')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1147, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LatLonAltBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'east')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1148, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LatLonAltBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'west')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1149, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LatLonAltBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractLatLonBoxSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1150, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(LatLonAltBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractLatLonBoxObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1152, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(LatLonAltBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'minAltitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 786, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(LatLonAltBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxAltitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 787, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(LatLonAltBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 788, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(LatLonAltBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LatLonAltBoxSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 789, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(LatLonAltBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LatLonAltBoxObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 791, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LatLonAltBoxType._Automaton = _BuildAutomaton_39()




LinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'httpQuery'), pyxb.binding.datatypes.string, scope=LinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 217, 2)))

LinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refreshMode'), refreshModeEnumType, scope=LinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 247, 2), unicode_default='onChange'))

LinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'refreshInterval'), pyxb.binding.datatypes.double, scope=LinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 249, 2), unicode_default='4.0'))

LinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viewBoundScale'), pyxb.binding.datatypes.double, scope=LinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 272, 2), unicode_default='1.0'))

LinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viewFormat'), pyxb.binding.datatypes.string, scope=LinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 273, 2)))

LinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viewRefreshMode'), viewRefreshModeEnumType, scope=LinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 274, 2), unicode_default='never'))

LinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'viewRefreshTime'), pyxb.binding.datatypes.double, scope=LinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 276, 2), unicode_default='4.0'))

LinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinkSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=LinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 853, 2)))

LinkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinkObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LinkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 855, 2)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1412, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1413, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1415, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 838, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 839, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 840, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 841, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 842, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 843, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 844, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 845, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 847, 10))
    counters.add(cc_12)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'href')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1412, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BasicLinkSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1413, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BasicLinkObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1415, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'refreshMode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 838, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'refreshInterval')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 839, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(LinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'viewRefreshMode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 840, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(LinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'viewRefreshTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 841, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(LinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'viewBoundScale')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 842, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(LinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'viewFormat')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 843, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(LinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'httpQuery')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 844, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(LinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinkSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 845, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(LinkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinkObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 847, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LinkType._Automaton = _BuildAutomaton_40()




MultiGeometryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryGroup'), AbstractGeometryType, abstract=pyxb.binding.datatypes.boolean(1), scope=MultiGeometryType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 516, 2)))

MultiGeometryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultiGeometrySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=MultiGeometryType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 874, 2)))

MultiGeometryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultiGeometryObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=MultiGeometryType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 876, 2)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 864, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 866, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 868, 10))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometrySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 864, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MultiGeometrySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 866, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MultiGeometryType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MultiGeometryObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 868, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MultiGeometryType._Automaton = _BuildAutomaton_41()




PointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=PointType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2)))

PointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coordinates'), coordinatesType, scope=PointType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 198, 2)))

PointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extrude'), pyxb.binding.datatypes.boolean, scope=PointType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 206, 2), unicode_default='0'))

PointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PointSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=PointType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 896, 2)))

PointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PointObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=PointType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 898, 2)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 885, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 886, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 887, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 888, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 890, 10))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometrySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extrude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 885, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 886, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coordinates')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 887, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PointSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 888, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PointObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 890, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PointType._Automaton = _BuildAutomaton_42()




LineStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LineStringType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2)))

LineStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coordinates'), coordinatesType, scope=LineStringType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 198, 2)))

LineStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extrude'), pyxb.binding.datatypes.boolean, scope=LineStringType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 206, 2), unicode_default='0'))

LineStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tessellate'), pyxb.binding.datatypes.boolean, scope=LineStringType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 265, 2), unicode_default='0'))

LineStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LineStringSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=LineStringType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 919, 2)))

LineStringType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LineStringObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LineStringType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 921, 2)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 907, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 908, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 909, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 910, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 911, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 913, 10))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LineStringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LineStringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometrySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LineStringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LineStringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extrude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 907, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LineStringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tessellate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 908, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LineStringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 909, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(LineStringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coordinates')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 910, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(LineStringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LineStringSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 911, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(LineStringType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LineStringObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 913, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LineStringType._Automaton = _BuildAutomaton_43()




LinearRingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LinearRingType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2)))

LinearRingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coordinates'), coordinatesType, scope=LinearRingType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 198, 2)))

LinearRingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extrude'), pyxb.binding.datatypes.boolean, scope=LinearRingType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 206, 2), unicode_default='0'))

LinearRingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tessellate'), pyxb.binding.datatypes.boolean, scope=LinearRingType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 265, 2), unicode_default='0'))

LinearRingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearRingSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=LinearRingType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 942, 2)))

LinearRingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearRingObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LinearRingType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 944, 2)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 930, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 931, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 932, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 933, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 934, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 936, 10))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LinearRingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LinearRingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometrySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LinearRingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LinearRingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extrude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 930, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LinearRingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tessellate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 931, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LinearRingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 932, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(LinearRingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coordinates')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 933, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(LinearRingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinearRingSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 934, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(LinearRingType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinearRingObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 936, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LinearRingType._Automaton = _BuildAutomaton_44()




PolygonType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=PolygonType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2)))

PolygonType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extrude'), pyxb.binding.datatypes.boolean, scope=PolygonType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 206, 2), unicode_default='0'))

PolygonType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tessellate'), pyxb.binding.datatypes.boolean, scope=PolygonType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 265, 2), unicode_default='0'))

PolygonType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolygonSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=PolygonType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 967, 2)))

PolygonType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolygonObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=PolygonType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 969, 2)))

PolygonType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'outerBoundaryIs'), BoundaryType, scope=PolygonType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 972, 2)))

PolygonType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'innerBoundaryIs'), BoundaryType, scope=PolygonType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 973, 2)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 953, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 954, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 955, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 956, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 957, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 959, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 961, 10))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PolygonType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PolygonType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometrySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PolygonType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PolygonType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extrude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 953, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PolygonType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tessellate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 954, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PolygonType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 955, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PolygonType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'outerBoundaryIs')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 956, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PolygonType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'innerBoundaryIs')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 957, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PolygonType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolygonSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 959, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PolygonType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolygonObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 961, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PolygonType._Automaton = _BuildAutomaton_45()




ModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=ModelType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2)))

ModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Link'), LinkType, scope=ModelType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 826, 2)))

ModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModelSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=ModelType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1008, 2)))

ModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModelObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=ModelType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1010, 2)))

ModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Location'), LocationType, scope=ModelType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1013, 2)))

ModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Orientation'), OrientationType, scope=ModelType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1035, 2)))

ModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Scale'), ScaleType, scope=ModelType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1057, 2)))

ModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResourceMap'), ResourceMapType, scope=ModelType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1079, 2)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 994, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 995, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 996, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 997, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 998, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 999, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1000, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1002, 10))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometrySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 522, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractGeometryObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 524, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 994, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 995, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Orientation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 996, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Scale')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 997, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Link')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 998, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResourceMap')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 999, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModelSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1000, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModelObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1002, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ModelType._Automaton = _BuildAutomaton_46()




LatLonBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rotation'), angle180Type, scope=LatLonBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 253, 2), unicode_default='0.0'))

LatLonBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LatLonBoxSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=LatLonBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1178, 2)))

LatLonBoxType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LatLonBoxObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LatLonBoxType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1180, 2)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1146, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1147, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1148, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1149, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1150, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1152, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1169, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1170, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1172, 10))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'north')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1146, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'south')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1147, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'east')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1148, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'west')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1149, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractLatLonBoxSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1150, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(LatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractLatLonBoxObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1152, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(LatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rotation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1169, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(LatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LatLonBoxSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1170, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(LatLonBoxType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LatLonBoxObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1172, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LatLonBoxType._Automaton = _BuildAutomaton_47()




StyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=StyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1298, 2)))

StyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=StyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1300, 2)))

StyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IconStyle'), IconStyleType, scope=StyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1385, 2)))

StyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LabelStyle'), LabelStyleType, scope=StyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1426, 2)))

StyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LineStyle'), LineStyleType, scope=StyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1446, 2)))

StyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolyStyle'), PolyStyleType, scope=StyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1466, 2)))

StyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BalloonStyle'), BalloonStyleType, scope=StyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1487, 2)))

StyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ListStyle'), ListStyleType, scope=StyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1516, 2)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 564, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 566, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1284, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1285, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1286, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1287, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1288, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1289, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1290, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1292, 10))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(StyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 564, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(StyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 566, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(StyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IconStyle')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1284, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(StyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LabelStyle')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1285, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(StyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LineStyle')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1286, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(StyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolyStyle')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1287, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(StyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BalloonStyle')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1288, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(StyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ListStyle')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1289, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(StyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1290, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(StyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1292, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
StyleType._Automaton = _BuildAutomaton_48()




StyleMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StyleMapSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=StyleMapType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1318, 2)))

StyleMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StyleMapObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=StyleMapType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1320, 2)))

StyleMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pair'), PairType, scope=StyleMapType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1323, 2)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 564, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 566, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1309, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1310, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1312, 10))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StyleMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(StyleMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 564, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(StyleMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 566, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(StyleMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pair')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1309, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(StyleMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StyleMapSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1310, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(StyleMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StyleMapObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1312, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
StyleMapType._Automaton = _BuildAutomaton_49()




AbstractColorStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'color'), colorType, scope=AbstractColorStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 195, 2), unicode_default='ffffffff'))

AbstractColorStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'colorMode'), colorModeEnumType, scope=AbstractColorStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 196, 2), unicode_default='normal'))

AbstractColorStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractColorStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1380, 2)))

AbstractColorStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractColorStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1382, 2)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1370, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1371, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1372, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1374, 10))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractColorStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractColorStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractColorStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AbstractColorStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'color')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1370, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AbstractColorStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'colorMode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1371, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AbstractColorStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1372, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AbstractColorStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1374, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractColorStyleType._Automaton = _BuildAutomaton_50()




BalloonStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bgColor'), colorType, scope=BalloonStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 193, 2), unicode_default='ffffffff'))

BalloonStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'color'), colorType, scope=BalloonStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 195, 2), unicode_default='ffffffff'))

BalloonStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayMode'), displayModeEnumType, scope=BalloonStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 201, 2), unicode_default='default'))

BalloonStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'text'), pyxb.binding.datatypes.string, scope=BalloonStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 266, 2)))

BalloonStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'textColor'), colorType, scope=BalloonStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 267, 2), unicode_default='ff000000'))

BalloonStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BalloonStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=BalloonStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1511, 2)))

BalloonStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BalloonStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=BalloonStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1513, 2)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1497, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1498, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1500, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1501, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1502, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1503, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1505, 10))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BalloonStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BalloonStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BalloonStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BalloonStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'color')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1497, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(BalloonStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bgColor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1498, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(BalloonStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'textColor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1500, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(BalloonStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'text')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1501, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(BalloonStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayMode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1502, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(BalloonStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BalloonStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1503, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(BalloonStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BalloonStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1505, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
BalloonStyleType._Automaton = _BuildAutomaton_51()




ListStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bgColor'), colorType, scope=ListStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 193, 2), unicode_default='ffffffff'))

ListStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'listItemType'), listItemTypeEnumType, scope=ListStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 225, 2), unicode_default='check'))

ListStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxSnippetLines'), pyxb.binding.datatypes.int, scope=ListStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 227, 2), unicode_default='2'))

ListStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ListStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=ListStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1534, 2)))

ListStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ListStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=ListStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1536, 2)))

ListStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ItemIcon'), ItemIconType, scope=ListStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1539, 2)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1522, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1523, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1524, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1525, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1526, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1528, 10))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ListStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ListStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ListStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ListStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'listItemType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1522, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ListStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bgColor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1523, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ListStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ItemIcon')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1524, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ListStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxSnippetLines')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1525, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ListStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ListStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1526, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ListStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ListStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1528, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ListStyleType._Automaton = _BuildAutomaton_52()




TimeStampType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'when'), dateTimeType, scope=TimeStampType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 279, 2)))

TimeStampType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeStampSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=TimeStampType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1575, 2)))

TimeStampType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeStampObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=TimeStampType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1577, 2)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 584, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 586, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1566, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1567, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1569, 10))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TimeStampType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TimeStampType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 584, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TimeStampType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 586, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TimeStampType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'when')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1566, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TimeStampType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeStampSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1567, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TimeStampType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeStampObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1569, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TimeStampType._Automaton = _BuildAutomaton_53()




TimeSpanType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'begin'), dateTimeType, scope=TimeSpanType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 192, 2)))

TimeSpanType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'end'), dateTimeType, scope=TimeSpanType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 204, 2)))

TimeSpanType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeSpanSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=TimeSpanType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1596, 2)))

TimeSpanType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeSpanObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=TimeSpanType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1598, 2)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 584, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 586, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1586, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1587, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1588, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1590, 10))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TimeSpanType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TimeSpanType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 584, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TimeSpanType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 586, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TimeSpanType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'begin')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1586, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TimeSpanType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'end')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1587, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TimeSpanType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeSpanSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1588, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TimeSpanType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeSpanObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1590, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TimeSpanType._Automaton = _BuildAutomaton_54()




DocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureGroup'), AbstractFeatureType, abstract=pyxb.binding.datatypes.boolean(1), scope=DocumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 302, 2)))

DocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DocumentSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=DocumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 662, 2)))

DocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DocumentObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=DocumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 664, 2)))

DocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Schema'), SchemaType, scope=DocumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 667, 2)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 503, 10))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 505, 10))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 651, 10))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 652, 10))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 654, 10))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 656, 10))
    counters.add(cc_26)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visibility')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'open')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'author')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'link')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_xal, 'AddressDetails')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'styleUrl')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Region')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Metadata')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtendedData')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 503, 10))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 505, 10))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Schema')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 651, 10))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 652, 10))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DocumentSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 654, 10))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DocumentObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 656, 10))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_26, True) ]))
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DocumentType._Automaton = _BuildAutomaton_55()




FolderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureGroup'), AbstractFeatureType, abstract=pyxb.binding.datatypes.boolean(1), scope=FolderType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 302, 2)))

FolderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FolderSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=FolderType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 706, 2)))

FolderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FolderObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=FolderType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 708, 2)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 503, 10))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 505, 10))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 696, 10))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 698, 10))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 700, 10))
    counters.add(cc_25)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visibility')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'open')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'author')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'link')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_xal, 'AddressDetails')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'styleUrl')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Region')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Metadata')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtendedData')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 503, 10))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractContainerObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 505, 10))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 696, 10))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FolderSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 698, 10))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(FolderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FolderObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 700, 10))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
FolderType._Automaton = _BuildAutomaton_56()




GroundOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitude'), pyxb.binding.datatypes.double, scope=GroundOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 188, 2), unicode_default='0.0'))

GroundOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=GroundOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 189, 2)))

GroundOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GroundOverlaySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=GroundOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1137, 2)))

GroundOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GroundOverlayObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=GroundOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1139, 2)))

GroundOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LatLonBox'), LatLonBoxType, scope=GroundOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1163, 2)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 541, 10))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 542, 10))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 543, 10))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 544, 10))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 546, 10))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1126, 10))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1127, 10))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1128, 10))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1129, 10))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1131, 10))
    counters.add(cc_30)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visibility')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'open')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'author')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'link')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_xal, 'AddressDetails')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'styleUrl')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Region')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Metadata')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtendedData')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'color')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 541, 10))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'drawOrder')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 542, 10))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Icon')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 543, 10))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlaySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 544, 10))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlayObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 546, 10))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'altitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1126, 10))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'altitudeModeGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1127, 10))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LatLonBox')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1128, 10))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GroundOverlaySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1129, 10))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(GroundOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GroundOverlayObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1131, 10))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_28, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_29, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_29, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_30, True) ]))
    st_30._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
GroundOverlayType._Automaton = _BuildAutomaton_57()




ScreenOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'overlayXY'), vec2Type, scope=ScreenOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 244, 2)))

ScreenOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rotation'), angle180Type, scope=ScreenOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 253, 2), unicode_default='0.0'))

ScreenOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rotationXY'), vec2Type, scope=ScreenOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 254, 2)))

ScreenOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'screenXY'), vec2Type, scope=ScreenOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 256, 2)))

ScreenOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'size'), vec2Type, scope=ScreenOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 258, 2)))

ScreenOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScreenOverlaySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=ScreenOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1202, 2)))

ScreenOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScreenOverlayObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=ScreenOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1204, 2)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 541, 10))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 542, 10))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 543, 10))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 544, 10))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 546, 10))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1189, 10))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1190, 10))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1191, 10))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1192, 10))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1193, 10))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1194, 10))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1196, 10))
    counters.add(cc_32)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visibility')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'open')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'author')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'link')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_xal, 'AddressDetails')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'styleUrl')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Region')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Metadata')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtendedData')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'color')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 541, 10))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'drawOrder')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 542, 10))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Icon')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 543, 10))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlaySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 544, 10))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlayObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 546, 10))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'overlayXY')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1189, 10))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'screenXY')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1190, 10))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rotationXY')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1191, 10))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'size')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1192, 10))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rotation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1193, 10))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScreenOverlaySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1194, 10))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(ScreenOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScreenOverlayObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1196, 10))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_28, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_29, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_29, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_30, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_30, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_31, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_31, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_32, True) ]))
    st_32._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ScreenOverlayType._Automaton = _BuildAutomaton_58()




PhotoOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'rotation'), angle180Type, scope=PhotoOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 253, 2), unicode_default='0.0'))

PhotoOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'shape'), shapeEnumType, scope=PhotoOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 257, 2), unicode_default='rectangle'))

PhotoOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Point'), PointType, scope=PhotoOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 879, 2)))

PhotoOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhotoOverlaySimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=PhotoOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1226, 2)))

PhotoOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhotoOverlayObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=PhotoOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1228, 2)))

PhotoOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ViewVolume'), ViewVolumeType, scope=PhotoOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1231, 2)))

PhotoOverlayType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ImagePyramid'), ImagePyramidType, scope=PhotoOverlayType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1255, 2)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 541, 10))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 542, 10))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 543, 10))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 544, 10))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 546, 10))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1213, 10))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1214, 10))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1215, 10))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1216, 10))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1217, 10))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1218, 10))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1220, 10))
    counters.add(cc_32)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 308, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visibility')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 309, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'open')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 310, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'author')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 311, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_atom, 'link')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 312, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'address')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 313, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_xal, 'AddressDetails')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 314, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phoneNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 315, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 320, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'snippet')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 321, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 323, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractViewGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 324, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimePrimitiveGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 325, 10))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'styleUrl')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 326, 10))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractStyleSelectorGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 327, 10))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Region')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 329, 10))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Metadata')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 334, 12))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExtendedData')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 335, 12))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 337, 10))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractFeatureObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 339, 10))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'color')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 541, 10))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'drawOrder')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 542, 10))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Icon')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 543, 10))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlaySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 544, 10))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractOverlayObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 546, 10))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'rotation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1213, 10))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ViewVolume')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1214, 10))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ImagePyramid')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1215, 10))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Point')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1216, 10))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'shape')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1217, 10))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PhotoOverlaySimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1218, 10))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(PhotoOverlayType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PhotoOverlayObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1220, 10))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_28, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_29, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_29, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_30, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_30, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_31, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_31, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_32, True) ]))
    st_32._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PhotoOverlayType._Automaton = _BuildAutomaton_59()




IconStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heading'), angle360Type, scope=IconStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 210, 2), unicode_default='0.0'))

IconStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hotSpot'), vec2Type, scope=IconStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 218, 2)))

IconStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'scale'), pyxb.binding.datatypes.double, scope=IconStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 255, 2), unicode_default='1.0'))

IconStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Icon'), BasicLinkType, scope=IconStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1393, 10)))

IconStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IconStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=IconStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1403, 2)))

IconStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IconStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=IconStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1405, 2)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1370, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1371, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1372, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1374, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1391, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1392, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1393, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1394, 10))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1395, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1397, 10))
    counters.add(cc_12)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(IconStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(IconStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(IconStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(IconStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'color')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1370, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(IconStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'colorMode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1371, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(IconStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1372, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(IconStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1374, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(IconStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'scale')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1391, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(IconStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heading')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1392, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(IconStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Icon')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1393, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(IconStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hotSpot')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1394, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(IconStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IconStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1395, 10))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(IconStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IconStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1397, 10))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
IconStyleType._Automaton = _BuildAutomaton_60()




LabelStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'scale'), pyxb.binding.datatypes.double, scope=LabelStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 255, 2), unicode_default='1.0'))

LabelStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LabelStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=LabelStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1441, 2)))

LabelStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LabelStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LabelStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1443, 2)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1370, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1371, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1372, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1374, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1432, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1433, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1435, 10))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LabelStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LabelStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LabelStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LabelStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'color')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1370, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LabelStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'colorMode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1371, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LabelStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1372, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(LabelStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1374, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(LabelStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'scale')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1432, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(LabelStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LabelStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1433, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(LabelStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LabelStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1435, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LabelStyleType._Automaton = _BuildAutomaton_61()




LineStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'width'), pyxb.binding.datatypes.double, scope=LineStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 280, 2), unicode_default='1.0'))

LineStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LineStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=LineStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1461, 2)))

LineStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LineStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=LineStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1463, 2)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1370, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1371, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1372, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1374, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1452, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1453, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1455, 10))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LineStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LineStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LineStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LineStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'color')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1370, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LineStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'colorMode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1371, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LineStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1372, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(LineStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1374, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(LineStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'width')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1452, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(LineStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LineStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1453, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(LineStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LineStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1455, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LineStyleType._Automaton = _BuildAutomaton_62()




PolyStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fill'), pyxb.binding.datatypes.boolean, scope=PolyStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 207, 2), unicode_default='1'))

PolyStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'outline'), pyxb.binding.datatypes.boolean, scope=PolyStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 243, 2), unicode_default='1'))

PolyStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolyStyleSimpleExtensionGroup'), pyxb.binding.datatypes.anySimpleType, abstract=pyxb.binding.datatypes.boolean(1), scope=PolyStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1482, 2)))

PolyStyleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolyStyleObjectExtensionGroup'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=PolyStyleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1484, 2)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1370, 10))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1371, 10))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1372, 10))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1374, 10))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1472, 10))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1473, 10))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1474, 10))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1476, 10))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PolyStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObjectSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PolyStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1351, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PolyStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSubStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1353, 10))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PolyStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'color')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1370, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PolyStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'colorMode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1371, 10))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PolyStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1372, 10))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PolyStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractColorStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1374, 10))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PolyStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fill')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1472, 10))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PolyStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'outline')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1473, 10))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PolyStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolyStyleSimpleExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1474, 10))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PolyStyleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolyStyleObjectExtensionGroup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/kml/2.2.0/ogckml22.xsd', 1476, 10))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PolyStyleType._Automaton = _BuildAutomaton_63()


AbstractFeatureObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

AbstractViewObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

LookAtObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

CameraObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

AbstractContainerObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

AbstractGeometryObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

AbstractOverlayObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

AbstractStyleSelectorObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

AbstractTimePrimitiveObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

KmlObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

NetworkLinkControlObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

DocumentObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

FolderObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

PlacemarkObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

NetworkLinkObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

RegionObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

LatLonAltBoxObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

LodObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

LinkObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

MultiGeometryObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

PointObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

LineStringObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

LinearRingObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

PolygonObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

BoundaryObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

ModelObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

LocationObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

OrientationObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

ScaleObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

ResourceMapObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

AliasObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

GroundOverlayObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

AbstractLatLonBoxObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

LatLonBoxObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

ScreenOverlayObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

PhotoOverlayObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

ViewVolumeObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

ImagePyramidObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

StyleObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

StyleMapObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

PairObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

AbstractSubStyleObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

AbstractColorStyleObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

IconStyleObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

BasicLinkObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

LabelStyleObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

LineStyleObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

PolyStyleObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

BalloonStyleObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

ListStyleObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

ItemIconObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

TimeStampObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

TimeSpanObjectExtensionGroup._setSubstitutionGroup(AbstractObjectGroup)

altitudeMode._setSubstitutionGroup(altitudeModeGroup)

AbstractFeatureGroup._setSubstitutionGroup(AbstractObjectGroup)

AbstractViewGroup._setSubstitutionGroup(AbstractObjectGroup)

SchemaData._setSubstitutionGroup(AbstractObjectGroup)

Data._setSubstitutionGroup(AbstractObjectGroup)

AbstractGeometryGroup._setSubstitutionGroup(AbstractObjectGroup)

AbstractStyleSelectorGroup._setSubstitutionGroup(AbstractObjectGroup)

AbstractTimePrimitiveGroup._setSubstitutionGroup(AbstractObjectGroup)

Region._setSubstitutionGroup(AbstractObjectGroup)

Lod._setSubstitutionGroup(AbstractObjectGroup)

Location._setSubstitutionGroup(AbstractObjectGroup)

Orientation._setSubstitutionGroup(AbstractObjectGroup)

Scale._setSubstitutionGroup(AbstractObjectGroup)

ResourceMap._setSubstitutionGroup(AbstractObjectGroup)

Alias._setSubstitutionGroup(AbstractObjectGroup)

ViewVolume._setSubstitutionGroup(AbstractObjectGroup)

ImagePyramid._setSubstitutionGroup(AbstractObjectGroup)

Pair._setSubstitutionGroup(AbstractObjectGroup)

AbstractSubStyleGroup._setSubstitutionGroup(AbstractObjectGroup)

ItemIcon._setSubstitutionGroup(AbstractObjectGroup)

LookAt._setSubstitutionGroup(AbstractViewGroup)

Camera._setSubstitutionGroup(AbstractViewGroup)

AbstractContainerGroup._setSubstitutionGroup(AbstractFeatureGroup)

AbstractOverlayGroup._setSubstitutionGroup(AbstractFeatureGroup)

Placemark._setSubstitutionGroup(AbstractFeatureGroup)

NetworkLink._setSubstitutionGroup(AbstractFeatureGroup)

LatLonAltBox._setSubstitutionGroup(AbstractObjectGroup)

Icon._setSubstitutionGroup(AbstractObjectGroup)

Link._setSubstitutionGroup(AbstractObjectGroup)

Url._setSubstitutionGroup(AbstractObjectGroup)

MultiGeometry._setSubstitutionGroup(AbstractGeometryGroup)

Point._setSubstitutionGroup(AbstractGeometryGroup)

LineString._setSubstitutionGroup(AbstractGeometryGroup)

LinearRing._setSubstitutionGroup(AbstractGeometryGroup)

Polygon._setSubstitutionGroup(AbstractGeometryGroup)

Model._setSubstitutionGroup(AbstractGeometryGroup)

LatLonBox._setSubstitutionGroup(AbstractObjectGroup)

Style._setSubstitutionGroup(AbstractStyleSelectorGroup)

StyleMap._setSubstitutionGroup(AbstractStyleSelectorGroup)

AbstractColorStyleGroup._setSubstitutionGroup(AbstractSubStyleGroup)

BalloonStyle._setSubstitutionGroup(AbstractSubStyleGroup)

ListStyle._setSubstitutionGroup(AbstractSubStyleGroup)

TimeStamp._setSubstitutionGroup(AbstractTimePrimitiveGroup)

TimeSpan._setSubstitutionGroup(AbstractTimePrimitiveGroup)

Document._setSubstitutionGroup(AbstractContainerGroup)

Folder._setSubstitutionGroup(AbstractContainerGroup)

GroundOverlay._setSubstitutionGroup(AbstractOverlayGroup)

ScreenOverlay._setSubstitutionGroup(AbstractOverlayGroup)

PhotoOverlay._setSubstitutionGroup(AbstractOverlayGroup)

IconStyle._setSubstitutionGroup(AbstractColorStyleGroup)

LabelStyle._setSubstitutionGroup(AbstractColorStyleGroup)

LineStyle._setSubstitutionGroup(AbstractColorStyleGroup)

PolyStyle._setSubstitutionGroup(AbstractColorStyleGroup)
