# ./iGeodesy.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:7769d02f7966fcdab520d8672f4aa517a29634f3
# Generated 2017-07-10 00:39:59.155742 by PyXB version 1.2.5 using Python 2.7.12.final.0
# Namespace urn:xml-gov-au:icsm:egeodesy:0.4

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:4b913dda-6508-11e7-9924-0a55f9edafa5')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.5'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.bundles.common.xlink
import pyxb.bundles.opengis.gml_3_2
import pyxb.bundles.opengis.iso19139.v20070417.gmd
import pyxb.bundles.opengis.iso19139.v20070417.gco
import pyxb.bundles.opengis.om_2_0
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('urn:xml-gov-au:icsm:egeodesy:0.4', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_gml = pyxb.bundles.opengis.gml_3_2.Namespace
_Namespace_gml.configureCategories(['typeBinding', 'elementBinding'])
_Namespace = pyxb.bundles.common.xlink.Namespace
_Namespace.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_gmd = pyxb.bundles.opengis.iso19139.v20070417.gmd.Namespace
_Namespace_gmd.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}ipv4AddressType
class ipv4AddressType (pyxb.binding.datatypes.string):

    """
      An IP Version 4 address.
    """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ipv4AddressType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 27, 4)
    _Documentation = '\n      An IP Version 4 address.\n    '
ipv4AddressType._CF_pattern = pyxb.binding.facets.CF_pattern()
ipv4AddressType._CF_pattern.addPattern(pattern='\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}')
ipv4AddressType._InitializeFacetMap(ipv4AddressType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ipv4AddressType', ipv4AddressType)
_module_typeBindings.ipv4AddressType = ipv4AddressType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}ipv6AddressType
class ipv6AddressType (pyxb.binding.datatypes.string):

    """
      An IP Version 6 address.
    """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ipv6AddressType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 37, 4)
    _Documentation = '\n      An IP Version 6 address.\n    '
ipv6AddressType._CF_pattern = pyxb.binding.facets.CF_pattern()
ipv6AddressType._CF_pattern.addPattern(pattern='([A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}')
ipv6AddressType._InitializeFacetMap(ipv6AddressType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ipv6AddressType', ipv6AddressType)
_module_typeBindings.ipv6AddressType = ipv6AddressType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}dataFormatType
class dataFormatType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dataFormatType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 50, 4)
    _Documentation = None
dataFormatType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=dataFormatType, enum_prefix=None)
dataFormatType.RTCM_2 = dataFormatType._CF_enumeration.addEnumeration(unicode_value='RTCM_2', tag='RTCM_2')
dataFormatType.RTCM_2_2 = dataFormatType._CF_enumeration.addEnumeration(unicode_value='RTCM_2.2', tag='RTCM_2_2')
dataFormatType.RTCM_2_3 = dataFormatType._CF_enumeration.addEnumeration(unicode_value='RTCM_2.3', tag='RTCM_2_3')
dataFormatType.RTCM_3_0 = dataFormatType._CF_enumeration.addEnumeration(unicode_value='RTCM_3.0', tag='RTCM_3_0')
dataFormatType.RTCM_3_1 = dataFormatType._CF_enumeration.addEnumeration(unicode_value='RTCM_3.1', tag='RTCM_3_1')
dataFormatType.RYO = dataFormatType._CF_enumeration.addEnumeration(unicode_value='RYO', tag='RYO')
dataFormatType.RYO_1_0 = dataFormatType._CF_enumeration.addEnumeration(unicode_value='RYO_1.0', tag='RYO_1_0')
dataFormatType.RYO_2_0 = dataFormatType._CF_enumeration.addEnumeration(unicode_value='RYO_2.0', tag='RYO_2_0')
dataFormatType.CMR = dataFormatType._CF_enumeration.addEnumeration(unicode_value='CMR', tag='CMR')
dataFormatType.CMR_ = dataFormatType._CF_enumeration.addEnumeration(unicode_value='CMR+', tag='CMR_')
dataFormatType.RAW = dataFormatType._CF_enumeration.addEnumeration(unicode_value='RAW', tag='RAW')
dataFormatType._InitializeFacetMap(dataFormatType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'dataFormatType', dataFormatType)
_module_typeBindings.dataFormatType = dataFormatType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}EncodingType
class EncodingType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EncodingType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 58, 4)
    _Documentation = None
EncodingType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EncodingType, enum_prefix=None)
EncodingType.none = EncodingType._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
EncodingType.base64 = EncodingType._CF_enumeration.addEnumeration(unicode_value='base64', tag='base64')
EncodingType._InitializeFacetMap(EncodingType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EncodingType', EncodingType)
_module_typeBindings.EncodingType = EncodingType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}antennaReferencePointType
class antennaReferencePointType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'antennaReferencePointType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 73, 4)
    _Documentation = None
antennaReferencePointType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=antennaReferencePointType, enum_prefix=None)
antennaReferencePointType.BPA = antennaReferencePointType._CF_enumeration.addEnumeration(unicode_value='BPA', tag='BPA')
antennaReferencePointType.BCR = antennaReferencePointType._CF_enumeration.addEnumeration(unicode_value='BCR', tag='BCR')
antennaReferencePointType.BGP = antennaReferencePointType._CF_enumeration.addEnumeration(unicode_value='BGP', tag='BGP')
antennaReferencePointType.TPA = antennaReferencePointType._CF_enumeration.addEnumeration(unicode_value='TPA', tag='TPA')
antennaReferencePointType.TCR = antennaReferencePointType._CF_enumeration.addEnumeration(unicode_value='TCR', tag='TCR')
antennaReferencePointType.TGR = antennaReferencePointType._CF_enumeration.addEnumeration(unicode_value='TGR', tag='TGR')
antennaReferencePointType._InitializeFacetMap(antennaReferencePointType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'antennaReferencePointType', antennaReferencePointType)
_module_typeBindings.antennaReferencePointType = antennaReferencePointType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}satelliteSystemTypeOfType
class satelliteSystemTypeOfType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'satelliteSystemTypeOfType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 86, 4)
    _Documentation = None
satelliteSystemTypeOfType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=satelliteSystemTypeOfType, enum_prefix=None)
satelliteSystemTypeOfType.na = satelliteSystemTypeOfType._CF_enumeration.addEnumeration(unicode_value='n/a', tag='na')
satelliteSystemTypeOfType.GPS = satelliteSystemTypeOfType._CF_enumeration.addEnumeration(unicode_value='GPS', tag='GPS')
satelliteSystemTypeOfType.GLONASS = satelliteSystemTypeOfType._CF_enumeration.addEnumeration(unicode_value='GLONASS', tag='GLONASS')
satelliteSystemTypeOfType.GPSGLONASS = satelliteSystemTypeOfType._CF_enumeration.addEnumeration(unicode_value='GPS+GLONASS', tag='GPSGLONASS')
satelliteSystemTypeOfType._InitializeFacetMap(satelliteSystemTypeOfType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'satelliteSystemTypeOfType', satelliteSystemTypeOfType)
_module_typeBindings.satelliteSystemTypeOfType = satelliteSystemTypeOfType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}instrumentationTypeOfType
class instrumentationTypeOfType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'instrumentationTypeOfType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 95, 4)
    _Documentation = None
instrumentationTypeOfType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=instrumentationTypeOfType, enum_prefix=None)
instrumentationTypeOfType.Absolute_Gravimeter = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Absolute Gravimeter', tag='Absolute_Gravimeter')
instrumentationTypeOfType.Circumzenithal_VUGTK = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Circumzenithal VUGTK', tag='Circumzenithal_VUGTK')
instrumentationTypeOfType.DORIS = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='DORIS', tag='DORIS')
instrumentationTypeOfType.DORISSLR = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='DORIS/SLR', tag='DORISSLR')
instrumentationTypeOfType.DORISSLRVLBI = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='DORIS/SLR/VLBI', tag='DORISSLRVLBI')
instrumentationTypeOfType.Earth_Tide_Gravimeter = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Earth Tide Gravimeter', tag='Earth_Tide_Gravimeter')
instrumentationTypeOfType.GLONASS_receiver = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='GLONASS receiver', tag='GLONASS_receiver')
instrumentationTypeOfType.WLRS = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='WLRS', tag='WLRS')
instrumentationTypeOfType.PRARE = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='PRARE', tag='PRARE')
instrumentationTypeOfType.DORISSLRVLBI_ = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='DORIS/SLR/VLBI', tag='DORISSLRVLBI_')
instrumentationTypeOfType.Earth_Tide_Gravimeter_ = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Earth Tide Gravimeter', tag='Earth_Tide_Gravimeter_')
instrumentationTypeOfType.GLONASS_receiver_ = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='GLONASS receiver', tag='GLONASS_receiver_')
instrumentationTypeOfType.WLRS_ = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='WLRS', tag='WLRS_')
instrumentationTypeOfType.PRARE_ = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='PRARE', tag='PRARE_')
instrumentationTypeOfType.Radio_Telescope = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Radio Telescope', tag='Radio_Telescope')
instrumentationTypeOfType.SATREF = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='SATREF', tag='SATREF')
instrumentationTypeOfType.Siesmometer = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Siesmometer', tag='Siesmometer')
instrumentationTypeOfType.SLP = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='SLP', tag='SLP')
instrumentationTypeOfType.Satellite_Laser_Ranging = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Satellite Laser Ranging', tag='Satellite_Laser_Ranging')
instrumentationTypeOfType.SLRVLBI = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='SLR/VLBI', tag='SLRVLBI')
instrumentationTypeOfType.Very_Large_Baseline_Interferometry = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Very Large Baseline Interferometry', tag='Very_Large_Baseline_Interferometry')
instrumentationTypeOfType.Superconducting_Gravimeter = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Superconducting Gravimeter', tag='Superconducting_Gravimeter')
instrumentationTypeOfType.Transportable_Integrated_Geodetic_Observatory = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Transportable Integrated Geodetic Observatory', tag='Transportable_Integrated_Geodetic_Observatory')
instrumentationTypeOfType.Tidal_Gravimeter = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Tidal Gravimeter', tag='Tidal_Gravimeter')
instrumentationTypeOfType.Very_Broad_Band_Seismograph = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Very Broad Band Seismograph', tag='Very_Broad_Band_Seismograph')
instrumentationTypeOfType.Campaign_Mode_GPS = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Campaign Mode GPS', tag='Campaign_Mode_GPS')
instrumentationTypeOfType.Continuously_Operating_GPS = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Continuously Operating GPS', tag='Continuously_Operating_GPS')
instrumentationTypeOfType.Transit = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Transit', tag='Transit')
instrumentationTypeOfType.Not_Availableunknown = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='Not Available/unknown', tag='Not_Availableunknown')
instrumentationTypeOfType.emptyString = instrumentationTypeOfType._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
instrumentationTypeOfType._InitializeFacetMap(instrumentationTypeOfType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'instrumentationTypeOfType', instrumentationTypeOfType)
_module_typeBindings.instrumentationTypeOfType = instrumentationTypeOfType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}statusType
class statusType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'statusType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 129, 4)
    _Documentation = None
statusType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=statusType, enum_prefix=None)
statusType.na = statusType._CF_enumeration.addEnumeration(unicode_value='n/a', tag='na')
statusType.ACTIVE = statusType._CF_enumeration.addEnumeration(unicode_value='ACTIVE', tag='ACTIVE')
statusType.MOBILE = statusType._CF_enumeration.addEnumeration(unicode_value='MOBILE', tag='MOBILE')
statusType.PERMANENT = statusType._CF_enumeration.addEnumeration(unicode_value='PERMANENT', tag='PERMANENT')
statusType.REMOVED = statusType._CF_enumeration.addEnumeration(unicode_value='REMOVED', tag='REMOVED')
statusType.emptyString = statusType._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
statusType._InitializeFacetMap(statusType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'statusType', statusType)
_module_typeBindings.statusType = statusType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}standardTypeOfType
class standardTypeOfType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'standardTypeOfType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 140, 4)
    _Documentation = None
standardTypeOfType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=standardTypeOfType, enum_prefix=None)
standardTypeOfType.none = standardTypeOfType._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
standardTypeOfType.H_MASER = standardTypeOfType._CF_enumeration.addEnumeration(unicode_value='H-MASER', tag='H_MASER')
standardTypeOfType.CESIUM = standardTypeOfType._CF_enumeration.addEnumeration(unicode_value='CESIUM', tag='CESIUM')
standardTypeOfType.QUARTZ = standardTypeOfType._CF_enumeration.addEnumeration(unicode_value='QUARTZ', tag='QUARTZ')
standardTypeOfType.INTERNAL = standardTypeOfType._CF_enumeration.addEnumeration(unicode_value='INTERNAL', tag='INTERNAL')
standardTypeOfType.RUBIDIUM = standardTypeOfType._CF_enumeration.addEnumeration(unicode_value='RUBIDIUM', tag='RUBIDIUM')
standardTypeOfType.emptyString = standardTypeOfType._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
standardTypeOfType._InitializeFacetMap(standardTypeOfType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'standardTypeOfType', standardTypeOfType)
_module_typeBindings.standardTypeOfType = standardTypeOfType

# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 125, 16)
    _Documentation = None
STD_ANON._CF_fractionDigits = pyxb.binding.facets.CF_fractionDigits(value=pyxb.binding.datatypes.nonNegativeInteger(3))
STD_ANON._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(6))
STD_ANON._InitializeFacetMap(STD_ANON._CF_fractionDigits,
   STD_ANON._CF_totalDigits)
_module_typeBindings.STD_ANON = STD_ANON

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 162, 16)
    _Documentation = None
STD_ANON_._CF_fractionDigits = pyxb.binding.facets.CF_fractionDigits(value=pyxb.binding.datatypes.nonNegativeInteger(4))
STD_ANON_._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(6))
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_fractionDigits,
   STD_ANON_._CF_totalDigits)
_module_typeBindings.STD_ANON_ = STD_ANON_

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 306, 16)
    _Documentation = None
STD_ANON_2._CF_fractionDigits = pyxb.binding.facets.CF_fractionDigits(value=pyxb.binding.datatypes.nonNegativeInteger(1))
STD_ANON_2._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(4))
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_fractionDigits,
   STD_ANON_2._CF_totalDigits)
_module_typeBindings.STD_ANON_2 = STD_ANON_2

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 321, 16)
    _Documentation = None
STD_ANON_3._CF_fractionDigits = pyxb.binding.facets.CF_fractionDigits(value=pyxb.binding.datatypes.nonNegativeInteger(0))
STD_ANON_3._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(6))
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_fractionDigits,
   STD_ANON_3._CF_totalDigits)
_module_typeBindings.STD_ANON_3 = STD_ANON_3

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}geodeticMonumentTypeOfType
class geodeticMonumentTypeOfType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'geodeticMonumentTypeOfType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 9, 4)
    _Documentation = None
geodeticMonumentTypeOfType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=geodeticMonumentTypeOfType, enum_prefix=None)
geodeticMonumentTypeOfType.pillar = geodeticMonumentTypeOfType._CF_enumeration.addEnumeration(unicode_value='pillar', tag='pillar')
geodeticMonumentTypeOfType.brass_plate = geodeticMonumentTypeOfType._CF_enumeration.addEnumeration(unicode_value='brass plate', tag='brass_plate')
geodeticMonumentTypeOfType.steel_mast = geodeticMonumentTypeOfType._CF_enumeration.addEnumeration(unicode_value='steel mast', tag='steel_mast')
geodeticMonumentTypeOfType.shallow_rod__braced_antenna_mount = geodeticMonumentTypeOfType._CF_enumeration.addEnumeration(unicode_value='shallow rod / braced antenna mount', tag='shallow_rod__braced_antenna_mount')
geodeticMonumentTypeOfType.removeable_tripod__concrete_pad = geodeticMonumentTypeOfType._CF_enumeration.addEnumeration(unicode_value='removeable tripod / concrete pad', tag='removeable_tripod__concrete_pad')
geodeticMonumentTypeOfType.WyattAgnew_drilled_braced = geodeticMonumentTypeOfType._CF_enumeration.addEnumeration(unicode_value='Wyatt/Agnew drilled-braced', tag='WyattAgnew_drilled_braced')
geodeticMonumentTypeOfType.WyattAgnew_driven_braced = geodeticMonumentTypeOfType._CF_enumeration.addEnumeration(unicode_value='Wyatt/Agnew driven braced', tag='WyattAgnew_driven_braced')
geodeticMonumentTypeOfType.rock_pinmetal_tripod = geodeticMonumentTypeOfType._CF_enumeration.addEnumeration(unicode_value='rock-pin/metal-tripod', tag='rock_pinmetal_tripod')
geodeticMonumentTypeOfType.rock_pin = geodeticMonumentTypeOfType._CF_enumeration.addEnumeration(unicode_value='rock-pin', tag='rock_pin')
geodeticMonumentTypeOfType.glued_rod = geodeticMonumentTypeOfType._CF_enumeration.addEnumeration(unicode_value='glued-rod', tag='glued_rod')
geodeticMonumentTypeOfType.wall = geodeticMonumentTypeOfType._CF_enumeration.addEnumeration(unicode_value='wall', tag='wall')
geodeticMonumentTypeOfType._InitializeFacetMap(geodeticMonumentTypeOfType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'geodeticMonumentTypeOfType', geodeticMonumentTypeOfType)
_module_typeBindings.geodeticMonumentTypeOfType = geodeticMonumentTypeOfType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}geodeticMonumentFoundationTypeOfType
class geodeticMonumentFoundationTypeOfType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'geodeticMonumentFoundationTypeOfType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 24, 4)
    _Documentation = None
geodeticMonumentFoundationTypeOfType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=geodeticMonumentFoundationTypeOfType, enum_prefix=None)
geodeticMonumentFoundationTypeOfType.roof = geodeticMonumentFoundationTypeOfType._CF_enumeration.addEnumeration(unicode_value='roof', tag='roof')
geodeticMonumentFoundationTypeOfType.concrete_block = geodeticMonumentFoundationTypeOfType._CF_enumeration.addEnumeration(unicode_value='concrete block', tag='concrete_block')
geodeticMonumentFoundationTypeOfType.steel_rods = geodeticMonumentFoundationTypeOfType._CF_enumeration.addEnumeration(unicode_value='steel rods', tag='steel_rods')
geodeticMonumentFoundationTypeOfType._InitializeFacetMap(geodeticMonumentFoundationTypeOfType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'geodeticMonumentFoundationTypeOfType', geodeticMonumentFoundationTypeOfType)
_module_typeBindings.geodeticMonumentFoundationTypeOfType = geodeticMonumentFoundationTypeOfType

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 58, 24)
    _Documentation = None
STD_ANON_4._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(4))
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_length)
_module_typeBindings.STD_ANON_4 = STD_ANON_4

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 72, 24)
    _Documentation = None
STD_ANON_5._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(6))
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_length)
_module_typeBindings.STD_ANON_5 = STD_ANON_5

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 122, 24)
    _Documentation = None
STD_ANON_6._CF_fractionDigits = pyxb.binding.facets.CF_fractionDigits(value=pyxb.binding.datatypes.nonNegativeInteger(4))
STD_ANON_6._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(6))
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_fractionDigits,
   STD_ANON_6._CF_totalDigits)
_module_typeBindings.STD_ANON_6 = STD_ANON_6

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 134, 24)
    _Documentation = None
STD_ANON_7._CF_fractionDigits = pyxb.binding.facets.CF_fractionDigits(value=pyxb.binding.datatypes.nonNegativeInteger(4))
STD_ANON_7._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(6))
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_fractionDigits,
   STD_ANON_7._CF_totalDigits)
_module_typeBindings.STD_ANON_7 = STD_ANON_7

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}NodeConstraintEnumeration
class NodeConstraintEnumeration (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NodeConstraintEnumeration')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 366, 4)
    _Documentation = None
NodeConstraintEnumeration._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NodeConstraintEnumeration, enum_prefix=None)
NodeConstraintEnumeration.Free = NodeConstraintEnumeration._CF_enumeration.addEnumeration(unicode_value='Free', tag='Free')
NodeConstraintEnumeration.Constrained = NodeConstraintEnumeration._CF_enumeration.addEnumeration(unicode_value='Constrained', tag='Constrained')
NodeConstraintEnumeration.Constrained_Vertical = NodeConstraintEnumeration._CF_enumeration.addEnumeration(unicode_value='Constrained Vertical', tag='Constrained_Vertical')
NodeConstraintEnumeration.Constrained_Horizontal = NodeConstraintEnumeration._CF_enumeration.addEnumeration(unicode_value='Constrained Horizontal', tag='Constrained_Horizontal')
NodeConstraintEnumeration._InitializeFacetMap(NodeConstraintEnumeration._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'NodeConstraintEnumeration', NodeConstraintEnumeration)
_module_typeBindings.NodeConstraintEnumeration = NodeConstraintEnumeration

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}PositionDimensionEnumeration
class PositionDimensionEnumeration (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PositionDimensionEnumeration')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 375, 4)
    _Documentation = None
PositionDimensionEnumeration._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PositionDimensionEnumeration, enum_prefix=None)
PositionDimensionEnumeration.n1 = PositionDimensionEnumeration._CF_enumeration.addEnumeration(unicode_value='1', tag='n1')
PositionDimensionEnumeration.n2 = PositionDimensionEnumeration._CF_enumeration.addEnumeration(unicode_value='2', tag='n2')
PositionDimensionEnumeration.n3 = PositionDimensionEnumeration._CF_enumeration.addEnumeration(unicode_value='3', tag='n3')
PositionDimensionEnumeration.n4 = PositionDimensionEnumeration._CF_enumeration.addEnumeration(unicode_value='4', tag='n4')
PositionDimensionEnumeration._InitializeFacetMap(PositionDimensionEnumeration._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PositionDimensionEnumeration', PositionDimensionEnumeration)
_module_typeBindings.PositionDimensionEnumeration = PositionDimensionEnumeration

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}baseLocalInterferenceType
class baseLocalInterferenceType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'baseLocalInterferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 40, 4)
    _Documentation = None
baseLocalInterferenceType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=baseLocalInterferenceType, enum_prefix=None)
baseLocalInterferenceType.TV = baseLocalInterferenceType._CF_enumeration.addEnumeration(unicode_value='TV', tag='TV')
baseLocalInterferenceType.CELL_PHONE = baseLocalInterferenceType._CF_enumeration.addEnumeration(unicode_value='CELL PHONE', tag='CELL_PHONE')
baseLocalInterferenceType.ANTENNA = baseLocalInterferenceType._CF_enumeration.addEnumeration(unicode_value='ANTENNA', tag='ANTENNA')
baseLocalInterferenceType.RADAR = baseLocalInterferenceType._CF_enumeration.addEnumeration(unicode_value='RADAR', tag='RADAR')
baseLocalInterferenceType.METAL_ROOF = baseLocalInterferenceType._CF_enumeration.addEnumeration(unicode_value='METAL ROOF', tag='METAL_ROOF')
baseLocalInterferenceType.DOME = baseLocalInterferenceType._CF_enumeration.addEnumeration(unicode_value='DOME', tag='DOME')
baseLocalInterferenceType.VLBI_ANTENNA = baseLocalInterferenceType._CF_enumeration.addEnumeration(unicode_value='VLBI ANTENNA', tag='VLBI_ANTENNA')
baseLocalInterferenceType.TREES = baseLocalInterferenceType._CF_enumeration.addEnumeration(unicode_value='TREES', tag='TREES')
baseLocalInterferenceType.BUILDINGS = baseLocalInterferenceType._CF_enumeration.addEnumeration(unicode_value='BUILDINGS', tag='BUILDINGS')
baseLocalInterferenceType._InitializeFacetMap(baseLocalInterferenceType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'baseLocalInterferenceType', baseLocalInterferenceType)
_module_typeBindings.baseLocalInterferenceType = baseLocalInterferenceType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}geologicCharacteristicType
class geologicCharacteristicType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'geologicCharacteristicType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 36, 4)
    _Documentation = None
geologicCharacteristicType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=geologicCharacteristicType, enum_prefix=None)
geologicCharacteristicType.BEDROCK = geologicCharacteristicType._CF_enumeration.addEnumeration(unicode_value='BEDROCK', tag='BEDROCK')
geologicCharacteristicType.Bedrock = geologicCharacteristicType._CF_enumeration.addEnumeration(unicode_value='Bedrock', tag='Bedrock')
geologicCharacteristicType.CLAY = geologicCharacteristicType._CF_enumeration.addEnumeration(unicode_value='CLAY', tag='CLAY')
geologicCharacteristicType.Clay = geologicCharacteristicType._CF_enumeration.addEnumeration(unicode_value='Clay', tag='Clay')
geologicCharacteristicType.GRAVEL = geologicCharacteristicType._CF_enumeration.addEnumeration(unicode_value='GRAVEL', tag='GRAVEL')
geologicCharacteristicType.Gravel = geologicCharacteristicType._CF_enumeration.addEnumeration(unicode_value='Gravel', tag='Gravel')
geologicCharacteristicType.SAND = geologicCharacteristicType._CF_enumeration.addEnumeration(unicode_value='SAND', tag='SAND')
geologicCharacteristicType.Sand = geologicCharacteristicType._CF_enumeration.addEnumeration(unicode_value='Sand', tag='Sand')
geologicCharacteristicType.SEDIMENTS = geologicCharacteristicType._CF_enumeration.addEnumeration(unicode_value='SEDIMENTS', tag='SEDIMENTS')
geologicCharacteristicType.Sediments = geologicCharacteristicType._CF_enumeration.addEnumeration(unicode_value='Sediments', tag='Sediments')
geologicCharacteristicType.CONGLOMERATE = geologicCharacteristicType._CF_enumeration.addEnumeration(unicode_value='CONGLOMERATE', tag='CONGLOMERATE')
geologicCharacteristicType.Conglomerate = geologicCharacteristicType._CF_enumeration.addEnumeration(unicode_value='Conglomerate', tag='Conglomerate')
geologicCharacteristicType.emptyString = geologicCharacteristicType._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
geologicCharacteristicType._InitializeFacetMap(geologicCharacteristicType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'geologicCharacteristicType', geologicCharacteristicType)
_module_typeBindings.geologicCharacteristicType = geologicCharacteristicType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}monumentDescriptionTypeOfType
class monumentDescriptionTypeOfType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'monumentDescriptionTypeOfType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 53, 4)
    _Documentation = None
monumentDescriptionTypeOfType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=monumentDescriptionTypeOfType, enum_prefix=None)
monumentDescriptionTypeOfType.pillar = monumentDescriptionTypeOfType._CF_enumeration.addEnumeration(unicode_value='pillar', tag='pillar')
monumentDescriptionTypeOfType.brass_plate = monumentDescriptionTypeOfType._CF_enumeration.addEnumeration(unicode_value='brass plate', tag='brass_plate')
monumentDescriptionTypeOfType.steel_mast = monumentDescriptionTypeOfType._CF_enumeration.addEnumeration(unicode_value='steel mast', tag='steel_mast')
monumentDescriptionTypeOfType.shallow_rodbraced_antenna_mount = monumentDescriptionTypeOfType._CF_enumeration.addEnumeration(unicode_value='shallow rod/braced antenna mount', tag='shallow_rodbraced_antenna_mount')
monumentDescriptionTypeOfType.removeable_tripod__concrete_pad = monumentDescriptionTypeOfType._CF_enumeration.addEnumeration(unicode_value='removeable tripod / concrete pad', tag='removeable_tripod__concrete_pad')
monumentDescriptionTypeOfType.WyattAgnew_drilled_braced = monumentDescriptionTypeOfType._CF_enumeration.addEnumeration(unicode_value='Wyatt/Agnew drilled-braced', tag='WyattAgnew_drilled_braced')
monumentDescriptionTypeOfType.WyattAgnew_driven_braced = monumentDescriptionTypeOfType._CF_enumeration.addEnumeration(unicode_value='Wyatt/Agnew driven braced', tag='WyattAgnew_driven_braced')
monumentDescriptionTypeOfType.rock_pinmetal_tripod = monumentDescriptionTypeOfType._CF_enumeration.addEnumeration(unicode_value='rock-pin/metal-tripod', tag='rock_pinmetal_tripod')
monumentDescriptionTypeOfType.rock_pin = monumentDescriptionTypeOfType._CF_enumeration.addEnumeration(unicode_value='rock-pin', tag='rock_pin')
monumentDescriptionTypeOfType.glued_rod = monumentDescriptionTypeOfType._CF_enumeration.addEnumeration(unicode_value='glued-rod', tag='glued_rod')
monumentDescriptionTypeOfType.wall = monumentDescriptionTypeOfType._CF_enumeration.addEnumeration(unicode_value='wall', tag='wall')
monumentDescriptionTypeOfType._InitializeFacetMap(monumentDescriptionTypeOfType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'monumentDescriptionTypeOfType', monumentDescriptionTypeOfType)
_module_typeBindings.monumentDescriptionTypeOfType = monumentDescriptionTypeOfType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}bedrockTypeOfType
class bedrockTypeOfType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bedrockTypeOfType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 68, 4)
    _Documentation = None
bedrockTypeOfType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=bedrockTypeOfType, enum_prefix=None)
bedrockTypeOfType.IGNEOUS = bedrockTypeOfType._CF_enumeration.addEnumeration(unicode_value='IGNEOUS', tag='IGNEOUS')
bedrockTypeOfType.Igneous = bedrockTypeOfType._CF_enumeration.addEnumeration(unicode_value='Igneous', tag='Igneous')
bedrockTypeOfType.Metaigneous = bedrockTypeOfType._CF_enumeration.addEnumeration(unicode_value='Metaigneous', tag='Metaigneous')
bedrockTypeOfType.METAMORPHIC = bedrockTypeOfType._CF_enumeration.addEnumeration(unicode_value='METAMORPHIC', tag='METAMORPHIC')
bedrockTypeOfType.Metamorphic = bedrockTypeOfType._CF_enumeration.addEnumeration(unicode_value='Metamorphic', tag='Metamorphic')
bedrockTypeOfType.GRANITE = bedrockTypeOfType._CF_enumeration.addEnumeration(unicode_value='GRANITE', tag='GRANITE')
bedrockTypeOfType.Granite = bedrockTypeOfType._CF_enumeration.addEnumeration(unicode_value='Granite', tag='Granite')
bedrockTypeOfType.SEDIMENTARY = bedrockTypeOfType._CF_enumeration.addEnumeration(unicode_value='SEDIMENTARY', tag='SEDIMENTARY')
bedrockTypeOfType.Sedimentary = bedrockTypeOfType._CF_enumeration.addEnumeration(unicode_value='Sedimentary', tag='Sedimentary')
bedrockTypeOfType.CONGLOMERATE = bedrockTypeOfType._CF_enumeration.addEnumeration(unicode_value='CONGLOMERATE', tag='CONGLOMERATE')
bedrockTypeOfType.Conglomerate = bedrockTypeOfType._CF_enumeration.addEnumeration(unicode_value='Conglomerate', tag='Conglomerate')
bedrockTypeOfType.NA = bedrockTypeOfType._CF_enumeration.addEnumeration(unicode_value='N/A', tag='NA')
bedrockTypeOfType.emptyString = bedrockTypeOfType._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
bedrockTypeOfType._InitializeFacetMap(bedrockTypeOfType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'bedrockTypeOfType', bedrockTypeOfType)
_module_typeBindings.bedrockTypeOfType = bedrockTypeOfType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}bedrockConditionsType
class bedrockConditionsType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bedrockConditionsType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 85, 4)
    _Documentation = None
bedrockConditionsType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=bedrockConditionsType, enum_prefix=None)
bedrockConditionsType.FRESH = bedrockConditionsType._CF_enumeration.addEnumeration(unicode_value='FRESH', tag='FRESH')
bedrockConditionsType.Fresh = bedrockConditionsType._CF_enumeration.addEnumeration(unicode_value='Fresh', tag='Fresh')
bedrockConditionsType.JOINTED = bedrockConditionsType._CF_enumeration.addEnumeration(unicode_value='JOINTED', tag='JOINTED')
bedrockConditionsType.Jointed = bedrockConditionsType._CF_enumeration.addEnumeration(unicode_value='Jointed', tag='Jointed')
bedrockConditionsType.FRACTURED = bedrockConditionsType._CF_enumeration.addEnumeration(unicode_value='FRACTURED', tag='FRACTURED')
bedrockConditionsType.Fractured = bedrockConditionsType._CF_enumeration.addEnumeration(unicode_value='Fractured', tag='Fractured')
bedrockConditionsType.WEATHERED = bedrockConditionsType._CF_enumeration.addEnumeration(unicode_value='WEATHERED', tag='WEATHERED')
bedrockConditionsType.Weathered = bedrockConditionsType._CF_enumeration.addEnumeration(unicode_value='Weathered', tag='Weathered')
bedrockConditionsType.NA = bedrockConditionsType._CF_enumeration.addEnumeration(unicode_value='N/A', tag='NA')
bedrockConditionsType.emptyString = bedrockConditionsType._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
bedrockConditionsType._InitializeFacetMap(bedrockConditionsType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'bedrockConditionsType', bedrockConditionsType)
_module_typeBindings.bedrockConditionsType = bedrockConditionsType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}fractureSpacingTypeOfType
class fractureSpacingTypeOfType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fractureSpacingTypeOfType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 99, 4)
    _Documentation = None
fractureSpacingTypeOfType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=fractureSpacingTypeOfType, enum_prefix=None)
fractureSpacingTypeOfType.n1_10cm = fractureSpacingTypeOfType._CF_enumeration.addEnumeration(unicode_value='1-10cm', tag='n1_10cm')
fractureSpacingTypeOfType.n11_50cm = fractureSpacingTypeOfType._CF_enumeration.addEnumeration(unicode_value='11-50cm', tag='n11_50cm')
fractureSpacingTypeOfType.n51_200cm = fractureSpacingTypeOfType._CF_enumeration.addEnumeration(unicode_value='51-200cm', tag='n51_200cm')
fractureSpacingTypeOfType.over_200cm = fractureSpacingTypeOfType._CF_enumeration.addEnumeration(unicode_value='over 200cm', tag='over_200cm')
fractureSpacingTypeOfType.NA = fractureSpacingTypeOfType._CF_enumeration.addEnumeration(unicode_value='N/A', tag='NA')
fractureSpacingTypeOfType.emptyString = fractureSpacingTypeOfType._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
fractureSpacingTypeOfType._InitializeFacetMap(fractureSpacingTypeOfType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'fractureSpacingTypeOfType', fractureSpacingTypeOfType)
_module_typeBindings.fractureSpacingTypeOfType = fractureSpacingTypeOfType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}faultZonesNearbyType
class faultZonesNearbyType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'faultZonesNearbyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 109, 4)
    _Documentation = None
faultZonesNearbyType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=faultZonesNearbyType, enum_prefix=None)
faultZonesNearbyType.Yes = faultZonesNearbyType._CF_enumeration.addEnumeration(unicode_value='Yes', tag='Yes')
faultZonesNearbyType.No = faultZonesNearbyType._CF_enumeration.addEnumeration(unicode_value='No', tag='No')
faultZonesNearbyType.Name_of_Zone = faultZonesNearbyType._CF_enumeration.addEnumeration(unicode_value='Name_of_Zone', tag='Name_of_Zone')
faultZonesNearbyType.emptyString = faultZonesNearbyType._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
faultZonesNearbyType._InitializeFacetMap(faultZonesNearbyType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'faultZonesNearbyType', faultZonesNearbyType)
_module_typeBindings.faultZonesNearbyType = faultZonesNearbyType

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}tectonicPlateTypeOfTypes
class tectonicPlateTypeOfTypes (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'tectonicPlateTypeOfTypes')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 125, 4)
    _Documentation = None
tectonicPlateTypeOfTypes._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=tectonicPlateTypeOfTypes, enum_prefix=None)
tectonicPlateTypeOfTypes.African = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='African', tag='African')
tectonicPlateTypeOfTypes.African_IndianAustralia = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='African Indian/Australia', tag='African_IndianAustralia')
tectonicPlateTypeOfTypes.African_Eurasian = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='African Eurasian', tag='African_Eurasian')
tectonicPlateTypeOfTypes.Antarctic = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='Antarctic', tag='Antarctic')
tectonicPlateTypeOfTypes.Arabian = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='Arabian', tag='Arabian')
tectonicPlateTypeOfTypes.Caribbean = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='Caribbean', tag='Caribbean')
tectonicPlateTypeOfTypes.Cocos = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='Cocos', tag='Cocos')
tectonicPlateTypeOfTypes.Eurasian = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='Eurasian', tag='Eurasian')
tectonicPlateTypeOfTypes.IndianAustralian = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='Indian/Australian', tag='IndianAustralian')
tectonicPlateTypeOfTypes.Nazca = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='Nazca', tag='Nazca')
tectonicPlateTypeOfTypes.North_America = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='North America', tag='North_America')
tectonicPlateTypeOfTypes.North_America_Pacific = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='North America Pacific', tag='North_America_Pacific')
tectonicPlateTypeOfTypes.Pacific = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='Pacific', tag='Pacific')
tectonicPlateTypeOfTypes.Phillipine = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='Phillipine', tag='Phillipine')
tectonicPlateTypeOfTypes.South_American = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='South American', tag='South_American')
tectonicPlateTypeOfTypes.South_American_African = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='South American African', tag='South_American_African')
tectonicPlateTypeOfTypes.Juan_De_Fuca = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='Juan De Fuca', tag='Juan_De_Fuca')
tectonicPlateTypeOfTypes.Scotia = tectonicPlateTypeOfTypes._CF_enumeration.addEnumeration(unicode_value='Scotia', tag='Scotia')
tectonicPlateTypeOfTypes._InitializeFacetMap(tectonicPlateTypeOfTypes._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'tectonicPlateTypeOfTypes', tectonicPlateTypeOfTypes)
_module_typeBindings.tectonicPlateTypeOfTypes = tectonicPlateTypeOfTypes

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 181, 16)
    _Documentation = None
STD_ANON_8._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(1))
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_totalDigits)
_module_typeBindings.STD_ANON_8 = STD_ANON_8

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 191, 16)
    _Documentation = None
STD_ANON_9._CF_totalDigits = pyxb.binding.facets.CF_totalDigits(value=pyxb.binding.datatypes.positiveInteger(1))
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_totalDigits)
_module_typeBindings.STD_ANON_9 = STD_ANON_9

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 166, 24)
    _Documentation = None
STD_ANON_10._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(4))
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_length)
_module_typeBindings.STD_ANON_10 = STD_ANON_10

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}ConfidenceTypeEnumeration
class ConfidenceTypeEnumeration (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConfidenceTypeEnumeration')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 13, 4)
    _Documentation = None
ConfidenceTypeEnumeration._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ConfidenceTypeEnumeration, enum_prefix=None)
ConfidenceTypeEnumeration.n1_sigma = ConfidenceTypeEnumeration._CF_enumeration.addEnumeration(unicode_value='1 sigma', tag='n1_sigma')
ConfidenceTypeEnumeration.n2_sigma = ConfidenceTypeEnumeration._CF_enumeration.addEnumeration(unicode_value='2 sigma', tag='n2_sigma')
ConfidenceTypeEnumeration.n3_sigma = ConfidenceTypeEnumeration._CF_enumeration.addEnumeration(unicode_value='3 sigma', tag='n3_sigma')
ConfidenceTypeEnumeration.n39_4 = ConfidenceTypeEnumeration._CF_enumeration.addEnumeration(unicode_value='39.4%', tag='n39_4')
ConfidenceTypeEnumeration.n86_5 = ConfidenceTypeEnumeration._CF_enumeration.addEnumeration(unicode_value='86.5%', tag='n86_5')
ConfidenceTypeEnumeration.n95 = ConfidenceTypeEnumeration._CF_enumeration.addEnumeration(unicode_value='95%', tag='n95')
ConfidenceTypeEnumeration.n98_9 = ConfidenceTypeEnumeration._CF_enumeration.addEnumeration(unicode_value='98.9%', tag='n98_9')
ConfidenceTypeEnumeration.unknown = ConfidenceTypeEnumeration._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
ConfidenceTypeEnumeration._InitializeFacetMap(ConfidenceTypeEnumeration._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ConfidenceTypeEnumeration', ConfidenceTypeEnumeration)
_module_typeBindings.ConfidenceTypeEnumeration = ConfidenceTypeEnumeration

# Union simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}ValueTypeUnion
# superclasses pyxb.binding.datatypes.anySimpleType
class ValueTypeUnion (pyxb.binding.basis.STD_union):

    """Simple type that is a union of pyxb.bundles.opengis.gml_3_2.doubleList, pyxb.binding.datatypes.string."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValueTypeUnion')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 40, 4)
    _Documentation = None

    _MemberTypes = ( pyxb.bundles.opengis.gml_3_2.doubleList, pyxb.binding.datatypes.string, )
ValueTypeUnion._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ValueTypeUnion)
ValueTypeUnion._CF_pattern = pyxb.binding.facets.CF_pattern()
ValueTypeUnion._InitializeFacetMap(ValueTypeUnion._CF_enumeration,
   ValueTypeUnion._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ValueTypeUnion', ValueTypeUnion)
_module_typeBindings.ValueTypeUnion = ValueTypeUnion

# Atomic simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}DescriptiveQualityType
class DescriptiveQualityType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DescriptiveQualityType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 57, 4)
    _Documentation = None
DescriptiveQualityType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DescriptiveQualityType, enum_prefix=None)
DescriptiveQualityType.Unknown = DescriptiveQualityType._CF_enumeration.addEnumeration(unicode_value='Unknown', tag='Unknown')
DescriptiveQualityType.Approximate = DescriptiveQualityType._CF_enumeration.addEnumeration(unicode_value='Approximate', tag='Approximate')
DescriptiveQualityType._InitializeFacetMap(DescriptiveQualityType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DescriptiveQualityType', DescriptiveQualityType)
_module_typeBindings.DescriptiveQualityType = DescriptiveQualityType

# List simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}doubleList6
# superclasses pyxb.bundles.opengis.gml_3_2.doubleList
class doubleList6 (pyxb.binding.basis.STD_list):

    """A gml:doubleList of length 6."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'doubleList6')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 95, 4)
    _Documentation = 'A gml:doubleList of length 6.'

    _ItemType = pyxb.binding.datatypes.double
doubleList6._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(6))
doubleList6._InitializeFacetMap(doubleList6._CF_length)
Namespace.addCategoryObject('typeBinding', 'doubleList6', doubleList6)
_module_typeBindings.doubleList6 = doubleList6

# List simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}doubleList3
# superclasses pyxb.bundles.opengis.gml_3_2.doubleList
class doubleList3 (pyxb.binding.basis.STD_list):

    """A gml:doubleList of length 3."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'doubleList3')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 127, 4)
    _Documentation = 'A gml:doubleList of length 3.'

    _ItemType = pyxb.binding.datatypes.double
doubleList3._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(3))
doubleList3._InitializeFacetMap(doubleList3._CF_length)
Namespace.addCategoryObject('typeBinding', 'doubleList3', doubleList3)
_module_typeBindings.doubleList3 = doubleList3

# Union simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}ipAddressType
# superclasses pyxb.binding.datatypes.anySimpleType
class ipAddressType (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ipv4AddressType, ipv6AddressType."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ipAddressType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 47, 4)
    _Documentation = None

    _MemberTypes = ( ipv4AddressType, ipv6AddressType, )
ipAddressType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ipAddressType)
ipAddressType._CF_pattern = pyxb.binding.facets.CF_pattern()
ipAddressType._InitializeFacetMap(ipAddressType._CF_enumeration,
   ipAddressType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ipAddressType', ipAddressType)
_module_typeBindings.ipAddressType = ipAddressType

# Union simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}ValueTypes6
# superclasses pyxb.binding.datatypes.anySimpleType
class ValueTypes6 (pyxb.binding.basis.STD_union):

    """Simple type that is a union of doubleList6, pyxb.binding.datatypes.string."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValueTypes6')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 91, 4)
    _Documentation = None

    _MemberTypes = ( doubleList6, pyxb.binding.datatypes.string, )
ValueTypes6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ValueTypes6)
ValueTypes6._CF_pattern = pyxb.binding.facets.CF_pattern()
ValueTypes6._InitializeFacetMap(ValueTypes6._CF_enumeration,
   ValueTypes6._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ValueTypes6', ValueTypes6)
_module_typeBindings.ValueTypes6 = ValueTypes6

# Union simple type: {urn:xml-gov-au:icsm:egeodesy:0.4}ValueTypes3
# superclasses pyxb.binding.datatypes.anySimpleType
class ValueTypes3 (pyxb.binding.basis.STD_union):

    """Simple type that is a union of doubleList3, pyxb.binding.datatypes.string."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValueTypes3')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 123, 4)
    _Documentation = None

    _MemberTypes = ( doubleList3, pyxb.binding.datatypes.string, )
ValueTypes3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ValueTypes3)
ValueTypes3._CF_pattern = pyxb.binding.facets.CF_pattern()
ValueTypes3._InitializeFacetMap(ValueTypes3._CF_enumeration,
   ValueTypes3._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ValueTypes3', ValueTypes3)
_module_typeBindings.ValueTypes3 = ValueTypes3

# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicFeatureType with content type ELEMENT_ONLY
class DynamicFeatureType (pyxb.bundles.opengis.gml_3_2.DynamicFeatureType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicFeatureType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DynamicFeatureType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 59, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.DynamicFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.DynamicFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.DynamicFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element dataSource ({http://www.opengis.net/gml/3.2}dataSource) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element dataSourceReference ({http://www.opengis.net/gml/3.2}dataSourceReference) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DynamicFeatureType = DynamicFeatureType
Namespace.addCategoryObject('typeBinding', 'DynamicFeatureType', DynamicFeatureType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentPropertyType with content type ELEMENT_ONLY
class InstrumentPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InstrumentPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 86, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Instrument uses Python identifier Instrument
    __Instrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Instrument'), 'Instrument', '__urnxml_gov_auicsmegeodesy0_4_InstrumentPropertyType_urnxml_gov_auicsmegeodesy0_4Instrument', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 110, 4), )

    
    Instrument = property(__Instrument.value, __Instrument.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_InstrumentPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_InstrumentPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_InstrumentPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_InstrumentPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_InstrumentPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_InstrumentPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_InstrumentPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_InstrumentPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_InstrumentPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Instrument.name() : __Instrument
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.InstrumentPropertyType = InstrumentPropertyType
Namespace.addCategoryObject('typeBinding', 'InstrumentPropertyType', InstrumentPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractTimeSliceType with content type ELEMENT_ONLY
class AbstractTimeSliceType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractTimeSliceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractTimeSliceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 100, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/gml/3.2}dataSource uses Python identifier dataSource
    __dataSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource'), 'dataSource', '__urnxml_gov_auicsmegeodesy0_4_AbstractTimeSliceType_httpwww_opengis_netgml3_2dataSource', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dynamicFeature.xsd', 17, 1), )

    
    dataSource = property(__dataSource.value, __dataSource.set, None, 'Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data. The remote link attributes of the gml:dataSource element have been deprecated along with its current type.')

    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_AbstractTimeSliceType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __dataSource.name() : __dataSource,
        __validTime.name() : __validTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractTimeSliceType = AbstractTimeSliceType
Namespace.addCategoryObject('typeBinding', 'AbstractTimeSliceType', AbstractTimeSliceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType with content type ELEMENT_ONLY
class InstrumentType (pyxb.bundles.opengis.gml_3_2.AbstractGMLType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InstrumentType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 112, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_InstrumentType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_InstrumentType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_InstrumentType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_InstrumentType_urnxml_gov_auicsmegeodesy0_4type', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __type.name() : __type
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InstrumentType = InstrumentType
Namespace.addCategoryObject('typeBinding', 'InstrumentType', InstrumentType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}countryCodeType with content type SIMPLE
class countryCodeType (pyxb.bundles.opengis.iso19139.v20070417.gco.CodeListValue_Type):
    """
                Three-letter country code (ISO ISO 3166-1 alpha-3, https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)
            """
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'countryCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 123, 4)
    _ElementMap = pyxb.bundles.opengis.iso19139.v20070417.gco.CodeListValue_Type._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.iso19139.v20070417.gco.CodeListValue_Type._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.iso19139.v20070417.gco.CodeListValue_Type
    
    # Attribute codeList inherited from {http://www.isotc211.org/2005/gco}CodeListValue_Type
    
    # Attribute codeListValue inherited from {http://www.isotc211.org/2005/gco}CodeListValue_Type
    
    # Attribute codeSpace inherited from {http://www.isotc211.org/2005/gco}CodeListValue_Type
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.countryCodeType = countryCodeType
Namespace.addCategoryObject('typeBinding', 'countryCodeType', countryCodeType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}agencyPropertyType with content type ELEMENT_ONLY
class agencyPropertyType (pyxb.bundles.opengis.gml_3_2.AbstractGMLType):
    """
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'agencyPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/contact.xsd', 14, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractGMLType
    
    # Element {http://www.isotc211.org/2005/gmd}CI_ResponsibleParty uses Python identifier CI_ResponsibleParty
    __CI_ResponsibleParty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gmd, 'CI_ResponsibleParty'), 'CI_ResponsibleParty', '__urnxml_gov_auicsmegeodesy0_4_agencyPropertyType_httpwww_isotc211_org2005gmdCI_ResponsibleParty', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/iso/19139/20070417/gmd/citation.xsd', 31, 1), )

    
    CI_ResponsibleParty = property(__CI_ResponsibleParty.value, __CI_ResponsibleParty.set, None, None)

    
    # Element {http://www.isotc211.org/2005/gmd}MD_SecurityConstraints uses Python identifier MD_SecurityConstraints
    __MD_SecurityConstraints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gmd, 'MD_SecurityConstraints'), 'MD_SecurityConstraints', '__urnxml_gov_auicsmegeodesy0_4_agencyPropertyType_httpwww_isotc211_org2005gmdMD_SecurityConstraints', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/iso/19139/20070417/gmd/constraints.xsd', 77, 1), )

    
    MD_SecurityConstraints = property(__MD_SecurityConstraints.value, __MD_SecurityConstraints.set, None, None)

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_agencyPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_agencyPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_agencyPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_agencyPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_agencyPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_agencyPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_agencyPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_agencyPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_agencyPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __CI_ResponsibleParty.name() : __CI_ResponsibleParty,
        __MD_SecurityConstraints.name() : __MD_SecurityConstraints
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.agencyPropertyType = agencyPropertyType
Namespace.addCategoryObject('typeBinding', 'agencyPropertyType', agencyPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ntripMountType with content type ELEMENT_ONLY
class ntripMountType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ntripMountType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ntripMountType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 65, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}mountPoint uses Python identifier mountPoint
    __mountPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mountPoint'), 'mountPoint', '__urnxml_gov_auicsmegeodesy0_4_ntripMountType_urnxml_gov_auicsmegeodesy0_4mountPoint', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 67, 12), )

    
    mountPoint = property(__mountPoint.value, __mountPoint.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}sourceID uses Python identifier sourceID
    __sourceID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sourceID'), 'sourceID', '__urnxml_gov_auicsmegeodesy0_4_ntripMountType_urnxml_gov_auicsmegeodesy0_4sourceID', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 68, 12), )

    
    sourceID = property(__sourceID.value, __sourceID.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}countryCode uses Python identifier countryCode
    __countryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'countryCode'), 'countryCode', '__urnxml_gov_auicsmegeodesy0_4_ntripMountType_urnxml_gov_auicsmegeodesy0_4countryCode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 69, 12), )

    
    countryCode = property(__countryCode.value, __countryCode.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}network uses Python identifier network
    __network = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'network'), 'network', '__urnxml_gov_auicsmegeodesy0_4_ntripMountType_urnxml_gov_auicsmegeodesy0_4network', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 70, 12), )

    
    network = property(__network.value, __network.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}allowConnections uses Python identifier allowConnections
    __allowConnections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'allowConnections'), 'allowConnections', '__urnxml_gov_auicsmegeodesy0_4_ntripMountType_urnxml_gov_auicsmegeodesy0_4allowConnections', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 71, 12), )

    
    allowConnections = property(__allowConnections.value, __allowConnections.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}requireAuthentication uses Python identifier requireAuthentication
    __requireAuthentication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'requireAuthentication'), 'requireAuthentication', '__urnxml_gov_auicsmegeodesy0_4_ntripMountType_urnxml_gov_auicsmegeodesy0_4requireAuthentication', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 72, 12), )

    
    requireAuthentication = property(__requireAuthentication.value, __requireAuthentication.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}encryption uses Python identifier encryption
    __encryption = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'encryption'), 'encryption', '__urnxml_gov_auicsmegeodesy0_4_ntripMountType_urnxml_gov_auicsmegeodesy0_4encryption', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 73, 12), )

    
    encryption = property(__encryption.value, __encryption.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}feesApply uses Python identifier feesApply
    __feesApply = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'feesApply'), 'feesApply', '__urnxml_gov_auicsmegeodesy0_4_ntripMountType_urnxml_gov_auicsmegeodesy0_4feesApply', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 74, 12), )

    
    feesApply = property(__feesApply.value, __feesApply.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}bitrate uses Python identifier bitrate
    __bitrate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitrate'), 'bitrate', '__urnxml_gov_auicsmegeodesy0_4_ntripMountType_urnxml_gov_auicsmegeodesy0_4bitrate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 75, 12), )

    
    bitrate = property(__bitrate.value, __bitrate.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}carrierPhase uses Python identifier carrierPhase
    __carrierPhase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'carrierPhase'), 'carrierPhase', '__urnxml_gov_auicsmegeodesy0_4_ntripMountType_urnxml_gov_auicsmegeodesy0_4carrierPhase', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 76, 12), )

    
    carrierPhase = property(__carrierPhase.value, __carrierPhase.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}navSystem uses Python identifier navSystem
    __navSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'navSystem'), 'navSystem', '__urnxml_gov_auicsmegeodesy0_4_ntripMountType_urnxml_gov_auicsmegeodesy0_4navSystem', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 77, 12), )

    
    navSystem = property(__navSystem.value, __navSystem.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}nmea uses Python identifier nmea
    __nmea = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nmea'), 'nmea', '__urnxml_gov_auicsmegeodesy0_4_ntripMountType_urnxml_gov_auicsmegeodesy0_4nmea', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 78, 12), )

    
    nmea = property(__nmea.value, __nmea.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}solution uses Python identifier solution
    __solution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'solution'), 'solution', '__urnxml_gov_auicsmegeodesy0_4_ntripMountType_urnxml_gov_auicsmegeodesy0_4solution', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 79, 12), )

    
    solution = property(__solution.value, __solution.set, None, None)

    _ElementMap.update({
        __mountPoint.name() : __mountPoint,
        __sourceID.name() : __sourceID,
        __countryCode.name() : __countryCode,
        __network.name() : __network,
        __allowConnections.name() : __allowConnections,
        __requireAuthentication.name() : __requireAuthentication,
        __encryption.name() : __encryption,
        __feesApply.name() : __feesApply,
        __bitrate.name() : __bitrate,
        __carrierPhase.name() : __carrierPhase,
        __navSystem.name() : __navSystem,
        __nmea.name() : __nmea,
        __solution.name() : __solution
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ntripMountType = ntripMountType
Namespace.addCategoryObject('typeBinding', 'ntripMountType', ntripMountType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ntripMountsType with content type ELEMENT_ONLY
class ntripMountsType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ntripMountsType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ntripMountsType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 82, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ntripMount uses Python identifier ntripMount
    __ntripMount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ntripMount'), 'ntripMount', '__urnxml_gov_auicsmegeodesy0_4_ntripMountsType_urnxml_gov_auicsmegeodesy0_4ntripMount', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 84, 12), )

    
    ntripMount = property(__ntripMount.value, __ntripMount.set, None, None)

    _ElementMap.update({
        __ntripMount.name() : __ntripMount
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ntripMountsType = ntripMountsType
Namespace.addCategoryObject('typeBinding', 'ntripMountsType', ntripMountsType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}baseDataStreamType with content type ELEMENT_ONLY
class baseDataStreamType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}baseDataStreamType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'baseDataStreamType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 87, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}hostname uses Python identifier hostname
    __hostname = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hostname'), 'hostname', '__urnxml_gov_auicsmegeodesy0_4_baseDataStreamType_urnxml_gov_auicsmegeodesy0_4hostname', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 90, 16), )

    
    hostname = property(__hostname.value, __hostname.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ipAddress uses Python identifier ipAddress
    __ipAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ipAddress'), 'ipAddress', '__urnxml_gov_auicsmegeodesy0_4_baseDataStreamType_urnxml_gov_auicsmegeodesy0_4ipAddress', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 91, 16), )

    
    ipAddress = property(__ipAddress.value, __ipAddress.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}port uses Python identifier port
    __port = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'port'), 'port', '__urnxml_gov_auicsmegeodesy0_4_baseDataStreamType_urnxml_gov_auicsmegeodesy0_4port', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 93, 12), )

    
    port = property(__port.value, __port.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}sampInterval uses Python identifier sampInterval
    __sampInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sampInterval'), 'sampInterval', '__urnxml_gov_auicsmegeodesy0_4_baseDataStreamType_urnxml_gov_auicsmegeodesy0_4sampInterval', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 94, 12), )

    
    sampInterval = property(__sampInterval.value, __sampInterval.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dataFormat uses Python identifier dataFormat
    __dataFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dataFormat'), 'dataFormat', '__urnxml_gov_auicsmegeodesy0_4_baseDataStreamType_urnxml_gov_auicsmegeodesy0_4dataFormat', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 96, 12), )

    
    dataFormat = property(__dataFormat.value, __dataFormat.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ntripMounts uses Python identifier ntripMounts
    __ntripMounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ntripMounts'), 'ntripMounts', '__urnxml_gov_auicsmegeodesy0_4_baseDataStreamType_urnxml_gov_auicsmegeodesy0_4ntripMounts', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 97, 12), )

    
    ntripMounts = property(__ntripMounts.value, __ntripMounts.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'startDate'), 'startDate', '__urnxml_gov_auicsmegeodesy0_4_baseDataStreamType_urnxml_gov_auicsmegeodesy0_4startDate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 98, 12), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    _ElementMap.update({
        __hostname.name() : __hostname,
        __ipAddress.name() : __ipAddress,
        __port.name() : __port,
        __sampInterval.name() : __sampInterval,
        __dataFormat.name() : __dataFormat,
        __ntripMounts.name() : __ntripMounts,
        __startDate.name() : __startDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.baseDataStreamType = baseDataStreamType
Namespace.addCategoryObject('typeBinding', 'baseDataStreamType', baseDataStreamType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}siteStreamType with content type ELEMENT_ONLY
class siteStreamType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}siteStreamType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'siteStreamType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 101, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}agency uses Python identifier agency
    __agency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'agency'), 'agency', '__urnxml_gov_auicsmegeodesy0_4_siteStreamType_urnxml_gov_auicsmegeodesy0_4agency', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 103, 12), )

    
    agency = property(__agency.value, __agency.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dataStream uses Python identifier dataStream
    __dataStream = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dataStream'), 'dataStream', '__urnxml_gov_auicsmegeodesy0_4_siteStreamType_urnxml_gov_auicsmegeodesy0_4dataStream', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 104, 12), )

    
    dataStream = property(__dataStream.value, __dataStream.set, None, None)

    _ElementMap.update({
        __agency.name() : __agency,
        __dataStream.name() : __dataStream
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.siteStreamType = siteStreamType
Namespace.addCategoryObject('typeBinding', 'siteStreamType', siteStreamType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}publishedStreamType with content type ELEMENT_ONLY
class publishedStreamType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}publishedStreamType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'publishedStreamType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 107, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}agency uses Python identifier agency
    __agency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'agency'), 'agency', '__urnxml_gov_auicsmegeodesy0_4_publishedStreamType_urnxml_gov_auicsmegeodesy0_4agency', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 109, 12), )

    
    agency = property(__agency.value, __agency.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dataStream uses Python identifier dataStream
    __dataStream = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dataStream'), 'dataStream', '__urnxml_gov_auicsmegeodesy0_4_publishedStreamType_urnxml_gov_auicsmegeodesy0_4dataStream', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 110, 12), )

    
    dataStream = property(__dataStream.value, __dataStream.set, None, None)

    _ElementMap.update({
        __agency.name() : __agency,
        __dataStream.name() : __dataStream
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.publishedStreamType = publishedStreamType
Namespace.addCategoryObject('typeBinding', 'publishedStreamType', publishedStreamType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}dataStreamType with content type ELEMENT_ONLY
class dataStreamType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}dataStreamType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dataStreamType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 113, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}siteStream uses Python identifier siteStream
    __siteStream = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'siteStream'), 'siteStream', '__urnxml_gov_auicsmegeodesy0_4_dataStreamType_urnxml_gov_auicsmegeodesy0_4siteStream', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 115, 12), )

    
    siteStream = property(__siteStream.value, __siteStream.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}publishedStream uses Python identifier publishedStream
    __publishedStream = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'publishedStream'), 'publishedStream', '__urnxml_gov_auicsmegeodesy0_4_dataStreamType_urnxml_gov_auicsmegeodesy0_4publishedStream', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 116, 12), )

    
    publishedStream = property(__publishedStream.value, __publishedStream.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_dataStreamType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 117, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    _ElementMap.update({
        __siteStream.name() : __siteStream,
        __publishedStream.name() : __publishedStream,
        __notes.name() : __notes
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.dataStreamType = dataStreamType
Namespace.addCategoryObject('typeBinding', 'dataStreamType', dataStreamType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}dataStreamPropertyType with content type ELEMENT_ONLY
class dataStreamPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}dataStreamPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dataStreamPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 123, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dataStream uses Python identifier dataStream
    __dataStream = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dataStream'), 'dataStream', '__urnxml_gov_auicsmegeodesy0_4_dataStreamPropertyType_urnxml_gov_auicsmegeodesy0_4dataStream', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 121, 4), )

    
    dataStream = property(__dataStream.value, __dataStream.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_dataStreamPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_dataStreamPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_dataStreamPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_dataStreamPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_dataStreamPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_dataStreamPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_dataStreamPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_dataStreamPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_dataStreamPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dataStream.name() : __dataStream
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.dataStreamPropertyType = dataStreamPropertyType
Namespace.addCategoryObject('typeBinding', 'dataStreamPropertyType', dataStreamPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DocumentPropertyType with content type ELEMENT_ONLY
class DocumentPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DocumentPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DocumentPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 14, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Document uses Python identifier Document
    __Document = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Document'), 'Document', '__urnxml_gov_auicsmegeodesy0_4_DocumentPropertyType_urnxml_gov_auicsmegeodesy0_4Document', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 21, 4), )

    
    Document = property(__Document.value, __Document.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_DocumentPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_DocumentPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_DocumentPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_DocumentPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_DocumentPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_DocumentPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_DocumentPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_DocumentPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_DocumentPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Document.name() : __Document
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.DocumentPropertyType = DocumentPropertyType
Namespace.addCategoryObject('typeBinding', 'DocumentPropertyType', DocumentPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DocumentType with content type ELEMENT_ONLY
class DocumentType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DocumentType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DocumentType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 23, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_DocumentType_urnxml_gov_auicsmegeodesy0_4type', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 27, 20), )

    
    type = property(__type.value, __type.set, None, 'Type of document.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}createdDate uses Python identifier createdDate
    __createdDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'createdDate'), 'createdDate', '__urnxml_gov_auicsmegeodesy0_4_DocumentType_urnxml_gov_auicsmegeodesy0_4createdDate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 32, 20), )

    
    createdDate = property(__createdDate.value, __createdDate.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}receivedDate uses Python identifier receivedDate
    __receivedDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'receivedDate'), 'receivedDate', '__urnxml_gov_auicsmegeodesy0_4_DocumentType_urnxml_gov_auicsmegeodesy0_4receivedDate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 33, 20), )

    
    receivedDate = property(__receivedDate.value, __receivedDate.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}custodian uses Python identifier custodian
    __custodian = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'custodian'), 'custodian', '__urnxml_gov_auicsmegeodesy0_4_DocumentType_urnxml_gov_auicsmegeodesy0_4custodian', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 34, 20), )

    
    custodian = property(__custodian.value, __custodian.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}remarks uses Python identifier remarks
    __remarks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'remarks'), 'remarks', '__urnxml_gov_auicsmegeodesy0_4_DocumentType_urnxml_gov_auicsmegeodesy0_4remarks', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 35, 20), )

    
    remarks = property(__remarks.value, __remarks.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}body uses Python identifier body
    __body = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'body'), 'body', '__urnxml_gov_auicsmegeodesy0_4_DocumentType_urnxml_gov_auicsmegeodesy0_4body', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 36, 20), )

    
    body = property(__body.value, __body.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __type.name() : __type,
        __createdDate.name() : __createdDate,
        __receivedDate.name() : __receivedDate,
        __custodian.name() : __custodian,
        __remarks.name() : __remarks,
        __body.name() : __body
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DocumentType = DocumentType
Namespace.addCategoryObject('typeBinding', 'DocumentType', DocumentType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 37, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}fileReference uses Python identifier fileReference
    __fileReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileReference'), 'fileReference', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_urnxml_gov_auicsmegeodesy0_4fileReference', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 39, 32), )

    
    fileReference = property(__fileReference.value, __fileReference.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}content uses Python identifier content_
    __content = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'content'), 'content_', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_urnxml_gov_auicsmegeodesy0_4content', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 40, 32), )

    
    content_ = property(__content.value, __content.set, None, None)

    
    # Attribute format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'format'), 'format', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_format', pyxb.binding.datatypes.string)
    __format._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 51, 28)
    __format._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 51, 28)
    
    format = property(__format.value, __format.set, None, None)

    _HasWildcardElement = True
    _ElementMap.update({
        __fileReference.name() : __fileReference,
        __content.name() : __content
    })
    _AttributeMap.update({
        __format.name() : __format
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}CollocationInformationType with content type ELEMENT_ONLY
class CollocationInformationType (pyxb.bundles.opengis.gml_3_2.AbstractGMLType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}CollocationInformationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollocationInformationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 171, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_CollocationInformationType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_CollocationInformationType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_CollocationInformationType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_CollocationInformationType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}instrumentationType uses Python identifier instrumentationType
    __instrumentationType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'instrumentationType'), 'instrumentationType', '__urnxml_gov_auicsmegeodesy0_4_CollocationInformationType_urnxml_gov_auicsmegeodesy0_4instrumentationType', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 176, 20), )

    
    instrumentationType = property(__instrumentationType.value, __instrumentationType.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'status'), 'status', '__urnxml_gov_auicsmegeodesy0_4_CollocationInformationType_urnxml_gov_auicsmegeodesy0_4status', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 177, 20), )

    
    status = property(__status.value, __status.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __validTime.name() : __validTime,
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __instrumentationType.name() : __instrumentationType,
        __status.name() : __status
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CollocationInformationType = CollocationInformationType
Namespace.addCategoryObject('typeBinding', 'CollocationInformationType', CollocationInformationType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}FrequencyStandardType with content type ELEMENT_ONLY
class FrequencyStandardType (pyxb.bundles.opengis.gml_3_2.AbstractGMLType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}FrequencyStandardType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FrequencyStandardType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 184, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_FrequencyStandardType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_FrequencyStandardType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_FrequencyStandardType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_FrequencyStandardType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}standardType uses Python identifier standardType
    __standardType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'standardType'), 'standardType', '__urnxml_gov_auicsmegeodesy0_4_FrequencyStandardType_urnxml_gov_auicsmegeodesy0_4standardType', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 189, 20), )

    
    standardType = property(__standardType.value, __standardType.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}inputFrequency uses Python identifier inputFrequency
    __inputFrequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'inputFrequency'), 'inputFrequency', '__urnxml_gov_auicsmegeodesy0_4_FrequencyStandardType_urnxml_gov_auicsmegeodesy0_4inputFrequency', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 190, 20), )

    
    inputFrequency = property(__inputFrequency.value, __inputFrequency.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __validTime.name() : __validTime,
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __standardType.name() : __standardType,
        __inputFrequency.name() : __inputFrequency
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FrequencyStandardType = FrequencyStandardType
Namespace.addCategoryObject('typeBinding', 'FrequencyStandardType', FrequencyStandardType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SurveyedLocalTieType with content type ELEMENT_ONLY
class SurveyedLocalTieType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SurveyedLocalTieType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SurveyedLocalTieType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 243, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_SurveyedLocalTieType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_SurveyedLocalTieType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_SurveyedLocalTieType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}tiedMarkerName uses Python identifier tiedMarkerName
    __tiedMarkerName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tiedMarkerName'), 'tiedMarkerName', '__urnxml_gov_auicsmegeodesy0_4_SurveyedLocalTieType_urnxml_gov_auicsmegeodesy0_4tiedMarkerName', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 247, 20), )

    
    tiedMarkerName = property(__tiedMarkerName.value, __tiedMarkerName.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}tiedMarkerUsage uses Python identifier tiedMarkerUsage
    __tiedMarkerUsage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tiedMarkerUsage'), 'tiedMarkerUsage', '__urnxml_gov_auicsmegeodesy0_4_SurveyedLocalTieType_urnxml_gov_auicsmegeodesy0_4tiedMarkerUsage', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 248, 20), )

    
    tiedMarkerUsage = property(__tiedMarkerUsage.value, __tiedMarkerUsage.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}tiedMarkerCDPNumber uses Python identifier tiedMarkerCDPNumber
    __tiedMarkerCDPNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tiedMarkerCDPNumber'), 'tiedMarkerCDPNumber', '__urnxml_gov_auicsmegeodesy0_4_SurveyedLocalTieType_urnxml_gov_auicsmegeodesy0_4tiedMarkerCDPNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 249, 20), )

    
    tiedMarkerCDPNumber = property(__tiedMarkerCDPNumber.value, __tiedMarkerCDPNumber.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}tiedMarkerDOMESNumber uses Python identifier tiedMarkerDOMESNumber
    __tiedMarkerDOMESNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tiedMarkerDOMESNumber'), 'tiedMarkerDOMESNumber', '__urnxml_gov_auicsmegeodesy0_4_SurveyedLocalTieType_urnxml_gov_auicsmegeodesy0_4tiedMarkerDOMESNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 250, 20), )

    
    tiedMarkerDOMESNumber = property(__tiedMarkerDOMESNumber.value, __tiedMarkerDOMESNumber.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}differentialComponentsGNSSMarkerToTiedMonumentITRS uses Python identifier differentialComponentsGNSSMarkerToTiedMonumentITRS
    __differentialComponentsGNSSMarkerToTiedMonumentITRS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'differentialComponentsGNSSMarkerToTiedMonumentITRS'), 'differentialComponentsGNSSMarkerToTiedMonumentITRS', '__urnxml_gov_auicsmegeodesy0_4_SurveyedLocalTieType_urnxml_gov_auicsmegeodesy0_4differentialComponentsGNSSMarkerToTiedMonumentITRS', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 251, 20), )

    
    differentialComponentsGNSSMarkerToTiedMonumentITRS = property(__differentialComponentsGNSSMarkerToTiedMonumentITRS.value, __differentialComponentsGNSSMarkerToTiedMonumentITRS.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}localSiteTiesAccuracy uses Python identifier localSiteTiesAccuracy
    __localSiteTiesAccuracy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'localSiteTiesAccuracy'), 'localSiteTiesAccuracy', '__urnxml_gov_auicsmegeodesy0_4_SurveyedLocalTieType_urnxml_gov_auicsmegeodesy0_4localSiteTiesAccuracy', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 260, 20), )

    
    localSiteTiesAccuracy = property(__localSiteTiesAccuracy.value, __localSiteTiesAccuracy.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}surveyMethod uses Python identifier surveyMethod
    __surveyMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surveyMethod'), 'surveyMethod', '__urnxml_gov_auicsmegeodesy0_4_SurveyedLocalTieType_urnxml_gov_auicsmegeodesy0_4surveyMethod', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 261, 20), )

    
    surveyMethod = property(__surveyMethod.value, __surveyMethod.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateMeasured uses Python identifier dateMeasured
    __dateMeasured = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateMeasured'), 'dateMeasured', '__urnxml_gov_auicsmegeodesy0_4_SurveyedLocalTieType_urnxml_gov_auicsmegeodesy0_4dateMeasured', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 262, 20), )

    
    dateMeasured = property(__dateMeasured.value, __dateMeasured.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __tiedMarkerName.name() : __tiedMarkerName,
        __tiedMarkerUsage.name() : __tiedMarkerUsage,
        __tiedMarkerCDPNumber.name() : __tiedMarkerCDPNumber,
        __tiedMarkerDOMESNumber.name() : __tiedMarkerDOMESNumber,
        __differentialComponentsGNSSMarkerToTiedMonumentITRS.name() : __differentialComponentsGNSSMarkerToTiedMonumentITRS,
        __localSiteTiesAccuracy.name() : __localSiteTiesAccuracy,
        __surveyMethod.name() : __surveyMethod,
        __dateMeasured.name() : __dateMeasured
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SurveyedLocalTieType = SurveyedLocalTieType
Namespace.addCategoryObject('typeBinding', 'SurveyedLocalTieType', SurveyedLocalTieType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 252, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dx uses Python identifier dx
    __dx = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dx'), 'dx', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON__urnxml_gov_auicsmegeodesy0_4dx', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 254, 32), )

    
    dx = property(__dx.value, __dx.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dy uses Python identifier dy
    __dy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dy'), 'dy', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON__urnxml_gov_auicsmegeodesy0_4dy', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 255, 32), )

    
    dy = property(__dy.value, __dy.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dz uses Python identifier dz
    __dz = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dz'), 'dz', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON__urnxml_gov_auicsmegeodesy0_4dz', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 256, 32), )

    
    dz = property(__dz.value, __dz.set, None, None)

    _ElementMap.update({
        __dx.name() : __dx,
        __dy.name() : __dy,
        __dz.name() : __dz
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}gnssReceiverPropertyType with content type ELEMENT_ONLY
class gnssReceiverPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}gnssReceiverPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'gnssReceiverPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 314, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverPropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverPropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverPropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}GnssReceiver uses Python identifier GnssReceiver
    __GnssReceiver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GnssReceiver'), 'GnssReceiver', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverPropertyType_urnxml_gov_auicsmegeodesy0_4GnssReceiver', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 302, 4), )

    
    GnssReceiver = property(__GnssReceiver.value, __GnssReceiver.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __GnssReceiver.name() : __GnssReceiver
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.gnssReceiverPropertyType = gnssReceiverPropertyType
Namespace.addCategoryObject('typeBinding', 'gnssReceiverPropertyType', gnssReceiverPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}gnssAntennaPropertyType with content type ELEMENT_ONLY
class gnssAntennaPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}gnssAntennaPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'gnssAntennaPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 324, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaPropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaPropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaPropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}GnssAntenna uses Python identifier GnssAntenna
    __GnssAntenna = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GnssAntenna'), 'GnssAntenna', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaPropertyType_urnxml_gov_auicsmegeodesy0_4GnssAntenna', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 303, 4), )

    
    GnssAntenna = property(__GnssAntenna.value, __GnssAntenna.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __GnssAntenna.name() : __GnssAntenna
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.gnssAntennaPropertyType = gnssAntennaPropertyType
Namespace.addCategoryObject('typeBinding', 'gnssAntennaPropertyType', gnssAntennaPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}humiditySensorPropertyType with content type ELEMENT_ONLY
class humiditySensorPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}humiditySensorPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'humiditySensorPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 334, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_humiditySensorPropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_humiditySensorPropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_humiditySensorPropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}HumiditySensor uses Python identifier HumiditySensor
    __HumiditySensor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HumiditySensor'), 'HumiditySensor', '__urnxml_gov_auicsmegeodesy0_4_humiditySensorPropertyType_urnxml_gov_auicsmegeodesy0_4HumiditySensor', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 304, 4), )

    
    HumiditySensor = property(__HumiditySensor.value, __HumiditySensor.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_humiditySensorPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_humiditySensorPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_humiditySensorPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_humiditySensorPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_humiditySensorPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_humiditySensorPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_humiditySensorPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_humiditySensorPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_humiditySensorPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __HumiditySensor.name() : __HumiditySensor
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.humiditySensorPropertyType = humiditySensorPropertyType
Namespace.addCategoryObject('typeBinding', 'humiditySensorPropertyType', humiditySensorPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}pressureSensorPropertyType with content type ELEMENT_ONLY
class pressureSensorPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}pressureSensorPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'pressureSensorPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 344, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_pressureSensorPropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_pressureSensorPropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_pressureSensorPropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}PressureSensor uses Python identifier PressureSensor
    __PressureSensor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PressureSensor'), 'PressureSensor', '__urnxml_gov_auicsmegeodesy0_4_pressureSensorPropertyType_urnxml_gov_auicsmegeodesy0_4PressureSensor', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 305, 4), )

    
    PressureSensor = property(__PressureSensor.value, __PressureSensor.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_pressureSensorPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_pressureSensorPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_pressureSensorPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_pressureSensorPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_pressureSensorPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_pressureSensorPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_pressureSensorPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_pressureSensorPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_pressureSensorPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __PressureSensor.name() : __PressureSensor
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.pressureSensorPropertyType = pressureSensorPropertyType
Namespace.addCategoryObject('typeBinding', 'pressureSensorPropertyType', pressureSensorPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}temperatureSensorPropertyType with content type ELEMENT_ONLY
class temperatureSensorPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}temperatureSensorPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'temperatureSensorPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 354, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_temperatureSensorPropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_temperatureSensorPropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_temperatureSensorPropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}TemperatureSensor uses Python identifier TemperatureSensor
    __TemperatureSensor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TemperatureSensor'), 'TemperatureSensor', '__urnxml_gov_auicsmegeodesy0_4_temperatureSensorPropertyType_urnxml_gov_auicsmegeodesy0_4TemperatureSensor', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 306, 4), )

    
    TemperatureSensor = property(__TemperatureSensor.value, __TemperatureSensor.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_temperatureSensorPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_temperatureSensorPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_temperatureSensorPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_temperatureSensorPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_temperatureSensorPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_temperatureSensorPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_temperatureSensorPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_temperatureSensorPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_temperatureSensorPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __TemperatureSensor.name() : __TemperatureSensor
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.temperatureSensorPropertyType = temperatureSensorPropertyType
Namespace.addCategoryObject('typeBinding', 'temperatureSensorPropertyType', temperatureSensorPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}waterVaporSensorPropertyType with content type ELEMENT_ONLY
class waterVaporSensorPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}waterVaporSensorPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'waterVaporSensorPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 364, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_waterVaporSensorPropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_waterVaporSensorPropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_waterVaporSensorPropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}WaterVaporSensor uses Python identifier WaterVaporSensor
    __WaterVaporSensor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WaterVaporSensor'), 'WaterVaporSensor', '__urnxml_gov_auicsmegeodesy0_4_waterVaporSensorPropertyType_urnxml_gov_auicsmegeodesy0_4WaterVaporSensor', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 307, 4), )

    
    WaterVaporSensor = property(__WaterVaporSensor.value, __WaterVaporSensor.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_waterVaporSensorPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_waterVaporSensorPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_waterVaporSensorPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_waterVaporSensorPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_waterVaporSensorPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_waterVaporSensorPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_waterVaporSensorPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_waterVaporSensorPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_waterVaporSensorPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __WaterVaporSensor.name() : __WaterVaporSensor
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.waterVaporSensorPropertyType = waterVaporSensorPropertyType
Namespace.addCategoryObject('typeBinding', 'waterVaporSensorPropertyType', waterVaporSensorPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}otherInstrumentationPropertyType with content type ELEMENT_ONLY
class otherInstrumentationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}otherInstrumentationPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'otherInstrumentationPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 374, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_otherInstrumentationPropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_otherInstrumentationPropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_otherInstrumentationPropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}OtherInstrumentation uses Python identifier OtherInstrumentation
    __OtherInstrumentation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OtherInstrumentation'), 'OtherInstrumentation', '__urnxml_gov_auicsmegeodesy0_4_otherInstrumentationPropertyType_urnxml_gov_auicsmegeodesy0_4OtherInstrumentation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 308, 4), )

    
    OtherInstrumentation = property(__OtherInstrumentation.value, __OtherInstrumentation.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_otherInstrumentationPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_otherInstrumentationPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_otherInstrumentationPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_otherInstrumentationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_otherInstrumentationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_otherInstrumentationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_otherInstrumentationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_otherInstrumentationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_otherInstrumentationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __OtherInstrumentation.name() : __OtherInstrumentation
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.otherInstrumentationPropertyType = otherInstrumentationPropertyType
Namespace.addCategoryObject('typeBinding', 'otherInstrumentationPropertyType', otherInstrumentationPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}gnssRadomePropertyType with content type ELEMENT_ONLY
class gnssRadomePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}gnssRadomePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'gnssRadomePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 384, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomePropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomePropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomePropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}GnssRadome uses Python identifier GnssRadome
    __GnssRadome = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GnssRadome'), 'GnssRadome', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomePropertyType_urnxml_gov_auicsmegeodesy0_4GnssRadome', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 301, 4), )

    
    GnssRadome = property(__GnssRadome.value, __GnssRadome.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomePropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __GnssRadome.name() : __GnssRadome
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.gnssRadomePropertyType = gnssRadomePropertyType
Namespace.addCategoryObject('typeBinding', 'gnssRadomePropertyType', gnssRadomePropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}surveyedLocalTiePropertyType with content type ELEMENT_ONLY
class surveyedLocalTiePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}surveyedLocalTiePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'surveyedLocalTiePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 394, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}TieMeasurement uses Python identifier TieMeasurement
    __TieMeasurement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TieMeasurement'), 'TieMeasurement', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_urnxml_gov_auicsmegeodesy0_4TieMeasurement', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 309, 4), )

    
    TieMeasurement = property(__TieMeasurement.value, __TieMeasurement.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}SurveyedLocalTie uses Python identifier SurveyedLocalTie
    __SurveyedLocalTie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SurveyedLocalTie'), 'SurveyedLocalTie', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_urnxml_gov_auicsmegeodesy0_4SurveyedLocalTie', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 310, 4), )

    
    SurveyedLocalTie = property(__SurveyedLocalTie.value, __SurveyedLocalTie.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_surveyedLocalTiePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __TieMeasurement.name() : __TieMeasurement,
        __SurveyedLocalTie.name() : __SurveyedLocalTie
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.surveyedLocalTiePropertyType = surveyedLocalTiePropertyType
Namespace.addCategoryObject('typeBinding', 'surveyedLocalTiePropertyType', surveyedLocalTiePropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}frequencyStandardPropertyType with content type ELEMENT_ONLY
class frequencyStandardPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}frequencyStandardPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'frequencyStandardPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 405, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}FrequencyStandard uses Python identifier FrequencyStandard
    __FrequencyStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyStandard'), 'FrequencyStandard', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_urnxml_gov_auicsmegeodesy0_4FrequencyStandard', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 311, 4), )

    
    FrequencyStandard = property(__FrequencyStandard.value, __FrequencyStandard.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_frequencyStandardPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __FrequencyStandard.name() : __FrequencyStandard
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.frequencyStandardPropertyType = frequencyStandardPropertyType
Namespace.addCategoryObject('typeBinding', 'frequencyStandardPropertyType', frequencyStandardPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}collocationInformationPropertyType with content type ELEMENT_ONLY
class collocationInformationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}collocationInformationPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'collocationInformationPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 416, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_collocationInformationPropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_collocationInformationPropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_collocationInformationPropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}CollocationInformation uses Python identifier CollocationInformation
    __CollocationInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CollocationInformation'), 'CollocationInformation', '__urnxml_gov_auicsmegeodesy0_4_collocationInformationPropertyType_urnxml_gov_auicsmegeodesy0_4CollocationInformation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 312, 4), )

    
    CollocationInformation = property(__CollocationInformation.value, __CollocationInformation.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_collocationInformationPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_collocationInformationPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_collocationInformationPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_collocationInformationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_collocationInformationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_collocationInformationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_collocationInformationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_collocationInformationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_collocationInformationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __CollocationInformation.name() : __CollocationInformation
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.collocationInformationPropertyType = collocationInformationPropertyType
Namespace.addCategoryObject('typeBinding', 'collocationInformationPropertyType', collocationInformationPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SetupPropertyType with content type ELEMENT_ONLY
class SetupPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SetupPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SetupPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 17, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Setup uses Python identifier Setup
    __Setup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Setup'), 'Setup', '__urnxml_gov_auicsmegeodesy0_4_SetupPropertyType_urnxml_gov_auicsmegeodesy0_4Setup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 24, 4), )

    
    Setup = property(__Setup.value, __Setup.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_SetupPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_SetupPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_SetupPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_SetupPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_SetupPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_SetupPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_SetupPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_SetupPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_SetupPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Setup.name() : __Setup
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.SetupPropertyType = SetupPropertyType
Namespace.addCategoryObject('typeBinding', 'SetupPropertyType', SetupPropertyType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 32, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}SetupInstance uses Python identifier SetupInstance
    __SetupInstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SetupInstance'), 'SetupInstance', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_2_urnxml_gov_auicsmegeodesy0_4SetupInstance', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 44, 4), )

    
    SetupInstance = property(__SetupInstance.value, __SetupInstance.set, None, None)

    _ElementMap.update({
        __SetupInstance.name() : __SetupInstance
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_2 = CTD_ANON_2


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SensorPropertyType with content type ELEMENT_ONLY
class SensorPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SensorPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SensorPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 64, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Sensor uses Python identifier Sensor
    __Sensor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Sensor'), 'Sensor', '__urnxml_gov_auicsmegeodesy0_4_SensorPropertyType_urnxml_gov_auicsmegeodesy0_4Sensor', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 71, 4), )

    
    Sensor = property(__Sensor.value, __Sensor.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_SensorPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_SensorPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_SensorPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_SensorPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_SensorPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_SensorPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_SensorPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_SensorPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_SensorPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Sensor.name() : __Sensor
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.SensorPropertyType = SensorPropertyType
Namespace.addCategoryObject('typeBinding', 'SensorPropertyType', SensorPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SensorType with content type ELEMENT_ONLY
class SensorType (pyxb.bundles.opengis.gml_3_2.AbstractGMLType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SensorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SensorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 73, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_SensorType_urnxml_gov_auicsmegeodesy0_4type', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 77, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __type.name() : __type
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SensorType = SensorType
Namespace.addCategoryObject('typeBinding', 'SensorType', SensorType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ObservationQualityPropertyType with content type ELEMENT_ONLY
class ObservationQualityPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ObservationQualityPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ObservationQualityPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 83, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractObservationQuality uses Python identifier AbstractObservationQuality
    __AbstractObservationQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractObservationQuality'), 'AbstractObservationQuality', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualityPropertyType_urnxml_gov_auicsmegeodesy0_4AbstractObservationQuality', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 90, 4), )

    
    AbstractObservationQuality = property(__AbstractObservationQuality.value, __AbstractObservationQuality.set, None, 'Abstract class to contain observation-specific environment quality. For example, GNSS node quality.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualityPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualityPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualityPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualityPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualityPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualityPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualityPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualityPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualityPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __AbstractObservationQuality.name() : __AbstractObservationQuality
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.ObservationQualityPropertyType = ObservationQualityPropertyType
Namespace.addCategoryObject('typeBinding', 'ObservationQualityPropertyType', ObservationQualityPropertyType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 119, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}GNSSObservationQualityInstance uses Python identifier GNSSObservationQualityInstance
    __GNSSObservationQualityInstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNSSObservationQualityInstance'), 'GNSSObservationQualityInstance', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_3_urnxml_gov_auicsmegeodesy0_4GNSSObservationQualityInstance', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 130, 4), )

    
    GNSSObservationQualityInstance = property(__GNSSObservationQualityInstance.value, __GNSSObservationQualityInstance.set, None, None)

    _ElementMap.update({
        __GNSSObservationQualityInstance.name() : __GNSSObservationQualityInstance
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_3 = CTD_ANON_3


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GeodesyMLPropertyType with content type ELEMENT_ONLY
class GeodesyMLPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GeodesyMLPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GeodesyMLPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 26, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}GeodesyML uses Python identifier GeodesyML
    __GeodesyML = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeodesyML'), 'GeodesyML', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLPropertyType_urnxml_gov_auicsmegeodesy0_4GeodesyML', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 33, 4), )

    
    GeodesyML = property(__GeodesyML.value, __GeodesyML.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __GeodesyML.name() : __GeodesyML
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.GeodesyMLPropertyType = GeodesyMLPropertyType
Namespace.addCategoryObject('typeBinding', 'GeodesyMLPropertyType', GeodesyMLPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GeodesyMLType with content type ELEMENT_ONLY
class GeodesyMLType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GeodesyMLType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GeodesyMLType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 35, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}AbstractCRS uses Python identifier AbstractCRS
    __AbstractCRS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'AbstractCRS'), 'AbstractCRS', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_httpwww_opengis_netgml3_2AbstractCRS', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/referenceSystems.xsd', 30, 1), )

    
    AbstractCRS = property(__AbstractCRS.value, __AbstractCRS.set, None, 'gml:AbstractCRS specifies a coordinate reference system which is usually single but may be compound. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.')

    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Instrument uses Python identifier Instrument
    __Instrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Instrument'), 'Instrument', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4Instrument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 110, 4), )

    
    Instrument = property(__Instrument.value, __Instrument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Document uses Python identifier Document
    __Document = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Document'), 'Document', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4Document', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 21, 4), )

    
    Document = property(__Document.value, __Document.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Setup uses Python identifier Setup
    __Setup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Setup'), 'Setup', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4Setup', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 24, 4), )

    
    Setup = property(__Setup.value, __Setup.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Sensor uses Python identifier Sensor
    __Sensor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Sensor'), 'Sensor', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4Sensor', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 71, 4), )

    
    Sensor = property(__Sensor.value, __Sensor.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractPositionSource uses Python identifier AbstractPositionSource
    __AbstractPositionSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionSource'), 'AbstractPositionSource', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4AbstractPositionSource', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 74, 4), )

    
    AbstractPositionSource = property(__AbstractPositionSource.value, __AbstractPositionSource.set, None, 'Version 0.2.2: Define an abstract type to encapsulate the inputs and outputs of an "instance" of a coordinate operation. This instance is recorded to maintain the traceable lineage of a Position value.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractPositionEstimator uses Python identifier AbstractPositionEstimator
    __AbstractPositionEstimator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionEstimator'), 'AbstractPositionEstimator', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4AbstractPositionEstimator', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 93, 4), )

    
    AbstractPositionEstimator = property(__AbstractPositionEstimator.value, __AbstractPositionEstimator.set, None, 'Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of estimators. Extends AbstractCoordinateOperation. gml:targetCRS and gml:sourceCRS have been removed.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementSource uses Python identifier AbstractMeasurementSource
    __AbstractMeasurementSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementSource'), 'AbstractMeasurementSource', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4AbstractMeasurementSource', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 391, 4), )

    
    AbstractMeasurementSource = property(__AbstractMeasurementSource.value, __AbstractMeasurementSource.set, None, 'Version 0.2.2: Encapsulates measurement operation and the operands/results that define the operation event.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementOperation uses Python identifier AbstractMeasurementOperation
    __AbstractMeasurementOperation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementOperation'), 'AbstractMeasurementOperation', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4AbstractMeasurementOperation', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 427, 4), )

    
    AbstractMeasurementOperation = property(__AbstractMeasurementOperation.value, __AbstractMeasurementOperation.set, None, 'Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of estimators.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractDefinitionSource uses Python identifier AbstractDefinitionSource
    __AbstractDefinitionSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionSource'), 'AbstractDefinitionSource', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4AbstractDefinitionSource', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 485, 4), )

    
    AbstractDefinitionSource = property(__AbstractDefinitionSource.value, __AbstractDefinitionSource.set, None, 'Version 0.2.2: Define an abstract type to encapsulate the inputs and outputs of an "instance" of a coordinate operation. This instance is recorded to maintain the traceable lineage of a Position value.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractDefinitionOperation uses Python identifier AbstractDefinitionOperation
    __AbstractDefinitionOperation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionOperation'), 'AbstractDefinitionOperation', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4AbstractDefinitionOperation', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 521, 4), )

    
    AbstractDefinitionOperation = property(__AbstractDefinitionOperation.value, __AbstractDefinitionOperation.set, None, 'Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of definitons.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurement uses Python identifier AbstractMeasurement
    __AbstractMeasurement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurement'), 'AbstractMeasurement', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4AbstractMeasurement', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 25, 4), )

    
    AbstractMeasurement = property(__AbstractMeasurement.value, __AbstractMeasurement.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Site uses Python identifier Site
    __Site = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Site'), 'Site', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4Site', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 63, 4), )

    
    Site = property(__Site.value, __Site.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Monument uses Python identifier Monument
    __Monument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Monument'), 'Monument', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4Monument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 79, 4), )

    
    Monument = property(__Monument.value, __Monument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}SupplementaryMark uses Python identifier SupplementaryMark
    __SupplementaryMark = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SupplementaryMark'), 'SupplementaryMark', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4SupplementaryMark', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 105, 4), )

    
    SupplementaryMark = property(__SupplementaryMark.value, __SupplementaryMark.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSiteLog uses Python identifier AbstractSiteLog
    __AbstractSiteLog = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractSiteLog'), 'AbstractSiteLog', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4AbstractSiteLog', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 120, 4), )

    
    AbstractSiteLog = property(__AbstractSiteLog.value, __AbstractSiteLog.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}siteVisit uses Python identifier siteVisit
    __siteVisit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'siteVisit'), 'siteVisit', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4siteVisit', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 132, 4), )

    
    siteVisit = property(__siteVisit.value, __siteVisit.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Node uses Python identifier Node
    __Node = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Node'), 'Node', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4Node', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 203, 4), )

    
    Node = property(__Node.value, __Node.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}PositionPairCovariance uses Python identifier PositionPairCovariance
    __PositionPairCovariance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PositionPairCovariance'), 'PositionPairCovariance', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4PositionPairCovariance', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 298, 4), )

    
    PositionPairCovariance = property(__PositionPairCovariance.value, __PositionPairCovariance.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractPosition uses Python identifier AbstractPosition
    __AbstractPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractPosition'), 'AbstractPosition', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4AbstractPosition', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 358, 4), )

    
    AbstractPosition = property(__AbstractPosition.value, __AbstractPosition.set, None, '\n                A Position element contains information about a 1d, 2d, or 3d position for a node.  In general a different position record is used for each datum and source.  For example if a 3d adjustment was the source a single 3d position record (e.g. lat, lon, ellipsoid ht) could be used. If there was an AHD height determined this would be a separate 1d position record.\n            ')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Project uses Python identifier Project
    __Project = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Project'), 'Project', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4Project', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 22, 4), )

    
    Project = property(__Project.value, __Project.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}TerrestrialReferenceFrame uses Python identifier TerrestrialReferenceFrame
    __TerrestrialReferenceFrame = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TerrestrialReferenceFrame'), 'TerrestrialReferenceFrame', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4TerrestrialReferenceFrame', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 21, 4), )

    
    TerrestrialReferenceFrame = property(__TerrestrialReferenceFrame.value, __TerrestrialReferenceFrame.set, None, 'A terrestrial reference frame is a geodetic reference frame (or geodetic datum in previous GML parlance) in which the coordinates of reference or definition monuments are allowed to move. In essence, a terrestrial reference frame is continuously "realised" with the regular addition of new observations on a weekly or daily time scale. To use a terrestrial reference frame, up-to-date transformation products must be available to propagate coordinates and their uncertanties between epochs and between frames.\n            \n            To derive a static reference frame (a GML datum) from a terrestrial reference frame and a dynamic transformation, the source and target epochs of the dynamic transformation are required to compute coordinates in the realisation epoch of the static reference frame.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicTransformation uses Python identifier DynamicTransformation
    __DynamicTransformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DynamicTransformation'), 'DynamicTransformation', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_urnxml_gov_auicsmegeodesy0_4DynamicTransformation', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 63, 4), )

    
    DynamicTransformation = property(__DynamicTransformation.value, __DynamicTransformation.set, None, 'A dynamic transformation is a coordinate transformation between reference frames where at least one of which is a dynamic or terrestrial reference frame. To derive a static reference frame (a GML datum) from a terrestrial reference frame and a dynamic transformation, either the source and target epochs OR the source epoch and a relative time quantity parameter of the dynamic transformation are required to compute coordinates in the realisation epoch of the static reference frame.\n\nA transformation between reference frames in the static sense requires no temporal parameters. That is, a static reference frame (SRF) such as GDA94 can be transformed to another SRF like AGD66 with seven spatial parameters and no temporal parameters. In contrast, a dynamic reference frame (DRF) such as ITRF2008 (or the upcoming ITRF2014) requires temporal parameters to be transformed to a SRF and vice versa, and this results in the 14-parameter transformation comprised of 7 spatial and 7 temporal-spatial parameters. A fundamental requirement of the 14-parameter transformation is the provision of a time vector relative to the realisation epoch of the dynamic frame. See Dawson & Woods (2010).')

    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_srsName', pyxb.binding.datatypes.anyURI)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_GeodesyMLType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __AbstractCRS.name() : __AbstractCRS,
        __validTime.name() : __validTime,
        __Instrument.name() : __Instrument,
        __Document.name() : __Document,
        __Setup.name() : __Setup,
        __Sensor.name() : __Sensor,
        __AbstractPositionSource.name() : __AbstractPositionSource,
        __AbstractPositionEstimator.name() : __AbstractPositionEstimator,
        __AbstractMeasurementSource.name() : __AbstractMeasurementSource,
        __AbstractMeasurementOperation.name() : __AbstractMeasurementOperation,
        __AbstractDefinitionSource.name() : __AbstractDefinitionSource,
        __AbstractDefinitionOperation.name() : __AbstractDefinitionOperation,
        __AbstractMeasurement.name() : __AbstractMeasurement,
        __Site.name() : __Site,
        __Monument.name() : __Monument,
        __SupplementaryMark.name() : __SupplementaryMark,
        __AbstractSiteLog.name() : __AbstractSiteLog,
        __siteVisit.name() : __siteVisit,
        __Node.name() : __Node,
        __PositionPairCovariance.name() : __PositionPairCovariance,
        __AbstractPosition.name() : __AbstractPosition,
        __Project.name() : __Project,
        __TerrestrialReferenceFrame.name() : __TerrestrialReferenceFrame,
        __DynamicTransformation.name() : __DynamicTransformation
    })
    _AttributeMap.update({
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension,
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels
    })
_module_typeBindings.GeodesyMLType = GeodesyMLType
Namespace.addCategoryObject('typeBinding', 'GeodesyMLType', GeodesyMLType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}geodeticEquipmentItemPropertyType with content type ELEMENT_ONLY
class geodeticEquipmentItemPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}geodeticEquipmentItemPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'geodeticEquipmentItemPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 28, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_geodeticEquipmentItemPropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_geodeticEquipmentItemPropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_geodeticEquipmentItemPropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}geodeticEquipmentItem uses Python identifier geodeticEquipmentItem
    __geodeticEquipmentItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'geodeticEquipmentItem'), 'geodeticEquipmentItem', '__urnxml_gov_auicsmegeodesy0_4_geodeticEquipmentItemPropertyType_urnxml_gov_auicsmegeodesy0_4geodeticEquipmentItem', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 37, 4), )

    
    geodeticEquipmentItem = property(__geodeticEquipmentItem.value, __geodeticEquipmentItem.set, None, '\n         Provides a base non-instantiable element type whose\n         structure is a derived complex type.  This element\n         can then be referenced as a substitutionGroup for\n         equipment cataloges and such.\n            ')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_geodeticEquipmentItemPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_geodeticEquipmentItemPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_geodeticEquipmentItemPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_geodeticEquipmentItemPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_geodeticEquipmentItemPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_geodeticEquipmentItemPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_geodeticEquipmentItemPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_geodeticEquipmentItemPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_geodeticEquipmentItemPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __geodeticEquipmentItem.name() : __geodeticEquipmentItem
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.geodeticEquipmentItemPropertyType = geodeticEquipmentItemPropertyType
Namespace.addCategoryObject('typeBinding', 'geodeticEquipmentItemPropertyType', geodeticEquipmentItemPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}gnssAntennaConfigType with content type ELEMENT_ONLY
class gnssAntennaConfigType (pyxb.binding.basis.complexTypeDefinition):
    """
        Instantiable, non-substituble, global complex type
        representing the settings (transient properties)
        of a gnss antenna.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'gnssAntennaConfigType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 108, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}antennaCableLengthMeters uses Python identifier antennaCableLengthMeters
    __antennaCableLengthMeters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'antennaCableLengthMeters'), 'antennaCableLengthMeters', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaConfigType_urnxml_gov_auicsmegeodesy0_4antennaCableLengthMeters', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 117, 12), )

    
    antennaCableLengthMeters = property(__antennaCableLengthMeters.value, __antennaCableLengthMeters.set, None, '\n            Refers to the length (in meters) of the cable\n            used to connect the antenna to other gnss equipment\n            (typically a gnss receiver or set of receivers).\n                    ')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}antennaCableType uses Python identifier antennaCableType
    __antennaCableType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'antennaCableType'), 'antennaCableType', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaConfigType_urnxml_gov_auicsmegeodesy0_4antennaCableType', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 132, 12), )

    
    antennaCableType = property(__antennaCableType.value, __antennaCableType.set, None, '\n            Refers to the type of cable\n            used to connect the antenna to other gnss equipment\n            (typically a gnss receiver or set of receivers).\n                    ')

    _ElementMap.update({
        __antennaCableLengthMeters.name() : __antennaCableLengthMeters,
        __antennaCableType.name() : __antennaCableType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.gnssAntennaConfigType = gnssAntennaConfigType
Namespace.addCategoryObject('typeBinding', 'gnssAntennaConfigType', gnssAntennaConfigType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}gnssAntennaHeightMeasurementType with content type ELEMENT_ONLY
class gnssAntennaHeightMeasurementType (pyxb.binding.basis.complexTypeDefinition):
    """
        Instantiable, non-substituble, global complex type
        representing the measurement of a distance between
        a specified location on a gnss antenna and another
        location of choice.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'gnssAntennaHeightMeasurementType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 143, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}unitOfMeasure uses Python identifier unitOfMeasure
    __unitOfMeasure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'unitOfMeasure'), 'unitOfMeasure', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaHeightMeasurementType_httpwww_opengis_netgml3_2unitOfMeasure', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/units.xsd', 21, 1), )

    
    unitOfMeasure = property(__unitOfMeasure.value, __unitOfMeasure.set, None, 'The element gml:unitOfMeasure is a property element to refer to a unit of measure. This is an empty element which carries a reference to a unit of measure definition.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaHeightMeasurementType_urnxml_gov_auicsmegeodesy0_4type', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 153, 12), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaHeightMeasurementType_urnxml_gov_auicsmegeodesy0_4value', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 154, 12), )

    
    value_ = property(__value.value, __value.set, None, '\n            Refers to the distance (+|-) between the geodetic\n            reference point of the associated monument, and a\n            chosen reference point on the antenna.\n                    ')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}referencePoint uses Python identifier referencePoint
    __referencePoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'referencePoint'), 'referencePoint', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaHeightMeasurementType_urnxml_gov_auicsmegeodesy0_4referencePoint', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 170, 12), )

    
    referencePoint = property(__referencePoint.value, __referencePoint.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateAndTimeUTC uses Python identifier dateAndTimeUTC
    __dateAndTimeUTC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateAndTimeUTC'), 'dateAndTimeUTC', '__urnxml_gov_auicsmegeodesy0_4_gnssAntennaHeightMeasurementType_urnxml_gov_auicsmegeodesy0_4dateAndTimeUTC', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 171, 12), )

    
    dateAndTimeUTC = property(__dateAndTimeUTC.value, __dateAndTimeUTC.set, None, None)

    _ElementMap.update({
        __unitOfMeasure.name() : __unitOfMeasure,
        __type.name() : __type,
        __value.name() : __value,
        __referencePoint.name() : __referencePoint,
        __dateAndTimeUTC.name() : __dateAndTimeUTC
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.gnssAntennaHeightMeasurementType = gnssAntennaHeightMeasurementType
Namespace.addCategoryObject('typeBinding', 'gnssAntennaHeightMeasurementType', gnssAntennaHeightMeasurementType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}igsAntennaModelCodeType with content type SIMPLE
class igsAntennaModelCodeType (pyxb.bundles.opengis.iso19139.v20070417.gco.CodeListValue_Type):
    """
        Non-instantiable, non-substituable, non-extendable or
        restrictable global simple type representing a valid
        IGS antenna model code.
            """
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'igsAntennaModelCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 174, 4)
    _ElementMap = pyxb.bundles.opengis.iso19139.v20070417.gco.CodeListValue_Type._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.iso19139.v20070417.gco.CodeListValue_Type._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.iso19139.v20070417.gco.CodeListValue_Type
    
    # Attribute codeList inherited from {http://www.isotc211.org/2005/gco}CodeListValue_Type
    
    # Attribute codeListValue inherited from {http://www.isotc211.org/2005/gco}CodeListValue_Type
    
    # Attribute codeSpace inherited from {http://www.isotc211.org/2005/gco}CodeListValue_Type
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.igsAntennaModelCodeType = igsAntennaModelCodeType
Namespace.addCategoryObject('typeBinding', 'igsAntennaModelCodeType', igsAntennaModelCodeType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}gnssRadomeConfigType with content type ELEMENT_ONLY
class gnssRadomeConfigType (pyxb.binding.basis.complexTypeDefinition):
    """
        Instantiable, non-substituble, global complex type
        representing the settings (transient properties)
        of a gnss radome.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'gnssRadomeConfigType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 203, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}radomeFastenerType uses Python identifier radomeFastenerType
    __radomeFastenerType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'radomeFastenerType'), 'radomeFastenerType', '__urnxml_gov_auicsmegeodesy0_4_gnssRadomeConfigType_urnxml_gov_auicsmegeodesy0_4radomeFastenerType', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 212, 12), )

    
    radomeFastenerType = property(__radomeFastenerType.value, __radomeFastenerType.set, None, '\n            Refers to the type of fasteners used to secure a radome\n            in place.  This is pretty much a bogus data field\n            intended for future compatibility purposes.\n          ')

    _ElementMap.update({
        __radomeFastenerType.name() : __radomeFastenerType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.gnssRadomeConfigType = gnssRadomeConfigType
Namespace.addCategoryObject('typeBinding', 'gnssRadomeConfigType', gnssRadomeConfigType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}igsRadomeModelCodeType with content type SIMPLE
class igsRadomeModelCodeType (pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType):
    """
        Non-instantiable, non-substituable, non-extendable or
        restrictable global simple type representing a valid
        IGS radome model code.
            """
    _TypeDefinition = pyxb.bundles.opengis.gml_3_2.STD_ANON_2
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'igsRadomeModelCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 223, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType
    
    # Attribute codeSpace_ inherited from {http://www.opengis.net/gml/3.2}CodeWithAuthorityType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.igsRadomeModelCodeType = igsRadomeModelCodeType
Namespace.addCategoryObject('typeBinding', 'igsRadomeModelCodeType', igsRadomeModelCodeType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}gnssReceiverConfigType with content type ELEMENT_ONLY
class gnssReceiverConfigType (pyxb.binding.basis.complexTypeDefinition):
    """
                Instantiable, non-substituble, global complex type
                representing the settings (transient properties)
                of a gnss receiver.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'gnssReceiverConfigType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 256, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}satelliteSystem uses Python identifier satelliteSystem
    __satelliteSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'satelliteSystem'), 'satelliteSystem', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverConfigType_urnxml_gov_auicsmegeodesy0_4satelliteSystem', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 265, 12), )

    
    satelliteSystem = property(__satelliteSystem.value, __satelliteSystem.set, None, '\n                        Refers to a satellite\n                        constellation being observed by a gnss receiver.\n                    ')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}firmwareVersion uses Python identifier firmwareVersion
    __firmwareVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'firmwareVersion'), 'firmwareVersion', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverConfigType_urnxml_gov_auicsmegeodesy0_4firmwareVersion', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 273, 12), )

    
    firmwareVersion = property(__firmwareVersion.value, __firmwareVersion.set, None, '\n                        Refers to the manufacturer-\n                        designated version of the firmware installed\n                        on a gnss receiver.\n                    ')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}elevationCutoff uses Python identifier elevationCutoff
    __elevationCutoff = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'elevationCutoff'), 'elevationCutoff', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverConfigType_urnxml_gov_auicsmegeodesy0_4elevationCutoff', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 282, 12), )

    
    elevationCutoff = property(__elevationCutoff.value, __elevationCutoff.set, None, '\n                        Refers to the elevation mask (or cutoff)\n                        used on a gnss receiver.\n                    ')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}temperatureStabilization uses Python identifier temperatureStabilization
    __temperatureStabilization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'temperatureStabilization'), 'temperatureStabilization', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverConfigType_urnxml_gov_auicsmegeodesy0_4temperatureStabilization', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 290, 12), )

    
    temperatureStabilization = property(__temperatureStabilization.value, __temperatureStabilization.set, None, '\n                        Refers to the temperature stabilization\n                        on a gnss receiver.\n                    ')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}sampleIntervalInSeconds uses Python identifier sampleIntervalInSeconds
    __sampleIntervalInSeconds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sampleIntervalInSeconds'), 'sampleIntervalInSeconds', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverConfigType_urnxml_gov_auicsmegeodesy0_4sampleIntervalInSeconds', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 298, 12), )

    
    sampleIntervalInSeconds = property(__sampleIntervalInSeconds.value, __sampleIntervalInSeconds.set, None, '\n                        Refers to the sampling interval with which\n                        observations are made with respect to the observed\n                        constellation(s) of satellite(s).\n                    ')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}nativeBaudRateInBPS uses Python identifier nativeBaudRateInBPS
    __nativeBaudRateInBPS = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nativeBaudRateInBPS'), 'nativeBaudRateInBPS', '__urnxml_gov_auicsmegeodesy0_4_gnssReceiverConfigType_urnxml_gov_auicsmegeodesy0_4nativeBaudRateInBPS', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 313, 12), )

    
    nativeBaudRateInBPS = property(__nativeBaudRateInBPS.value, __nativeBaudRateInBPS.set, None, '\n                        Refers to the sampling interval with which\n                        observations are made with respect to the observed\n                        constellation(s) of satellite(s).\n                    ')

    _ElementMap.update({
        __satelliteSystem.name() : __satelliteSystem,
        __firmwareVersion.name() : __firmwareVersion,
        __elevationCutoff.name() : __elevationCutoff,
        __temperatureStabilization.name() : __temperatureStabilization,
        __sampleIntervalInSeconds.name() : __sampleIntervalInSeconds,
        __nativeBaudRateInBPS.name() : __nativeBaudRateInBPS
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.gnssReceiverConfigType = gnssReceiverConfigType
Namespace.addCategoryObject('typeBinding', 'gnssReceiverConfigType', gnssReceiverConfigType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}igsReceiverModelCodeType with content type SIMPLE
class igsReceiverModelCodeType (pyxb.bundles.opengis.iso19139.v20070417.gco.CodeListValue_Type):
    """
                Non-instantiable, non-substituable, non-extendable or
                restrictable global simple type representing a valid
                IGS receiver model code.  With a codeList attribute
                to set the allowed types.
            """
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'igsReceiverModelCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 330, 4)
    _ElementMap = pyxb.bundles.opengis.iso19139.v20070417.gco.CodeListValue_Type._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.iso19139.v20070417.gco.CodeListValue_Type._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.iso19139.v20070417.gco.CodeListValue_Type
    
    # Attribute codeList inherited from {http://www.isotc211.org/2005/gco}CodeListValue_Type
    
    # Attribute codeListValue inherited from {http://www.isotc211.org/2005/gco}CodeListValue_Type
    
    # Attribute codeSpace inherited from {http://www.isotc211.org/2005/gco}CodeListValue_Type
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.igsReceiverModelCodeType = igsReceiverModelCodeType
Namespace.addCategoryObject('typeBinding', 'igsReceiverModelCodeType', igsReceiverModelCodeType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}geodeticMonumentPropertyType with content type ELEMENT_ONLY
class geodeticMonumentPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}geodeticMonumentPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'geodeticMonumentPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 34, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}geodeticMonument uses Python identifier geodeticMonument
    __geodeticMonument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'geodeticMonument'), 'geodeticMonument', '__urnxml_gov_auicsmegeodesy0_4_geodeticMonumentPropertyType_urnxml_gov_auicsmegeodesy0_4geodeticMonument', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 32, 4), )

    
    geodeticMonument = property(__geodeticMonument.value, __geodeticMonument.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_geodeticMonumentPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_geodeticMonumentPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_geodeticMonumentPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_geodeticMonumentPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_geodeticMonumentPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_geodeticMonumentPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_geodeticMonumentPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_geodeticMonumentPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_geodeticMonumentPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __geodeticMonument.name() : __geodeticMonument
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.geodeticMonumentPropertyType = geodeticMonumentPropertyType
Namespace.addCategoryObject('typeBinding', 'geodeticMonumentPropertyType', geodeticMonumentPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticMonumentType with content type ELEMENT_ONLY
class baseGeodeticMonumentType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """
         Base geodetic monument class.  Can be extended..
         Cannot be substituted and is instantiable.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'baseGeodeticMonumentType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 41, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4type', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 53, 20), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}commonName uses Python identifier commonName
    __commonName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commonName'), 'commonName', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4commonName', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 55, 20), )

    
    commonName = property(__commonName.value, __commonName.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}characterIdentifier uses Python identifier characterIdentifier
    __characterIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'characterIdentifier'), 'characterIdentifier', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4characterIdentifier', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 57, 20), )

    
    characterIdentifier = property(__characterIdentifier.value, __characterIdentifier.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}inscription uses Python identifier inscription
    __inscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'inscription'), 'inscription', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4inscription', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 65, 20), )

    
    inscription = property(__inscription.value, __inscription.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}iersDomesNumber uses Python identifier iersDomesNumber
    __iersDomesNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'iersDomesNumber'), 'iersDomesNumber', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4iersDomesNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 67, 20), )

    
    iersDomesNumber = property(__iersDomesNumber.value, __iersDomesNumber.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}cdpNumber uses Python identifier cdpNumber
    __cdpNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cdpNumber'), 'cdpNumber', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4cdpNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 69, 20), )

    
    cdpNumber = property(__cdpNumber.value, __cdpNumber.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ngsPID uses Python identifier ngsPID
    __ngsPID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ngsPID'), 'ngsPID', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4ngsPID', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 71, 20), )

    
    ngsPID = property(__ngsPID.value, __ngsPID.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}verbalLocation uses Python identifier verbalLocation
    __verbalLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'verbalLocation'), 'verbalLocation', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4verbalLocation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 79, 20), )

    
    verbalLocation = property(__verbalLocation.value, __verbalLocation.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}geodeticPosition uses Python identifier geodeticPosition
    __geodeticPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'geodeticPosition'), 'geodeticPosition', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4geodeticPosition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 81, 20), )

    
    geodeticPosition = property(__geodeticPosition.value, __geodeticPosition.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}nearestCity uses Python identifier nearestCity
    __nearestCity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'nearestCity'), 'nearestCity', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4nearestCity', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 115, 20), )

    
    nearestCity = property(__nearestCity.value, __nearestCity.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}territory uses Python identifier territory
    __territory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'territory'), 'territory', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4territory', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 117, 20), )

    
    territory = property(__territory.value, __territory.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}country uses Python identifier country
    __country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'country'), 'country', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4country', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 119, 20), )

    
    country = property(__country.value, __country.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}monumentHeight uses Python identifier monumentHeight
    __monumentHeight = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'monumentHeight'), 'monumentHeight', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4monumentHeight', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 121, 20), )

    
    monumentHeight = property(__monumentHeight.value, __monumentHeight.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}monumentFoundation uses Python identifier monumentFoundation
    __monumentFoundation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'monumentFoundation'), 'monumentFoundation', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4monumentFoundation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 131, 20), )

    
    monumentFoundation = property(__monumentFoundation.value, __monumentFoundation.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}monumentFoundationDepth uses Python identifier monumentFoundationDepth
    __monumentFoundationDepth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'monumentFoundationDepth'), 'monumentFoundationDepth', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4monumentFoundationDepth', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 133, 20), )

    
    monumentFoundationDepth = property(__monumentFoundationDepth.value, __monumentFoundationDepth.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}geologicCharacteristics uses Python identifier geologicCharacteristics
    __geologicCharacteristics = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'geologicCharacteristics'), 'geologicCharacteristics', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticMonumentType_urnxml_gov_auicsmegeodesy0_4geologicCharacteristics', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 142, 20), )

    
    geologicCharacteristics = property(__geologicCharacteristics.value, __geologicCharacteristics.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __type.name() : __type,
        __commonName.name() : __commonName,
        __characterIdentifier.name() : __characterIdentifier,
        __inscription.name() : __inscription,
        __iersDomesNumber.name() : __iersDomesNumber,
        __cdpNumber.name() : __cdpNumber,
        __ngsPID.name() : __ngsPID,
        __verbalLocation.name() : __verbalLocation,
        __geodeticPosition.name() : __geodeticPosition,
        __nearestCity.name() : __nearestCity,
        __territory.name() : __territory,
        __country.name() : __country,
        __monumentHeight.name() : __monumentHeight,
        __monumentFoundation.name() : __monumentFoundation,
        __monumentFoundationDepth.name() : __monumentFoundationDepth,
        __geologicCharacteristics.name() : __geologicCharacteristics
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.baseGeodeticMonumentType = baseGeodeticMonumentType
Namespace.addCategoryObject('typeBinding', 'baseGeodeticMonumentType', baseGeodeticMonumentType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourcePropertyType with content type ELEMENT_ONLY
class AbstractSourcePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourcePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractSourcePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 20, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSource uses Python identifier AbstractSource
    __AbstractSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractSource'), 'AbstractSource', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourcePropertyType_urnxml_gov_auicsmegeodesy0_4AbstractSource', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 27, 4), )

    
    AbstractSource = property(__AbstractSource.value, __AbstractSource.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourcePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourcePropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourcePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourcePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourcePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourcePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourcePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourcePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourcePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __AbstractSource.name() : __AbstractSource
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.AbstractSourcePropertyType = AbstractSourcePropertyType
Namespace.addCategoryObject('typeBinding', 'AbstractSourcePropertyType', AbstractSourcePropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType with content type ELEMENT_ONLY
class AbstractSourceType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Encapsulates operands and results related to the event of running an operation. It is intended that this complex type is extended to include a reference to the particular operation type to be recorded."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractSourceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 29, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourceType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourceType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourceType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourceType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}runDate uses Python identifier runDate
    __runDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'runDate'), 'runDate', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourceType_urnxml_gov_auicsmegeodesy0_4runDate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20), )

    
    runDate = property(__runDate.value, __runDate.set, None, 'Date and time this operation was run.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}runBy uses Python identifier runBy
    __runBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'runBy'), 'runBy', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourceType_urnxml_gov_auicsmegeodesy0_4runBy', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20), )

    
    runBy = property(__runBy.value, __runBy.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}operands uses Python identifier operands
    __operands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'operands'), 'operands', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourceType_urnxml_gov_auicsmegeodesy0_4operands', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20), )

    
    operands = property(__operands.value, __operands.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}results uses Python identifier results
    __results = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'results'), 'results', '__urnxml_gov_auicsmegeodesy0_4_AbstractSourceType_urnxml_gov_auicsmegeodesy0_4results', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20), )

    
    results = property(__results.value, __results.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __validTime.name() : __validTime,
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __runDate.name() : __runDate,
        __runBy.name() : __runBy,
        __operands.name() : __operands,
        __results.name() : __results
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractSourceType = AbstractSourceType
Namespace.addCategoryObject('typeBinding', 'AbstractSourceType', AbstractSourceType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 48, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractOperand uses Python identifier AbstractOperand
    __AbstractOperand = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractOperand'), 'AbstractOperand', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_4_urnxml_gov_auicsmegeodesy0_4AbstractOperand', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 184, 4), )

    
    AbstractOperand = property(__AbstractOperand.value, __AbstractOperand.set, None, None)

    _ElementMap.update({
        __AbstractOperand.name() : __AbstractOperand
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_4 = CTD_ANON_4


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 55, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractResult uses Python identifier AbstractResult
    __AbstractResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractResult'), 'AbstractResult', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_5_urnxml_gov_auicsmegeodesy0_4AbstractResult', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 186, 4), )

    
    AbstractResult = property(__AbstractResult.value, __AbstractResult.set, None, None)

    _ElementMap.update({
        __AbstractResult.name() : __AbstractResult
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_5 = CTD_ANON_5


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractPositionSourcePropertyType with content type ELEMENT_ONLY
class AbstractPositionSourcePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractPositionSourcePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionSourcePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 67, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractPositionSource uses Python identifier AbstractPositionSource
    __AbstractPositionSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionSource'), 'AbstractPositionSource', '__urnxml_gov_auicsmegeodesy0_4_AbstractPositionSourcePropertyType_urnxml_gov_auicsmegeodesy0_4AbstractPositionSource', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 74, 4), )

    
    AbstractPositionSource = property(__AbstractPositionSource.value, __AbstractPositionSource.set, None, 'Version 0.2.2: Define an abstract type to encapsulate the inputs and outputs of an "instance" of a coordinate operation. This instance is recorded to maintain the traceable lineage of a Position value.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_AbstractPositionSourcePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_AbstractPositionSourcePropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_AbstractPositionSourcePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_AbstractPositionSourcePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_AbstractPositionSourcePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_AbstractPositionSourcePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_AbstractPositionSourcePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_AbstractPositionSourcePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_AbstractPositionSourcePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __AbstractPositionSource.name() : __AbstractPositionSource
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.AbstractPositionSourcePropertyType = AbstractPositionSourcePropertyType
Namespace.addCategoryObject('typeBinding', 'AbstractPositionSourcePropertyType', AbstractPositionSourcePropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractPositionEstimatorType with content type ELEMENT_ONLY
class AbstractPositionEstimatorType (pyxb.bundles.opengis.gml_3_2.AbstractCoordinateOperationType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractPositionEstimatorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionEstimatorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 99, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractCoordinateOperationType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractCoordinateOperationType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractCoordinateOperationType
    
    # Element operationVersion ({http://www.opengis.net/gml/3.2}operationVersion) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractPositionEstimatorType = AbstractPositionEstimatorType
Namespace.addCategoryObject('typeBinding', 'AbstractPositionEstimatorType', AbstractPositionEstimatorType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 169, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_6_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_6_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_6_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_6_urnxml_gov_auicsmegeodesy0_4description', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 171, 32), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}processReference uses Python identifier processReference
    __processReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processReference'), 'processReference', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_6_urnxml_gov_auicsmegeodesy0_4processReference', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 172, 32), )

    
    processReference = property(__processReference.value, __processReference.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}processValue uses Python identifier processValue
    __processValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processValue'), 'processValue', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_6_urnxml_gov_auicsmegeodesy0_4processValue', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 173, 32), )

    
    processValue = property(__processValue.value, __processValue.set, None, None)

    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __description.name() : __description,
        __processReference.name() : __processReference,
        __processValue.name() : __processValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_6 = CTD_ANON_6


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AnyOperandType with content type ELEMENT_ONLY
class AnyOperandType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AnyOperandType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AnyOperandType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 190, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_AnyOperandType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_AnyOperandType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_AnyOperandType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_AnyOperandType_urnxml_gov_auicsmegeodesy0_4type', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 192, 12), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__urnxml_gov_auicsmegeodesy0_4_AnyOperandType_urnxml_gov_auicsmegeodesy0_4value', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 193, 12), )

    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __type.name() : __type,
        __value.name() : __value
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AnyOperandType = AnyOperandType
Namespace.addCategoryObject('typeBinding', 'AnyOperandType', AnyOperandType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AnyResultType with content type ELEMENT_ONLY
class AnyResultType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AnyResultType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AnyResultType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 200, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_AnyResultType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_AnyResultType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_AnyResultType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_AnyResultType_urnxml_gov_auicsmegeodesy0_4type', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 202, 12), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__urnxml_gov_auicsmegeodesy0_4_AnyResultType_urnxml_gov_auicsmegeodesy0_4value', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 203, 12), )

    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __type.name() : __type,
        __value.name() : __value
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AnyResultType = AnyResultType
Namespace.addCategoryObject('typeBinding', 'AnyResultType', AnyResultType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}adjustmentMeasurementType with content type ELEMENT_ONLY
class adjustmentMeasurementType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}adjustmentMeasurementType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'adjustmentMeasurementType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 236, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_adjustmentMeasurementType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_adjustmentMeasurementType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_adjustmentMeasurementType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}usesMeasurement uses Python identifier usesMeasurement
    __usesMeasurement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usesMeasurement'), 'usesMeasurement', '__urnxml_gov_auicsmegeodesy0_4_adjustmentMeasurementType_urnxml_gov_auicsmegeodesy0_4usesMeasurement', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 238, 12), )

    
    usesMeasurement = property(__usesMeasurement.value, __usesMeasurement.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar uses Python identifier aprioriScalar
    __aprioriScalar = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar'), 'aprioriScalar', '__urnxml_gov_auicsmegeodesy0_4_adjustmentMeasurementType_urnxml_gov_auicsmegeodesy0_4aprioriScalar', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 239, 12), )

    
    aprioriScalar = property(__aprioriScalar.value, __aprioriScalar.set, None, None)

    
    # Attribute include uses Python identifier include
    __include = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'include'), 'include', '__urnxml_gov_auicsmegeodesy0_4_adjustmentMeasurementType_include', pyxb.binding.datatypes.boolean, unicode_default='true')
    __include._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 242, 8)
    __include._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 242, 8)
    
    include = property(__include.value, __include.set, None, None)

    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __usesMeasurement.name() : __usesMeasurement,
        __aprioriScalar.name() : __aprioriScalar
    })
    _AttributeMap.update({
        __include.name() : __include
    })
_module_typeBindings.adjustmentMeasurementType = adjustmentMeasurementType
Namespace.addCategoryObject('typeBinding', 'adjustmentMeasurementType', adjustmentMeasurementType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}adjustedPositionType with content type ELEMENT_ONLY
class adjustedPositionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}adjustedPositionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'adjustedPositionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 257, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_adjustedPositionType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_adjustedPositionType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_adjustedPositionType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}usesPosition uses Python identifier usesPosition
    __usesPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usesPosition'), 'usesPosition', '__urnxml_gov_auicsmegeodesy0_4_adjustedPositionType_urnxml_gov_auicsmegeodesy0_4usesPosition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 259, 12), )

    
    usesPosition = property(__usesPosition.value, __usesPosition.set, None, None)

    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __usesPosition.name() : __usesPosition
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.adjustedPositionType = adjustedPositionType
Namespace.addCategoryObject('typeBinding', 'adjustedPositionType', adjustedPositionType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}adjustedPositionQualityType with content type ELEMENT_ONLY
class adjustedPositionQualityType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}adjustedPositionQualityType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'adjustedPositionQualityType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 270, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_adjustedPositionQualityType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_adjustedPositionQualityType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_adjustedPositionQualityType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atPosition uses Python identifier atPosition
    __atPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atPosition'), 'atPosition', '__urnxml_gov_auicsmegeodesy0_4_adjustedPositionQualityType_urnxml_gov_auicsmegeodesy0_4atPosition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 272, 12), )

    
    atPosition = property(__atPosition.value, __atPosition.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}toPosition uses Python identifier toPosition
    __toPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'toPosition'), 'toPosition', '__urnxml_gov_auicsmegeodesy0_4_adjustedPositionQualityType_urnxml_gov_auicsmegeodesy0_4toPosition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 273, 12), )

    
    toPosition = property(__toPosition.value, __toPosition.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__urnxml_gov_auicsmegeodesy0_4_adjustedPositionQualityType_urnxml_gov_auicsmegeodesy0_4value', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 274, 12), )

    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __atPosition.name() : __atPosition,
        __toPosition.name() : __toPosition,
        __value.name() : __value
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.adjustedPositionQualityType = adjustedPositionQualityType
Namespace.addCategoryObject('typeBinding', 'adjustedPositionQualityType', adjustedPositionQualityType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}adjustedMeasurementType with content type ELEMENT_ONLY
class adjustedMeasurementType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}adjustedMeasurementType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'adjustedMeasurementType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 285, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atLine uses Python identifier atLine
    __atLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atLine'), 'atLine', '__urnxml_gov_auicsmegeodesy0_4_adjustedMeasurementType_urnxml_gov_auicsmegeodesy0_4atLine', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 288, 16), )

    
    atLine = property(__atLine.value, __atLine.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atPoint uses Python identifier atPoint
    __atPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atPoint'), 'atPoint', '__urnxml_gov_auicsmegeodesy0_4_adjustedMeasurementType_urnxml_gov_auicsmegeodesy0_4atPoint', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 289, 16), )

    
    atPoint = property(__atPoint.value, __atPoint.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}adjustmentValue uses Python identifier adjustmentValue
    __adjustmentValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'adjustmentValue'), 'adjustmentValue', '__urnxml_gov_auicsmegeodesy0_4_adjustedMeasurementType_urnxml_gov_auicsmegeodesy0_4adjustmentValue', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 291, 12), )

    
    adjustmentValue = property(__adjustmentValue.value, __adjustmentValue.set, None, None)

    _ElementMap.update({
        __atLine.name() : __atLine,
        __atPoint.name() : __atPoint,
        __adjustmentValue.name() : __adjustmentValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.adjustedMeasurementType = adjustedMeasurementType
Namespace.addCategoryObject('typeBinding', 'adjustedMeasurementType', adjustedMeasurementType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}transformationPositionType with content type ELEMENT_ONLY
class transformationPositionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}transformationPositionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transformationPositionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 324, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Position uses Python identifier Position
    __Position = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Position'), 'Position', '__urnxml_gov_auicsmegeodesy0_4_transformationPositionType_urnxml_gov_auicsmegeodesy0_4Position', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 366, 4), )

    
    Position = property(__Position.value, __Position.set, None, None)

    _ElementMap.update({
        __Position.name() : __Position
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.transformationPositionType = transformationPositionType
Namespace.addCategoryObject('typeBinding', 'transformationPositionType', transformationPositionType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}transformationMeasurementType with content type ELEMENT_ONLY
class transformationMeasurementType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}transformationMeasurementType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transformationMeasurementType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 336, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurement uses Python identifier AbstractMeasurement
    __AbstractMeasurement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurement'), 'AbstractMeasurement', '__urnxml_gov_auicsmegeodesy0_4_transformationMeasurementType_urnxml_gov_auicsmegeodesy0_4AbstractMeasurement', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 25, 4), )

    
    AbstractMeasurement = property(__AbstractMeasurement.value, __AbstractMeasurement.set, None, None)

    _ElementMap.update({
        __AbstractMeasurement.name() : __AbstractMeasurement
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.transformationMeasurementType = transformationMeasurementType
Namespace.addCategoryObject('typeBinding', 'transformationMeasurementType', transformationMeasurementType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}transformedPositionType with content type ELEMENT_ONLY
class transformedPositionType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}transformedPositionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transformedPositionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 348, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Position uses Python identifier Position
    __Position = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Position'), 'Position', '__urnxml_gov_auicsmegeodesy0_4_transformedPositionType_urnxml_gov_auicsmegeodesy0_4Position', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 366, 4), )

    
    Position = property(__Position.value, __Position.set, None, None)

    _ElementMap.update({
        __Position.name() : __Position
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.transformedPositionType = transformedPositionType
Namespace.addCategoryObject('typeBinding', 'transformedPositionType', transformedPositionType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}transformedMeasurementType with content type ELEMENT_ONLY
class transformedMeasurementType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}transformedMeasurementType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'transformedMeasurementType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 360, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurement uses Python identifier AbstractMeasurement
    __AbstractMeasurement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurement'), 'AbstractMeasurement', '__urnxml_gov_auicsmegeodesy0_4_transformedMeasurementType_urnxml_gov_auicsmegeodesy0_4AbstractMeasurement', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 25, 4), )

    
    AbstractMeasurement = property(__AbstractMeasurement.value, __AbstractMeasurement.set, None, None)

    _ElementMap.update({
        __AbstractMeasurement.name() : __AbstractMeasurement
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.transformedMeasurementType = transformedMeasurementType
Namespace.addCategoryObject('typeBinding', 'transformedMeasurementType', transformedMeasurementType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementSourcePropertyType with content type ELEMENT_ONLY
class AbstractMeasurementSourcePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementSourcePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementSourcePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 384, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementSource uses Python identifier AbstractMeasurementSource
    __AbstractMeasurementSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementSource'), 'AbstractMeasurementSource', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementSourcePropertyType_urnxml_gov_auicsmegeodesy0_4AbstractMeasurementSource', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 391, 4), )

    
    AbstractMeasurementSource = property(__AbstractMeasurementSource.value, __AbstractMeasurementSource.set, None, 'Version 0.2.2: Encapsulates measurement operation and the operands/results that define the operation event.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementSourcePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementSourcePropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementSourcePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementSourcePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementSourcePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementSourcePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementSourcePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementSourcePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementSourcePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __AbstractMeasurementSource.name() : __AbstractMeasurementSource
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.AbstractMeasurementSourcePropertyType = AbstractMeasurementSourcePropertyType
Namespace.addCategoryObject('typeBinding', 'AbstractMeasurementSourcePropertyType', AbstractMeasurementSourcePropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementOperationType with content type ELEMENT_ONLY
class AbstractMeasurementOperationType (pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType):
    """Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of estimators."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementOperationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 433, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}procedure uses Python identifier procedure
    __procedure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'procedure'), 'procedure', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementOperationType_urnxml_gov_auicsmegeodesy0_4procedure', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 441, 20), )

    
    procedure = property(__procedure.value, __procedure.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ReductionMethod uses Python identifier ReductionMethod
    __ReductionMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReductionMethod'), 'ReductionMethod', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementOperationType_urnxml_gov_auicsmegeodesy0_4ReductionMethod', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 476, 4), )

    
    ReductionMethod = property(__ReductionMethod.value, __ReductionMethod.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    _ElementMap.update({
        __procedure.name() : __procedure,
        __ReductionMethod.name() : __ReductionMethod
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractMeasurementOperationType = AbstractMeasurementOperationType
Namespace.addCategoryObject('typeBinding', 'AbstractMeasurementOperationType', AbstractMeasurementOperationType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MeasurementOperationPropertyType with content type ELEMENT_ONLY
class MeasurementOperationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """geo:MeasurementOperationPropertyType is a property type for association roles to a measurement operation, either referencing or containing the definition of that measurement operation."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MeasurementOperationPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 447, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementOperation uses Python identifier AbstractMeasurementOperation
    __AbstractMeasurementOperation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementOperation'), 'AbstractMeasurementOperation', '__urnxml_gov_auicsmegeodesy0_4_MeasurementOperationPropertyType_urnxml_gov_auicsmegeodesy0_4AbstractMeasurementOperation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 427, 4), )

    
    AbstractMeasurementOperation = property(__AbstractMeasurementOperation.value, __AbstractMeasurementOperation.set, None, 'Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of estimators.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_MeasurementOperationPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_MeasurementOperationPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_MeasurementOperationPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_MeasurementOperationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_MeasurementOperationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_MeasurementOperationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_MeasurementOperationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_MeasurementOperationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_MeasurementOperationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __AbstractMeasurementOperation.name() : __AbstractMeasurementOperation
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.MeasurementOperationPropertyType = MeasurementOperationPropertyType
Namespace.addCategoryObject('typeBinding', 'MeasurementOperationPropertyType', MeasurementOperationPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractDefinitionSourcePropertyType with content type ELEMENT_ONLY
class AbstractDefinitionSourcePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractDefinitionSourcePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionSourcePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 478, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractDefinitionSource uses Python identifier AbstractDefinitionSource
    __AbstractDefinitionSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionSource'), 'AbstractDefinitionSource', '__urnxml_gov_auicsmegeodesy0_4_AbstractDefinitionSourcePropertyType_urnxml_gov_auicsmegeodesy0_4AbstractDefinitionSource', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 485, 4), )

    
    AbstractDefinitionSource = property(__AbstractDefinitionSource.value, __AbstractDefinitionSource.set, None, 'Version 0.2.2: Define an abstract type to encapsulate the inputs and outputs of an "instance" of a coordinate operation. This instance is recorded to maintain the traceable lineage of a Position value.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_AbstractDefinitionSourcePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_AbstractDefinitionSourcePropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_AbstractDefinitionSourcePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_AbstractDefinitionSourcePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_AbstractDefinitionSourcePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_AbstractDefinitionSourcePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_AbstractDefinitionSourcePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_AbstractDefinitionSourcePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_AbstractDefinitionSourcePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __AbstractDefinitionSource.name() : __AbstractDefinitionSource
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.AbstractDefinitionSourcePropertyType = AbstractDefinitionSourcePropertyType
Namespace.addCategoryObject('typeBinding', 'AbstractDefinitionSourcePropertyType', AbstractDefinitionSourcePropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractDefinitionOperationType with content type ELEMENT_ONLY
class AbstractDefinitionOperationType (pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType):
    """Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of estimators."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionOperationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 527, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.IdentifiedObjectType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractDefinitionOperationType = AbstractDefinitionOperationType
Namespace.addCategoryObject('typeBinding', 'AbstractDefinitionOperationType', AbstractDefinitionOperationType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DefinitionOperationPropertyType with content type ELEMENT_ONLY
class DefinitionOperationPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """geo:DefinitionOperationPropertyType is a property type for association roles to a Definition operation, either referencing or containing the definition of that Definition operation."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DefinitionOperationPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 538, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractDefinitionOperation uses Python identifier AbstractDefinitionOperation
    __AbstractDefinitionOperation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionOperation'), 'AbstractDefinitionOperation', '__urnxml_gov_auicsmegeodesy0_4_DefinitionOperationPropertyType_urnxml_gov_auicsmegeodesy0_4AbstractDefinitionOperation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 521, 4), )

    
    AbstractDefinitionOperation = property(__AbstractDefinitionOperation.value, __AbstractDefinitionOperation.set, None, 'Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of definitons.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_DefinitionOperationPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_DefinitionOperationPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_DefinitionOperationPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_DefinitionOperationPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_DefinitionOperationPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_DefinitionOperationPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_DefinitionOperationPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_DefinitionOperationPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_DefinitionOperationPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __AbstractDefinitionOperation.name() : __AbstractDefinitionOperation
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.DefinitionOperationPropertyType = DefinitionOperationPropertyType
Namespace.addCategoryObject('typeBinding', 'DefinitionOperationPropertyType', DefinitionOperationPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}InterpolatedValueSourcePropertyType with content type ELEMENT_ONLY
class InterpolatedValueSourcePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}InterpolatedValueSourcePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterpolatedValueSourcePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 562, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}InterpolatedValueSource uses Python identifier InterpolatedValueSource
    __InterpolatedValueSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpolatedValueSource'), 'InterpolatedValueSource', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedValueSourcePropertyType_urnxml_gov_auicsmegeodesy0_4InterpolatedValueSource', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 569, 4), )

    
    InterpolatedValueSource = property(__InterpolatedValueSource.value, __InterpolatedValueSource.set, None, 'Version 0.2.2: Define an abstract type to encapsulate the operands, results and process of the operation event that produced an interpolated value.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedValueSourcePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedValueSourcePropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedValueSourcePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedValueSourcePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedValueSourcePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedValueSourcePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedValueSourcePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedValueSourcePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedValueSourcePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __InterpolatedValueSource.name() : __InterpolatedValueSource
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.InterpolatedValueSourcePropertyType = InterpolatedValueSourcePropertyType
Namespace.addCategoryObject('typeBinding', 'InterpolatedValueSourcePropertyType', InterpolatedValueSourcePropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ObservationQualitySourcePropertyType with content type ELEMENT_ONLY
class ObservationQualitySourcePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ObservationQualitySourcePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ObservationQualitySourcePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 588, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ObservationQualitySource uses Python identifier ObservationQualitySource
    __ObservationQualitySource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationQualitySource'), 'ObservationQualitySource', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualitySourcePropertyType_urnxml_gov_auicsmegeodesy0_4ObservationQualitySource', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 595, 4), )

    
    ObservationQualitySource = property(__ObservationQualitySource.value, __ObservationQualitySource.set, None, 'Version 0.2.2: Define an abstract type to encapsulate the operands, results and process of the operation event that produced observation quality meta-data.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualitySourcePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualitySourcePropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualitySourcePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualitySourcePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualitySourcePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualitySourcePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualitySourcePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualitySourcePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualitySourcePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __ObservationQualitySource.name() : __ObservationQualitySource
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.ObservationQualitySourcePropertyType = ObservationQualitySourcePropertyType
Namespace.addCategoryObject('typeBinding', 'ObservationQualitySourcePropertyType', ObservationQualitySourcePropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}basePossibleProblemSourceType with content type ELEMENT_ONLY
class basePossibleProblemSourceType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}basePossibleProblemSourceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'basePossibleProblemSourceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 28, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_basePossibleProblemSourceType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}possibleProblemSource uses Python identifier possibleProblemSource
    __possibleProblemSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'possibleProblemSource'), 'possibleProblemSource', '__urnxml_gov_auicsmegeodesy0_4_basePossibleProblemSourceType_urnxml_gov_auicsmegeodesy0_4possibleProblemSource', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 32, 20), )

    
    possibleProblemSource = property(__possibleProblemSource.value, __possibleProblemSource.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_basePossibleProblemSourceType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 34, 20), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __validTime.name() : __validTime,
        __possibleProblemSource.name() : __possibleProblemSource,
        __notes.name() : __notes
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.basePossibleProblemSourceType = basePossibleProblemSourceType
Namespace.addCategoryObject('typeBinding', 'basePossibleProblemSourceType', basePossibleProblemSourceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}localEpisodicEffectType with content type ELEMENT_ONLY
class localEpisodicEffectType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}localEpisodicEffectType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'localEpisodicEffectType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 75, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}event uses Python identifier event
    __event = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'event'), 'event', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectType_urnxml_gov_auicsmegeodesy0_4event', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 80, 20), )

    
    event = property(__event.value, __event.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __validTime.name() : __validTime,
        __event.name() : __event
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.localEpisodicEffectType = localEpisodicEffectType
Namespace.addCategoryObject('typeBinding', 'localEpisodicEffectType', localEpisodicEffectType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}multipathSourcePropertyType with content type ELEMENT_ONLY
class multipathSourcePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}multipathSourcePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'multipathSourcePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 91, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_multipathSourcePropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_multipathSourcePropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_multipathSourcePropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}MultipathSource uses Python identifier MultipathSource
    __MultipathSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MultipathSource'), 'MultipathSource', '__urnxml_gov_auicsmegeodesy0_4_multipathSourcePropertyType_urnxml_gov_auicsmegeodesy0_4MultipathSource', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 86, 4), )

    
    MultipathSource = property(__MultipathSource.value, __MultipathSource.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_multipathSourcePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_multipathSourcePropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_multipathSourcePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_multipathSourcePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_multipathSourcePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_multipathSourcePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_multipathSourcePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_multipathSourcePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_multipathSourcePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __MultipathSource.name() : __MultipathSource
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.multipathSourcePropertyType = multipathSourcePropertyType
Namespace.addCategoryObject('typeBinding', 'multipathSourcePropertyType', multipathSourcePropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}signalObstructionPropertyType with content type ELEMENT_ONLY
class signalObstructionPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}signalObstructionPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'signalObstructionPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 101, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_signalObstructionPropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_signalObstructionPropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_signalObstructionPropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}SignalObstruction uses Python identifier SignalObstruction
    __SignalObstruction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SignalObstruction'), 'SignalObstruction', '__urnxml_gov_auicsmegeodesy0_4_signalObstructionPropertyType_urnxml_gov_auicsmegeodesy0_4SignalObstruction', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 87, 4), )

    
    SignalObstruction = property(__SignalObstruction.value, __SignalObstruction.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_signalObstructionPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_signalObstructionPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_signalObstructionPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_signalObstructionPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_signalObstructionPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_signalObstructionPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_signalObstructionPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_signalObstructionPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_signalObstructionPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __SignalObstruction.name() : __SignalObstruction
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.signalObstructionPropertyType = signalObstructionPropertyType
Namespace.addCategoryObject('typeBinding', 'signalObstructionPropertyType', signalObstructionPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}radioInterferencePropertyType with content type ELEMENT_ONLY
class radioInterferencePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}radioInterferencePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'radioInterferencePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 111, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_radioInterferencePropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_radioInterferencePropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_radioInterferencePropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}RadioInterference uses Python identifier RadioInterference
    __RadioInterference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RadioInterference'), 'RadioInterference', '__urnxml_gov_auicsmegeodesy0_4_radioInterferencePropertyType_urnxml_gov_auicsmegeodesy0_4RadioInterference', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 88, 4), )

    
    RadioInterference = property(__RadioInterference.value, __RadioInterference.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_radioInterferencePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_radioInterferencePropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_radioInterferencePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_radioInterferencePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_radioInterferencePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_radioInterferencePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_radioInterferencePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_radioInterferencePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_radioInterferencePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __RadioInterference.name() : __RadioInterference
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.radioInterferencePropertyType = radioInterferencePropertyType
Namespace.addCategoryObject('typeBinding', 'radioInterferencePropertyType', radioInterferencePropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}localEpisodicEffectPropertyType with content type ELEMENT_ONLY
class localEpisodicEffectPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}localEpisodicEffectPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'localEpisodicEffectPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 121, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInserted uses Python identifier dateInserted
    __dateInserted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), 'dateInserted', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectPropertyType_urnxml_gov_auicsmegeodesy0_4dateInserted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16), )

    
    dateInserted = property(__dateInserted.value, __dateInserted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateDeleted uses Python identifier dateDeleted
    __dateDeleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), 'dateDeleted', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectPropertyType_urnxml_gov_auicsmegeodesy0_4dateDeleted', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16), )

    
    dateDeleted = property(__dateDeleted.value, __dateDeleted.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}deletedReason uses Python identifier deletedReason
    __deletedReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), 'deletedReason', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectPropertyType_urnxml_gov_auicsmegeodesy0_4deletedReason', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16), )

    
    deletedReason = property(__deletedReason.value, __deletedReason.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}LocalEpisodicEffect uses Python identifier LocalEpisodicEffect
    __LocalEpisodicEffect = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LocalEpisodicEffect'), 'LocalEpisodicEffect', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectPropertyType_urnxml_gov_auicsmegeodesy0_4LocalEpisodicEffect', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 89, 4), )

    
    LocalEpisodicEffect = property(__LocalEpisodicEffect.value, __LocalEpisodicEffect.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_localEpisodicEffectPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __dateInserted.name() : __dateInserted,
        __dateDeleted.name() : __dateDeleted,
        __deletedReason.name() : __deletedReason,
        __LocalEpisodicEffect.name() : __LocalEpisodicEffect
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.localEpisodicEffectPropertyType = localEpisodicEffectPropertyType
Namespace.addCategoryObject('typeBinding', 'localEpisodicEffectPropertyType', localEpisodicEffectPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementPropertyType with content type ELEMENT_ONLY
class AbstractMeasurementPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 18, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurement uses Python identifier AbstractMeasurement
    __AbstractMeasurement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurement'), 'AbstractMeasurement', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementPropertyType_urnxml_gov_auicsmegeodesy0_4AbstractMeasurement', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 25, 4), )

    
    AbstractMeasurement = property(__AbstractMeasurement.value, __AbstractMeasurement.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __AbstractMeasurement.name() : __AbstractMeasurement
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.AbstractMeasurementPropertyType = AbstractMeasurementPropertyType
Namespace.addCategoryObject('typeBinding', 'AbstractMeasurementPropertyType', AbstractMeasurementPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType with content type ELEMENT_ONLY
class AbstractMeasurementType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 27, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar uses Python identifier aprioriScalar
    __aprioriScalar = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar'), 'aprioriScalar', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementType_urnxml_gov_auicsmegeodesy0_4aprioriScalar', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20), )

    
    aprioriScalar = property(__aprioriScalar.value, __aprioriScalar.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}fromProject uses Python identifier fromProject
    __fromProject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fromProject'), 'fromProject', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementType_urnxml_gov_auicsmegeodesy0_4fromProject', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20), )

    
    fromProject = property(__fromProject.value, __fromProject.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'source'), 'source', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementType_urnxml_gov_auicsmegeodesy0_4source', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20), )

    
    source = property(__source.value, __source.set, None, 'A reference to the source of the measurement. An example is a static GNSS baseline reduction from a pair of RINEX files via baseline processing software. Another example is atmospheric correction of a raw EDM measurement. Optional.')

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __validTime.name() : __validTime,
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __aprioriScalar.name() : __aprioriScalar,
        __fromProject.name() : __fromProject,
        __source.name() : __source
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractMeasurementType = AbstractMeasurementType
Namespace.addCategoryObject('typeBinding', 'AbstractMeasurementType', AbstractMeasurementType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MeasurementPointType with content type ELEMENT_ONLY
class MeasurementPointType (pyxb.bundles.opengis.gml_3_2.AbstractGMLType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MeasurementPointType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MeasurementPointType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 96, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atSetup uses Python identifier atSetup
    __atSetup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atSetup'), 'atSetup', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointType_urnxml_gov_auicsmegeodesy0_4atSetup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 100, 20), )

    
    atSetup = property(__atSetup.value, __atSetup.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atNode uses Python identifier atNode
    __atNode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atNode'), 'atNode', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointType_urnxml_gov_auicsmegeodesy0_4atNode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 101, 20), )

    
    atNode = property(__atNode.value, __atNode.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atHeight uses Python identifier atHeight
    __atHeight = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atHeight'), 'atHeight', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointType_urnxml_gov_auicsmegeodesy0_4atHeight', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 102, 20), )

    
    atHeight = property(__atHeight.value, __atHeight.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointType_urnxml_gov_auicsmegeodesy0_4value', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 103, 20), )

    
    value_ = property(__value.value, __value.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractQuality uses Python identifier AbstractQuality
    __AbstractQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), 'AbstractQuality', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointType_urnxml_gov_auicsmegeodesy0_4AbstractQuality', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4), )

    
    AbstractQuality = property(__AbstractQuality.value, __AbstractQuality.set, None, 'Abstract group for quality values.')

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __atSetup.name() : __atSetup,
        __atNode.name() : __atNode,
        __atHeight.name() : __atHeight,
        __value.name() : __value,
        __AbstractQuality.name() : __AbstractQuality
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MeasurementPointType = MeasurementPointType
Namespace.addCategoryObject('typeBinding', 'MeasurementPointType', MeasurementPointType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 104, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.double
    
    # Attribute uomLabel uses Python identifier uomLabel
    __uomLabel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabel'), 'uomLabel', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_7_uomLabel', pyxb.binding.datatypes.NCName)
    __uomLabel._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 107, 36)
    __uomLabel._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 107, 36)
    
    uomLabel = property(__uomLabel.value, __uomLabel.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uomLabel.name() : __uomLabel
    })
_module_typeBindings.CTD_ANON_7 = CTD_ANON_7


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MeasurementLineType with content type ELEMENT_ONLY
class MeasurementLineType (pyxb.bundles.opengis.gml_3_2.AbstractGMLType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MeasurementLineType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MeasurementLineType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 119, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atSetup uses Python identifier atSetup
    __atSetup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atSetup'), 'atSetup', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineType_urnxml_gov_auicsmegeodesy0_4atSetup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 123, 20), )

    
    atSetup = property(__atSetup.value, __atSetup.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}toSetup uses Python identifier toSetup
    __toSetup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'toSetup'), 'toSetup', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineType_urnxml_gov_auicsmegeodesy0_4toSetup', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 124, 20), )

    
    toSetup = property(__toSetup.value, __toSetup.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atNode uses Python identifier atNode
    __atNode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atNode'), 'atNode', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineType_urnxml_gov_auicsmegeodesy0_4atNode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 125, 20), )

    
    atNode = property(__atNode.value, __atNode.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atHeight uses Python identifier atHeight
    __atHeight = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atHeight'), 'atHeight', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineType_urnxml_gov_auicsmegeodesy0_4atHeight', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 126, 20), )

    
    atHeight = property(__atHeight.value, __atHeight.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}toNode uses Python identifier toNode
    __toNode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'toNode'), 'toNode', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineType_urnxml_gov_auicsmegeodesy0_4toNode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 127, 20), )

    
    toNode = property(__toNode.value, __toNode.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}toHeight uses Python identifier toHeight
    __toHeight = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'toHeight'), 'toHeight', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineType_urnxml_gov_auicsmegeodesy0_4toHeight', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 128, 20), )

    
    toHeight = property(__toHeight.value, __toHeight.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineType_urnxml_gov_auicsmegeodesy0_4value', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 129, 20), )

    
    value_ = property(__value.value, __value.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractQuality uses Python identifier AbstractQuality
    __AbstractQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), 'AbstractQuality', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineType_urnxml_gov_auicsmegeodesy0_4AbstractQuality', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4), )

    
    AbstractQuality = property(__AbstractQuality.value, __AbstractQuality.set, None, 'Abstract group for quality values.')

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __atSetup.name() : __atSetup,
        __toSetup.name() : __toSetup,
        __atNode.name() : __atNode,
        __atHeight.name() : __atHeight,
        __toNode.name() : __toNode,
        __toHeight.name() : __toHeight,
        __value.name() : __value,
        __AbstractQuality.name() : __AbstractQuality
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MeasurementLineType = MeasurementLineType
Namespace.addCategoryObject('typeBinding', 'MeasurementLineType', MeasurementLineType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.bundles.opengis.gml_3_2.doubleList
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 130, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.bundles.opengis.gml_3_2.doubleList
    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_8_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 133, 36)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 133, 36)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uomLabels.name() : __uomLabels
    })
_module_typeBindings.CTD_ANON_8 = CTD_ANON_8


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MeasurementLineCovarianceType with content type ELEMENT_ONLY
class MeasurementLineCovarianceType (pyxb.bundles.opengis.gml_3_2.AbstractGMLType):
    """Covariances between measurementLines."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MeasurementLineCovarianceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 145, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineCovarianceType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineCovarianceType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineCovarianceType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atLine uses Python identifier atLine
    __atLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atLine'), 'atLine', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineCovarianceType_urnxml_gov_auicsmegeodesy0_4atLine', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 152, 20), )

    
    atLine = property(__atLine.value, __atLine.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}toLine uses Python identifier toLine
    __toLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'toLine'), 'toLine', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineCovarianceType_urnxml_gov_auicsmegeodesy0_4toLine', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 153, 20), )

    
    toLine = property(__toLine.value, __toLine.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractQuality uses Python identifier AbstractQuality
    __AbstractQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), 'AbstractQuality', '__urnxml_gov_auicsmegeodesy0_4_MeasurementLineCovarianceType_urnxml_gov_auicsmegeodesy0_4AbstractQuality', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4), )

    
    AbstractQuality = property(__AbstractQuality.value, __AbstractQuality.set, None, 'Abstract group for quality values.')

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __atLine.name() : __atLine,
        __toLine.name() : __toLine,
        __AbstractQuality.name() : __AbstractQuality
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MeasurementLineCovarianceType = MeasurementLineCovarianceType
Namespace.addCategoryObject('typeBinding', 'MeasurementLineCovarianceType', MeasurementLineCovarianceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MeasurementPointCovarianceType with content type ELEMENT_ONLY
class MeasurementPointCovarianceType (pyxb.bundles.opengis.gml_3_2.AbstractGMLType):
    """Covariances between measurementLines."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MeasurementPointCovarianceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 161, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractGMLType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractGMLType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointCovarianceType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointCovarianceType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointCovarianceType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atPoint uses Python identifier atPoint
    __atPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atPoint'), 'atPoint', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointCovarianceType_urnxml_gov_auicsmegeodesy0_4atPoint', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 168, 20), )

    
    atPoint = property(__atPoint.value, __atPoint.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}toPoint uses Python identifier toPoint
    __toPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'toPoint'), 'toPoint', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointCovarianceType_urnxml_gov_auicsmegeodesy0_4toPoint', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 169, 20), )

    
    toPoint = property(__toPoint.value, __toPoint.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractQuality uses Python identifier AbstractQuality
    __AbstractQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), 'AbstractQuality', '__urnxml_gov_auicsmegeodesy0_4_MeasurementPointCovarianceType_urnxml_gov_auicsmegeodesy0_4AbstractQuality', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4), )

    
    AbstractQuality = property(__AbstractQuality.value, __AbstractQuality.set, None, 'Abstract group for quality values.')

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __atPoint.name() : __atPoint,
        __toPoint.name() : __toPoint,
        __AbstractQuality.name() : __AbstractQuality
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MeasurementPointCovarianceType = MeasurementPointCovarianceType
Namespace.addCategoryObject('typeBinding', 'MeasurementPointCovarianceType', MeasurementPointCovarianceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}formInformationType with content type ELEMENT_ONLY
class formInformationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}formInformationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'formInformationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 147, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}preparedBy uses Python identifier preparedBy
    __preparedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'preparedBy'), 'preparedBy', '__urnxml_gov_auicsmegeodesy0_4_formInformationType_urnxml_gov_auicsmegeodesy0_4preparedBy', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 149, 12), )

    
    preparedBy = property(__preparedBy.value, __preparedBy.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}datePrepared uses Python identifier datePrepared
    __datePrepared = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'datePrepared'), 'datePrepared', '__urnxml_gov_auicsmegeodesy0_4_formInformationType_urnxml_gov_auicsmegeodesy0_4datePrepared', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 150, 12), )

    
    datePrepared = property(__datePrepared.value, __datePrepared.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}reportType uses Python identifier reportType
    __reportType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'reportType'), 'reportType', '__urnxml_gov_auicsmegeodesy0_4_formInformationType_urnxml_gov_auicsmegeodesy0_4reportType', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 151, 12), )

    
    reportType = property(__reportType.value, __reportType.set, None, None)

    _ElementMap.update({
        __preparedBy.name() : __preparedBy,
        __datePrepared.name() : __datePrepared,
        __reportType.name() : __reportType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.formInformationType = formInformationType
Namespace.addCategoryObject('typeBinding', 'formInformationType', formInformationType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}moreInformationType with content type ELEMENT_ONLY
class moreInformationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}moreInformationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'moreInformationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 154, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dataCenter uses Python identifier dataCenter
    __dataCenter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dataCenter'), 'dataCenter', '__urnxml_gov_auicsmegeodesy0_4_moreInformationType_urnxml_gov_auicsmegeodesy0_4dataCenter', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 156, 12), )

    
    dataCenter = property(__dataCenter.value, __dataCenter.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}urlForMoreInformation uses Python identifier urlForMoreInformation
    __urlForMoreInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'urlForMoreInformation'), 'urlForMoreInformation', '__urnxml_gov_auicsmegeodesy0_4_moreInformationType_urnxml_gov_auicsmegeodesy0_4urlForMoreInformation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 157, 12), )

    
    urlForMoreInformation = property(__urlForMoreInformation.value, __urlForMoreInformation.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}siteMap uses Python identifier siteMap
    __siteMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'siteMap'), 'siteMap', '__urnxml_gov_auicsmegeodesy0_4_moreInformationType_urnxml_gov_auicsmegeodesy0_4siteMap', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 158, 12), )

    
    siteMap = property(__siteMap.value, __siteMap.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}siteDiagram uses Python identifier siteDiagram
    __siteDiagram = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'siteDiagram'), 'siteDiagram', '__urnxml_gov_auicsmegeodesy0_4_moreInformationType_urnxml_gov_auicsmegeodesy0_4siteDiagram', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 159, 12), )

    
    siteDiagram = property(__siteDiagram.value, __siteDiagram.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}horizonMask uses Python identifier horizonMask
    __horizonMask = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'horizonMask'), 'horizonMask', '__urnxml_gov_auicsmegeodesy0_4_moreInformationType_urnxml_gov_auicsmegeodesy0_4horizonMask', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 160, 12), )

    
    horizonMask = property(__horizonMask.value, __horizonMask.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}monumentDescription uses Python identifier monumentDescription
    __monumentDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'monumentDescription'), 'monumentDescription', '__urnxml_gov_auicsmegeodesy0_4_moreInformationType_urnxml_gov_auicsmegeodesy0_4monumentDescription', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 161, 12), )

    
    monumentDescription = property(__monumentDescription.value, __monumentDescription.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}sitePictures uses Python identifier sitePictures
    __sitePictures = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sitePictures'), 'sitePictures', '__urnxml_gov_auicsmegeodesy0_4_moreInformationType_urnxml_gov_auicsmegeodesy0_4sitePictures', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 162, 12), )

    
    sitePictures = property(__sitePictures.value, __sitePictures.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_moreInformationType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 163, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}antennaGraphicsWithDimensions uses Python identifier antennaGraphicsWithDimensions
    __antennaGraphicsWithDimensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'antennaGraphicsWithDimensions'), 'antennaGraphicsWithDimensions', '__urnxml_gov_auicsmegeodesy0_4_moreInformationType_urnxml_gov_auicsmegeodesy0_4antennaGraphicsWithDimensions', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 164, 12), )

    
    antennaGraphicsWithDimensions = property(__antennaGraphicsWithDimensions.value, __antennaGraphicsWithDimensions.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}insertTextGraphicFromAntenna uses Python identifier insertTextGraphicFromAntenna
    __insertTextGraphicFromAntenna = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'insertTextGraphicFromAntenna'), 'insertTextGraphicFromAntenna', '__urnxml_gov_auicsmegeodesy0_4_moreInformationType_urnxml_gov_auicsmegeodesy0_4insertTextGraphicFromAntenna', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 165, 12), )

    
    insertTextGraphicFromAntenna = property(__insertTextGraphicFromAntenna.value, __insertTextGraphicFromAntenna.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}DOI uses Python identifier DOI
    __DOI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DOI'), 'DOI', '__urnxml_gov_auicsmegeodesy0_4_moreInformationType_urnxml_gov_auicsmegeodesy0_4DOI', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 166, 12), )

    
    DOI = property(__DOI.value, __DOI.set, None, 'Data Digital Object Identifier')

    _ElementMap.update({
        __dataCenter.name() : __dataCenter,
        __urlForMoreInformation.name() : __urlForMoreInformation,
        __siteMap.name() : __siteMap,
        __siteDiagram.name() : __siteDiagram,
        __horizonMask.name() : __horizonMask,
        __monumentDescription.name() : __monumentDescription,
        __sitePictures.name() : __sitePictures,
        __notes.name() : __notes,
        __antennaGraphicsWithDimensions.name() : __antennaGraphicsWithDimensions,
        __insertTextGraphicFromAntenna.name() : __insertTextGraphicFromAntenna,
        __DOI.name() : __DOI
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.moreInformationType = moreInformationType
Namespace.addCategoryObject('typeBinding', 'moreInformationType', moreInformationType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}siteIdentificationType with content type ELEMENT_ONLY
class siteIdentificationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}siteIdentificationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'siteIdentificationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 173, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}siteName uses Python identifier siteName
    __siteName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'siteName'), 'siteName', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4siteName', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 175, 12), )

    
    siteName = property(__siteName.value, __siteName.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}fourCharacterID uses Python identifier fourCharacterID
    __fourCharacterID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fourCharacterID'), 'fourCharacterID', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4fourCharacterID', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 176, 12), )

    
    fourCharacterID = property(__fourCharacterID.value, __fourCharacterID.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}monumentNumber uses Python identifier monumentNumber
    __monumentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'monumentNumber'), 'monumentNumber', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4monumentNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 177, 12), )

    
    monumentNumber = property(__monumentNumber.value, __monumentNumber.set, None, 'Number of monuments at the site')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}receiverNumber uses Python identifier receiverNumber
    __receiverNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'receiverNumber'), 'receiverNumber', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4receiverNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 187, 12), )

    
    receiverNumber = property(__receiverNumber.value, __receiverNumber.set, None, 'Number of receivers at the site')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}monumentInscription uses Python identifier monumentInscription
    __monumentInscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'monumentInscription'), 'monumentInscription', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4monumentInscription', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 197, 12), )

    
    monumentInscription = property(__monumentInscription.value, __monumentInscription.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}iersDOMESNumber uses Python identifier iersDOMESNumber
    __iersDOMESNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'iersDOMESNumber'), 'iersDOMESNumber', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4iersDOMESNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 198, 12), )

    
    iersDOMESNumber = property(__iersDOMESNumber.value, __iersDOMESNumber.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}cdpNumber uses Python identifier cdpNumber
    __cdpNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cdpNumber'), 'cdpNumber', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4cdpNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 199, 12), )

    
    cdpNumber = property(__cdpNumber.value, __cdpNumber.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}monumentDescription uses Python identifier monumentDescription
    __monumentDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'monumentDescription'), 'monumentDescription', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4monumentDescription', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 201, 12), )

    
    monumentDescription = property(__monumentDescription.value, __monumentDescription.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}heightOfTheMonument uses Python identifier heightOfTheMonument
    __heightOfTheMonument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heightOfTheMonument'), 'heightOfTheMonument', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4heightOfTheMonument', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 202, 12), )

    
    heightOfTheMonument = property(__heightOfTheMonument.value, __heightOfTheMonument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}monumentFoundation uses Python identifier monumentFoundation
    __monumentFoundation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'monumentFoundation'), 'monumentFoundation', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4monumentFoundation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 203, 12), )

    
    monumentFoundation = property(__monumentFoundation.value, __monumentFoundation.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}foundationDepth uses Python identifier foundationDepth
    __foundationDepth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'foundationDepth'), 'foundationDepth', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4foundationDepth', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 204, 12), )

    
    foundationDepth = property(__foundationDepth.value, __foundationDepth.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}markerDescription uses Python identifier markerDescription
    __markerDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'markerDescription'), 'markerDescription', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4markerDescription', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 205, 12), )

    
    markerDescription = property(__markerDescription.value, __markerDescription.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInstalled uses Python identifier dateInstalled
    __dateInstalled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInstalled'), 'dateInstalled', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4dateInstalled', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 206, 12), )

    
    dateInstalled = property(__dateInstalled.value, __dateInstalled.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}geologicCharacteristic uses Python identifier geologicCharacteristic
    __geologicCharacteristic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'geologicCharacteristic'), 'geologicCharacteristic', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4geologicCharacteristic', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 208, 12), )

    
    geologicCharacteristic = property(__geologicCharacteristic.value, __geologicCharacteristic.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}bedrockType uses Python identifier bedrockType
    __bedrockType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bedrockType'), 'bedrockType', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4bedrockType', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 209, 12), )

    
    bedrockType = property(__bedrockType.value, __bedrockType.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}bedrockCondition uses Python identifier bedrockCondition
    __bedrockCondition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bedrockCondition'), 'bedrockCondition', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4bedrockCondition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 210, 12), )

    
    bedrockCondition = property(__bedrockCondition.value, __bedrockCondition.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}fractureSpacing uses Python identifier fractureSpacing
    __fractureSpacing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fractureSpacing'), 'fractureSpacing', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4fractureSpacing', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 211, 12), )

    
    fractureSpacing = property(__fractureSpacing.value, __fractureSpacing.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}faultZonesNearby uses Python identifier faultZonesNearby
    __faultZonesNearby = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'faultZonesNearby'), 'faultZonesNearby', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4faultZonesNearby', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 213, 12), )

    
    faultZonesNearby = property(__faultZonesNearby.value, __faultZonesNearby.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}distance-Activity uses Python identifier distance_Activity
    __distance_Activity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'distance-Activity'), 'distance_Activity', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4distance_Activity', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 214, 12), )

    
    distance_Activity = property(__distance_Activity.value, __distance_Activity.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_siteIdentificationType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 215, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    _ElementMap.update({
        __siteName.name() : __siteName,
        __fourCharacterID.name() : __fourCharacterID,
        __monumentNumber.name() : __monumentNumber,
        __receiverNumber.name() : __receiverNumber,
        __monumentInscription.name() : __monumentInscription,
        __iersDOMESNumber.name() : __iersDOMESNumber,
        __cdpNumber.name() : __cdpNumber,
        __monumentDescription.name() : __monumentDescription,
        __heightOfTheMonument.name() : __heightOfTheMonument,
        __monumentFoundation.name() : __monumentFoundation,
        __foundationDepth.name() : __foundationDepth,
        __markerDescription.name() : __markerDescription,
        __dateInstalled.name() : __dateInstalled,
        __geologicCharacteristic.name() : __geologicCharacteristic,
        __bedrockType.name() : __bedrockType,
        __bedrockCondition.name() : __bedrockCondition,
        __fractureSpacing.name() : __fractureSpacing,
        __faultZonesNearby.name() : __faultZonesNearby,
        __distance_Activity.name() : __distance_Activity,
        __notes.name() : __notes
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.siteIdentificationType = siteIdentificationType
Namespace.addCategoryObject('typeBinding', 'siteIdentificationType', siteIdentificationType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}cartesianPosition with content type ELEMENT_ONLY
class cartesianPosition (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}cartesianPosition with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'cartesianPosition')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 219, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Point uses Python identifier Point
    __Point = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'Point'), 'Point', '__urnxml_gov_auicsmegeodesy0_4_cartesianPosition_httpwww_opengis_netgml3_2Point', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 189, 1), )

    
    Point = property(__Point.value, __Point.set, None, 'A Point is defined by a single coordinate tuple. The direct position of a point is specified by the pos element which is of type DirectPositionType.')

    _ElementMap.update({
        __Point.name() : __Point
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.cartesianPosition = cartesianPosition
Namespace.addCategoryObject('typeBinding', 'cartesianPosition', cartesianPosition)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}geodeticPosition with content type ELEMENT_ONLY
class geodeticPosition (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}geodeticPosition with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'geodeticPosition')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 224, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}Point uses Python identifier Point
    __Point = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'Point'), 'Point', '__urnxml_gov_auicsmegeodesy0_4_geodeticPosition_httpwww_opengis_netgml3_2Point', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 189, 1), )

    
    Point = property(__Point.value, __Point.set, None, 'A Point is defined by a single coordinate tuple. The direct position of a point is specified by the pos element which is of type DirectPositionType.')

    _ElementMap.update({
        __Point.name() : __Point
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.geodeticPosition = geodeticPosition
Namespace.addCategoryObject('typeBinding', 'geodeticPosition', geodeticPosition)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}siteLocationType with content type ELEMENT_ONLY
class siteLocationType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}siteLocationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'siteLocationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 230, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}city uses Python identifier city
    __city = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'city'), 'city', '__urnxml_gov_auicsmegeodesy0_4_siteLocationType_urnxml_gov_auicsmegeodesy0_4city', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 232, 12), )

    
    city = property(__city.value, __city.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}state uses Python identifier state
    __state = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'state'), 'state', '__urnxml_gov_auicsmegeodesy0_4_siteLocationType_urnxml_gov_auicsmegeodesy0_4state', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 233, 12), )

    
    state = property(__state.value, __state.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}countryCodeISO uses Python identifier countryCodeISO
    __countryCodeISO = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'countryCodeISO'), 'countryCodeISO', '__urnxml_gov_auicsmegeodesy0_4_siteLocationType_urnxml_gov_auicsmegeodesy0_4countryCodeISO', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 234, 12), )

    
    countryCodeISO = property(__countryCodeISO.value, __countryCodeISO.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}tectonicPlate uses Python identifier tectonicPlate
    __tectonicPlate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tectonicPlate'), 'tectonicPlate', '__urnxml_gov_auicsmegeodesy0_4_siteLocationType_urnxml_gov_auicsmegeodesy0_4tectonicPlate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 236, 12), )

    
    tectonicPlate = property(__tectonicPlate.value, __tectonicPlate.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}approximatePositionITRF uses Python identifier approximatePositionITRF
    __approximatePositionITRF = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'approximatePositionITRF'), 'approximatePositionITRF', '__urnxml_gov_auicsmegeodesy0_4_siteLocationType_urnxml_gov_auicsmegeodesy0_4approximatePositionITRF', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 238, 12), )

    
    approximatePositionITRF = property(__approximatePositionITRF.value, __approximatePositionITRF.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_siteLocationType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 248, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    _ElementMap.update({
        __city.name() : __city,
        __state.name() : __state,
        __countryCodeISO.name() : __countryCodeISO,
        __tectonicPlate.name() : __tectonicPlate,
        __approximatePositionITRF.name() : __approximatePositionITRF,
        __notes.name() : __notes
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.siteLocationType = siteLocationType
Namespace.addCategoryObject('typeBinding', 'siteLocationType', siteLocationType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 239, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}cartesianPosition uses Python identifier cartesianPosition
    __cartesianPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cartesianPosition'), 'cartesianPosition', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_9_urnxml_gov_auicsmegeodesy0_4cartesianPosition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 242, 18), )

    
    cartesianPosition = property(__cartesianPosition.value, __cartesianPosition.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}geodeticPosition uses Python identifier geodeticPosition
    __geodeticPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'geodeticPosition'), 'geodeticPosition', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_9_urnxml_gov_auicsmegeodesy0_4geodeticPosition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 243, 18), )

    
    geodeticPosition = property(__geodeticPosition.value, __geodeticPosition.set, None, None)

    _ElementMap.update({
        __cartesianPosition.name() : __cartesianPosition,
        __geodeticPosition.name() : __geodeticPosition
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_9 = CTD_ANON_9


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType with content type ELEMENT_ONLY
class AbstractMonumentType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Contains information about the physical monument."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractMonumentType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 17, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_AbstractMonumentType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_AbstractMonumentType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_AbstractMonumentType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_AbstractMonumentType_urnxml_gov_auicsmegeodesy0_4type', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 24, 20), )

    
    type = property(__type.value, __type.set, None, 'Monument Type Code e.g. STEEL PILLAR')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}installedBy uses Python identifier installedBy
    __installedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'installedBy'), 'installedBy', '__urnxml_gov_auicsmegeodesy0_4_AbstractMonumentType_urnxml_gov_auicsmegeodesy0_4installedBy', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 34, 20), )

    
    installedBy = property(__installedBy.value, __installedBy.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}installedDate uses Python identifier installedDate
    __installedDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'installedDate'), 'installedDate', '__urnxml_gov_auicsmegeodesy0_4_AbstractMonumentType_urnxml_gov_auicsmegeodesy0_4installedDate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 35, 20), )

    
    installedDate = property(__installedDate.value, __installedDate.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Status uses Python identifier Status
    __Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Status'), 'Status', '__urnxml_gov_auicsmegeodesy0_4_AbstractMonumentType_urnxml_gov_auicsmegeodesy0_4Status', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4), )

    
    Status = property(__Status.value, __Status.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __type.name() : __type,
        __installedBy.name() : __installedBy,
        __installedDate.name() : __installedDate,
        __Status.name() : __Status
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractMonumentType = AbstractMonumentType
Namespace.addCategoryObject('typeBinding', 'AbstractMonumentType', AbstractMonumentType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SitePropertyType with content type ELEMENT_ONLY
class SitePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SitePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SitePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 42, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Site uses Python identifier Site
    __Site = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Site'), 'Site', '__urnxml_gov_auicsmegeodesy0_4_SitePropertyType_urnxml_gov_auicsmegeodesy0_4Site', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 63, 4), )

    
    Site = property(__Site.value, __Site.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_SitePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_SitePropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_SitePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_SitePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_SitePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_SitePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_SitePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_SitePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_SitePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Site.name() : __Site
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.SitePropertyType = SitePropertyType
Namespace.addCategoryObject('typeBinding', 'SitePropertyType', SitePropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentPropertyType with content type ELEMENT_ONLY
class MonumentPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MonumentPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 49, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Monument uses Python identifier Monument
    __Monument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Monument'), 'Monument', '__urnxml_gov_auicsmegeodesy0_4_MonumentPropertyType_urnxml_gov_auicsmegeodesy0_4Monument', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 79, 4), )

    
    Monument = property(__Monument.value, __Monument.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_MonumentPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_MonumentPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_MonumentPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_MonumentPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_MonumentPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_MonumentPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_MonumentPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_MonumentPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_MonumentPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Monument.name() : __Monument
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.MonumentPropertyType = MonumentPropertyType
Namespace.addCategoryObject('typeBinding', 'MonumentPropertyType', MonumentPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SupplementaryMarkPropertyType with content type ELEMENT_ONLY
class SupplementaryMarkPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SupplementaryMarkPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SupplementaryMarkPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 56, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}SupplementaryMark uses Python identifier SupplementaryMark
    __SupplementaryMark = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SupplementaryMark'), 'SupplementaryMark', '__urnxml_gov_auicsmegeodesy0_4_SupplementaryMarkPropertyType_urnxml_gov_auicsmegeodesy0_4SupplementaryMark', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 105, 4), )

    
    SupplementaryMark = property(__SupplementaryMark.value, __SupplementaryMark.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_SupplementaryMarkPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_SupplementaryMarkPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_SupplementaryMarkPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_SupplementaryMarkPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_SupplementaryMarkPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_SupplementaryMarkPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_SupplementaryMarkPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_SupplementaryMarkPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_SupplementaryMarkPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __SupplementaryMark.name() : __SupplementaryMark
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.SupplementaryMarkPropertyType = SupplementaryMarkPropertyType
Namespace.addCategoryObject('typeBinding', 'SupplementaryMarkPropertyType', SupplementaryMarkPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSiteLogType with content type ELEMENT_ONLY
class AbstractSiteLogType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSiteLogType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractSiteLogType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 122, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atSite uses Python identifier atSite
    __atSite = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atSite'), 'atSite', '__urnxml_gov_auicsmegeodesy0_4_AbstractSiteLogType_urnxml_gov_auicsmegeodesy0_4atSite', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 126, 20), )

    
    atSite = property(__atSite.value, __atSite.set, None, None)

    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_AbstractSiteLogType_srsName', pyxb.binding.datatypes.anyURI)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_AbstractSiteLogType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_AbstractSiteLogType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_AbstractSiteLogType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __atSite.name() : __atSite
    })
    _AttributeMap.update({
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension,
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels
    })
_module_typeBindings.AbstractSiteLogType = AbstractSiteLogType
Namespace.addCategoryObject('typeBinding', 'AbstractSiteLogType', AbstractSiteLogType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SiteVisitType with content type ELEMENT_ONLY
class SiteVisitType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Contains information about the Site Visit at the site."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SiteVisitType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 134, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_SiteVisitType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_SiteVisitType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_SiteVisitType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atSite uses Python identifier atSite
    __atSite = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atSite'), 'atSite', '__urnxml_gov_auicsmegeodesy0_4_SiteVisitType_urnxml_gov_auicsmegeodesy0_4atSite', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 141, 20), )

    
    atSite = property(__atSite.value, __atSite.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}visitDate uses Python identifier visitDate
    __visitDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'visitDate'), 'visitDate', '__urnxml_gov_auicsmegeodesy0_4_SiteVisitType_urnxml_gov_auicsmegeodesy0_4visitDate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 142, 20), )

    
    visitDate = property(__visitDate.value, __visitDate.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}visitBy uses Python identifier visitBy
    __visitBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'visitBy'), 'visitBy', '__urnxml_gov_auicsmegeodesy0_4_SiteVisitType_urnxml_gov_auicsmegeodesy0_4visitBy', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 143, 20), )

    
    visitBy = property(__visitBy.value, __visitBy.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}condition uses Python identifier condition
    __condition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'condition'), 'condition', '__urnxml_gov_auicsmegeodesy0_4_SiteVisitType_urnxml_gov_auicsmegeodesy0_4condition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 144, 20), )

    
    condition = property(__condition.value, __condition.set, None, 'Condition of Site found during visit.')

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __atSite.name() : __atSite,
        __visitDate.name() : __visitDate,
        __visitBy.name() : __visitBy,
        __condition.name() : __condition
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SiteVisitType = SiteVisitType
Namespace.addCategoryObject('typeBinding', 'SiteVisitType', SiteVisitType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}NodePropertyType with content type ELEMENT_ONLY
class NodePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}NodePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NodePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 196, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Node uses Python identifier Node
    __Node = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Node'), 'Node', '__urnxml_gov_auicsmegeodesy0_4_NodePropertyType_urnxml_gov_auicsmegeodesy0_4Node', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 203, 4), )

    
    Node = property(__Node.value, __Node.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_NodePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_NodePropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_NodePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_NodePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_NodePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_NodePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_NodePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_NodePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_NodePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Node.name() : __Node
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.NodePropertyType = NodePropertyType
Namespace.addCategoryObject('typeBinding', 'NodePropertyType', NodePropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}NodeType with content type ELEMENT_ONLY
class NodeType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """A node is an abstract entity used to identify the aggregation of measurement and position associations to a site for the purpose of coordinate estimation. The resultant position estimations that are assigned to a node express the position of the site reference point according to the authorities that instantiated the node and performed the estimation for a valid time.
            To represent a "current node" whereby the begin position for the valid time is known but the end position is not known, it is conventional to use the following example structure:
            
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NodeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 205, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_NodeType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_NodeType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_NodeType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_NodeType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}aggregationType uses Python identifier aggregationType
    __aggregationType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'aggregationType'), 'aggregationType', '__urnxml_gov_auicsmegeodesy0_4_NodeType_urnxml_gov_auicsmegeodesy0_4aggregationType', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 221, 20), )

    
    aggregationType = property(__aggregationType.value, __aggregationType.set, None, 'The aggregation type specifically identifies the business rules that were used to determine the type of movement permissible at this Node for the valid time period.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atSite uses Python identifier atSite
    __atSite = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atSite'), 'atSite', '__urnxml_gov_auicsmegeodesy0_4_NodeType_urnxml_gov_auicsmegeodesy0_4atSite', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 227, 20), )

    
    atSite = property(__atSite.value, __atSite.set, None, 'A Schematron validation must be written to enforce the convention where a geodetic node can have only one atSite, but a cadastral node may have several.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Status uses Python identifier Status
    __Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Status'), 'Status', '__urnxml_gov_auicsmegeodesy0_4_NodeType_urnxml_gov_auicsmegeodesy0_4Status', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4), )

    
    Status = property(__Status.value, __Status.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __validTime.name() : __validTime,
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __aggregationType.name() : __aggregationType,
        __atSite.name() : __atSite,
        __Status.name() : __Status
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.NodeType = NodeType
Namespace.addCategoryObject('typeBinding', 'NodeType', NodeType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}FeatureStatusType with content type ELEMENT_ONLY
class FeatureStatusType (pyxb.binding.basis.complexTypeDefinition):
    """This status type Authoritative can be assigned at most once per Position / CRS / Epoch combination."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FeatureStatusType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 240, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}currentStatus uses Python identifier currentStatus
    __currentStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'currentStatus'), 'currentStatus', '__urnxml_gov_auicsmegeodesy0_4_FeatureStatusType_urnxml_gov_auicsmegeodesy0_4currentStatus', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 245, 12), )

    
    currentStatus = property(__currentStatus.value, __currentStatus.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}history uses Python identifier history
    __history = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'history'), 'history', '__urnxml_gov_auicsmegeodesy0_4_FeatureStatusType_urnxml_gov_auicsmegeodesy0_4history', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 246, 12), )

    
    history = property(__history.value, __history.set, None, None)

    _ElementMap.update({
        __currentStatus.name() : __currentStatus,
        __history.name() : __history
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FeatureStatusType = FeatureStatusType
Namespace.addCategoryObject('typeBinding', 'FeatureStatusType', FeatureStatusType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 247, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}StatusInstance uses Python identifier StatusInstance
    __StatusInstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StatusInstance'), 'StatusInstance', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_10_urnxml_gov_auicsmegeodesy0_4StatusInstance', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 256, 4), )

    
    StatusInstance = property(__StatusInstance.value, __StatusInstance.set, None, None)

    _ElementMap.update({
        __StatusInstance.name() : __StatusInstance
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_10 = CTD_ANON_10


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}FeatureStatusInstanceType with content type ELEMENT_ONLY
class FeatureStatusInstanceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}FeatureStatusInstanceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FeatureStatusInstanceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 258, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_FeatureStatusInstanceType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_FeatureStatusInstanceType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_FeatureStatusInstanceType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_FeatureStatusInstanceType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}statusCode uses Python identifier statusCode
    __statusCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'statusCode'), 'statusCode', '__urnxml_gov_auicsmegeodesy0_4_FeatureStatusInstanceType_urnxml_gov_auicsmegeodesy0_4statusCode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 261, 12), )

    
    statusCode = property(__statusCode.value, __statusCode.set, None, 'Current status of position as sourced from the codeSpace.')

    _ElementMap.update({
        __validTime.name() : __validTime,
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __statusCode.name() : __statusCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FeatureStatusInstanceType = FeatureStatusInstanceType
Namespace.addCategoryObject('typeBinding', 'FeatureStatusInstanceType', FeatureStatusInstanceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}PositionPropertyType with content type ELEMENT_ONLY
class PositionPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """The choice between referencing a geo:Position or a geo:PositionTimeSeries with a TimeSlice reference."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PositionPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 270, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}TimeSlice uses Python identifier TimeSlice
    __TimeSlice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TimeSlice'), 'TimeSlice', '__urnxml_gov_auicsmegeodesy0_4_PositionPropertyType_urnxml_gov_auicsmegeodesy0_4TimeSlice', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 280, 16), )

    
    TimeSlice = property(__TimeSlice.value, __TimeSlice.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Position uses Python identifier Position
    __Position = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Position'), 'Position', '__urnxml_gov_auicsmegeodesy0_4_PositionPropertyType_urnxml_gov_auicsmegeodesy0_4Position', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 366, 4), )

    
    Position = property(__Position.value, __Position.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}PositionTimeSeries uses Python identifier PositionTimeSeries
    __PositionTimeSeries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PositionTimeSeries'), 'PositionTimeSeries', '__urnxml_gov_auicsmegeodesy0_4_PositionPropertyType_urnxml_gov_auicsmegeodesy0_4PositionTimeSeries', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 384, 4), )

    
    PositionTimeSeries = property(__PositionTimeSeries.value, __PositionTimeSeries.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_PositionPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_PositionPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_PositionPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_PositionPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_PositionPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_PositionPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_PositionPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_PositionPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_PositionPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __TimeSlice.name() : __TimeSlice,
        __Position.name() : __Position,
        __PositionTimeSeries.name() : __PositionTimeSeries
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.PositionPropertyType = PositionPropertyType
Namespace.addCategoryObject('typeBinding', 'PositionPropertyType', PositionPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}PositionPairCovarianceType with content type ELEMENT_ONLY
class PositionPairCovarianceType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Contains position to position covariance information."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PositionPairCovarianceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 300, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_PositionPairCovarianceType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_PositionPairCovarianceType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_PositionPairCovarianceType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Status uses Python identifier Status
    __Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Status'), 'Status', '__urnxml_gov_auicsmegeodesy0_4_PositionPairCovarianceType_urnxml_gov_auicsmegeodesy0_4Status', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4), )

    
    Status = property(__Status.value, __Status.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'source'), 'source', '__urnxml_gov_auicsmegeodesy0_4_PositionPairCovarianceType_urnxml_gov_auicsmegeodesy0_4source', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12), )

    
    source = property(__source.value, __source.set, None, 'Position estimation event that was used to generate the parameters for this position. In the case of a geo:PositionTimeSliceType, this element overrides the source specified in the geo:PositionTimeSeriesType complex type.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atPosition uses Python identifier atPosition
    __atPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atPosition'), 'atPosition', '__urnxml_gov_auicsmegeodesy0_4_PositionPairCovarianceType_urnxml_gov_auicsmegeodesy0_4atPosition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 307, 20), )

    
    atPosition = property(__atPosition.value, __atPosition.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}toPosition uses Python identifier toPosition
    __toPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'toPosition'), 'toPosition', '__urnxml_gov_auicsmegeodesy0_4_PositionPairCovarianceType_urnxml_gov_auicsmegeodesy0_4toPosition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 308, 20), )

    
    toPosition = property(__toPosition.value, __toPosition.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractQuality uses Python identifier AbstractQuality
    __AbstractQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), 'AbstractQuality', '__urnxml_gov_auicsmegeodesy0_4_PositionPairCovarianceType_urnxml_gov_auicsmegeodesy0_4AbstractQuality', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4), )

    
    AbstractQuality = property(__AbstractQuality.value, __AbstractQuality.set, None, 'Abstract group for quality values.')

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_PositionPairCovarianceType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_PositionPairCovarianceType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_PositionPairCovarianceType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_PositionPairCovarianceType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __Status.name() : __Status,
        __source.name() : __source,
        __atPosition.name() : __atPosition,
        __toPosition.name() : __toPosition,
        __AbstractQuality.name() : __AbstractQuality
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.PositionPairCovarianceType = PositionPairCovarianceType
Namespace.addCategoryObject('typeBinding', 'PositionPairCovarianceType', PositionPairCovarianceType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 336, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_11_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_11_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_11_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'source'), 'source', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_11_urnxml_gov_auicsmegeodesy0_4source', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12), )

    
    source = property(__source.value, __source.set, None, 'Position estimation event that was used to generate the parameters for this position. In the case of a geo:PositionTimeSliceType, this element overrides the source specified in the geo:PositionTimeSeriesType complex type.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}velocity uses Python identifier velocity
    __velocity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'velocity'), 'velocity', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_11_urnxml_gov_auicsmegeodesy0_4velocity', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 338, 24), )

    
    velocity = property(__velocity.value, __velocity.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractQuality uses Python identifier AbstractQuality
    __AbstractQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), 'AbstractQuality', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_11_urnxml_gov_auicsmegeodesy0_4AbstractQuality', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4), )

    
    AbstractQuality = property(__AbstractQuality.value, __AbstractQuality.set, None, 'Abstract group for quality values.')

    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __source.name() : __source,
        __velocity.name() : __velocity,
        __AbstractQuality.name() : __AbstractQuality
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_11 = CTD_ANON_11


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DirectVelocityType with content type SIMPLE
class DirectVelocityType (pyxb.binding.basis.complexTypeDefinition):
    """Direct velocity instances hold the parametric velocity values for a moving object within some coordinate reference system (CRS)."""
    _TypeDefinition = pyxb.bundles.opengis.gml_3_2.doubleList
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DirectVelocityType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 347, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.bundles.opengis.gml_3_2.doubleList
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_DirectVelocityType_srsName', pyxb.binding.datatypes.anyURI)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_DirectVelocityType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_DirectVelocityType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_DirectVelocityType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension,
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels
    })
_module_typeBindings.DirectVelocityType = DirectVelocityType
Namespace.addCategoryObject('typeBinding', 'DirectVelocityType', DirectVelocityType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}PositionType with content type ELEMENT_ONLY
class PositionType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Contains information about a 1d, 2d, or 3d position for a node.  In general a different position record is used for each datum and source.  For example if a 3d adjustment was the source a single 3d position record (e.g. lat, lon, ellipsoid ht) could be used. If there was an AHD height determined this would be a separate 1d position record."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PositionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 368, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element {http://www.opengis.net/gml/3.2}dataSource uses Python identifier dataSource
    __dataSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource'), 'dataSource', '__urnxml_gov_auicsmegeodesy0_4_PositionType_httpwww_opengis_netgml3_2dataSource', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dynamicFeature.xsd', 17, 1), )

    
    dataSource = property(__dataSource.value, __dataSource.set, None, 'Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data. The remote link attributes of the gml:dataSource element have been deprecated along with its current type.')

    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_PositionType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_PositionType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_PositionType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_PositionType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Status uses Python identifier Status
    __Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Status'), 'Status', '__urnxml_gov_auicsmegeodesy0_4_PositionType_urnxml_gov_auicsmegeodesy0_4Status', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4), )

    
    Status = property(__Status.value, __Status.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'source'), 'source', '__urnxml_gov_auicsmegeodesy0_4_PositionType_urnxml_gov_auicsmegeodesy0_4source', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12), )

    
    source = property(__source.value, __source.set, None, 'Position estimation event that was used to generate the parameters for this position. In the case of a geo:PositionTimeSliceType, this element overrides the source specified in the geo:PositionTimeSeriesType complex type.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coordinates'), 'coordinates', '__urnxml_gov_auicsmegeodesy0_4_PositionType_urnxml_gov_auicsmegeodesy0_4coordinates', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 333, 12), )

    
    coordinates = property(__coordinates.value, __coordinates.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}hasVelocity uses Python identifier hasVelocity
    __hasVelocity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hasVelocity'), 'hasVelocity', '__urnxml_gov_auicsmegeodesy0_4_PositionType_urnxml_gov_auicsmegeodesy0_4hasVelocity', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 335, 12), )

    
    hasVelocity = property(__hasVelocity.value, __hasVelocity.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atNode uses Python identifier atNode
    __atNode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atNode'), 'atNode', '__urnxml_gov_auicsmegeodesy0_4_PositionType_urnxml_gov_auicsmegeodesy0_4atNode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 375, 20), )

    
    atNode = property(__atNode.value, __atNode.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractQuality uses Python identifier AbstractQuality
    __AbstractQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), 'AbstractQuality', '__urnxml_gov_auicsmegeodesy0_4_PositionType_urnxml_gov_auicsmegeodesy0_4AbstractQuality', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4), )

    
    AbstractQuality = property(__AbstractQuality.value, __AbstractQuality.set, None, 'Abstract group for quality values.')

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_PositionType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_PositionType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_PositionType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_PositionType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __dataSource.name() : __dataSource,
        __validTime.name() : __validTime,
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __Status.name() : __Status,
        __source.name() : __source,
        __coordinates.name() : __coordinates,
        __hasVelocity.name() : __hasVelocity,
        __atNode.name() : __atNode,
        __AbstractQuality.name() : __AbstractQuality
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.PositionType = PositionType
Namespace.addCategoryObject('typeBinding', 'PositionType', PositionType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 401, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}PositionTimeSlice uses Python identifier PositionTimeSlice
    __PositionTimeSlice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PositionTimeSlice'), 'PositionTimeSlice', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_12_urnxml_gov_auicsmegeodesy0_4PositionTimeSlice', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 414, 4), )

    
    PositionTimeSlice = property(__PositionTimeSlice.value, __PositionTimeSlice.set, None, None)

    _ElementMap.update({
        __PositionTimeSlice.name() : __PositionTimeSlice
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_12 = CTD_ANON_12


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}PositionTimeSliceType with content type ELEMENT_ONLY
class PositionTimeSliceType (pyxb.bundles.opengis.gml_3_2.AbstractGeometricPrimitiveType):
    """A geo:AbstractTimeSliceType wrapper for coordinates that allows it to be used in a geo:Position/geo:History trace."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PositionTimeSliceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 416, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractGeometricPrimitiveType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractGeometricPrimitiveType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractGeometricPrimitiveType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}dataSource uses Python identifier dataSource
    __dataSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource'), 'dataSource', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSliceType_httpwww_opengis_netgml3_2dataSource', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dynamicFeature.xsd', 17, 1), )

    
    dataSource = property(__dataSource.value, __dataSource.set, None, 'Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data. The remote link attributes of the gml:dataSource element have been deprecated along with its current type.')

    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSliceType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSliceType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSliceType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSliceType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Status uses Python identifier Status
    __Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Status'), 'Status', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSliceType_urnxml_gov_auicsmegeodesy0_4Status', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4), )

    
    Status = property(__Status.value, __Status.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'source'), 'source', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSliceType_urnxml_gov_auicsmegeodesy0_4source', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12), )

    
    source = property(__source.value, __source.set, None, 'Position estimation event that was used to generate the parameters for this position. In the case of a geo:PositionTimeSliceType, this element overrides the source specified in the geo:PositionTimeSeriesType complex type.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}coordinates uses Python identifier coordinates
    __coordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'coordinates'), 'coordinates', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSliceType_urnxml_gov_auicsmegeodesy0_4coordinates', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 333, 12), )

    
    coordinates = property(__coordinates.value, __coordinates.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}hasVelocity uses Python identifier hasVelocity
    __hasVelocity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hasVelocity'), 'hasVelocity', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSliceType_urnxml_gov_auicsmegeodesy0_4hasVelocity', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 335, 12), )

    
    hasVelocity = property(__hasVelocity.value, __hasVelocity.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractQuality uses Python identifier AbstractQuality
    __AbstractQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), 'AbstractQuality', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSliceType_urnxml_gov_auicsmegeodesy0_4AbstractQuality', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4), )

    
    AbstractQuality = property(__AbstractQuality.value, __AbstractQuality.set, None, 'Abstract group for quality values.')

    
    # Attribute srsName inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute srsDimension inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute axisLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute uomLabels inherited from {http://www.opengis.net/gml/3.2}AbstractGeometryType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __dataSource.name() : __dataSource,
        __validTime.name() : __validTime,
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __Status.name() : __Status,
        __source.name() : __source,
        __coordinates.name() : __coordinates,
        __hasVelocity.name() : __hasVelocity,
        __AbstractQuality.name() : __AbstractQuality
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PositionTimeSliceType = PositionTimeSliceType
Namespace.addCategoryObject('typeBinding', 'PositionTimeSliceType', PositionTimeSliceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ProjectPropertyType with content type ELEMENT_ONLY
class ProjectPropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ProjectPropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProjectPropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 15, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Project uses Python identifier Project
    __Project = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Project'), 'Project', '__urnxml_gov_auicsmegeodesy0_4_ProjectPropertyType_urnxml_gov_auicsmegeodesy0_4Project', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 22, 4), )

    
    Project = property(__Project.value, __Project.set, None, None)

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_ProjectPropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_ProjectPropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_ProjectPropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_ProjectPropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_ProjectPropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_ProjectPropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_ProjectPropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_ProjectPropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_ProjectPropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __Project.name() : __Project
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.ProjectPropertyType = ProjectPropertyType
Namespace.addCategoryObject('typeBinding', 'ProjectPropertyType', ProjectPropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ProjectType with content type ELEMENT_ONLY
class ProjectType (pyxb.bundles.opengis.gml_3_2.AbstractFeatureType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ProjectType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProjectType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 24, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractFeatureType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_ProjectType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_ProjectType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_ProjectType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'status'), 'status', '__urnxml_gov_auicsmegeodesy0_4_ProjectType_urnxml_gov_auicsmegeodesy0_4status', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 28, 20), )

    
    status = property(__status.value, __status.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}managedBy uses Python identifier managedBy
    __managedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'managedBy'), 'managedBy', '__urnxml_gov_auicsmegeodesy0_4_ProjectType_urnxml_gov_auicsmegeodesy0_4managedBy', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 29, 20), )

    
    managedBy = property(__managedBy.value, __managedBy.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}specifiedBy uses Python identifier specifiedBy
    __specifiedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'specifiedBy'), 'specifiedBy', '__urnxml_gov_auicsmegeodesy0_4_ProjectType_urnxml_gov_auicsmegeodesy0_4specifiedBy', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 30, 20), )

    
    specifiedBy = property(__specifiedBy.value, __specifiedBy.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}initiatedDate uses Python identifier initiatedDate
    __initiatedDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'initiatedDate'), 'initiatedDate', '__urnxml_gov_auicsmegeodesy0_4_ProjectType_urnxml_gov_auicsmegeodesy0_4initiatedDate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 31, 20), )

    
    initiatedDate = property(__initiatedDate.value, __initiatedDate.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}completedDate uses Python identifier completedDate
    __completedDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'completedDate'), 'completedDate', '__urnxml_gov_auicsmegeodesy0_4_ProjectType_urnxml_gov_auicsmegeodesy0_4completedDate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 32, 20), )

    
    completedDate = property(__completedDate.value, __completedDate.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __status.name() : __status,
        __managedBy.name() : __managedBy,
        __specifiedBy.name() : __specifiedBy,
        __initiatedDate.name() : __initiatedDate,
        __completedDate.name() : __completedDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ProjectType = ProjectType
Namespace.addCategoryObject('typeBinding', 'ProjectType', ProjectType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}TerrestrialReferenceFramePropertyType with content type ELEMENT_ONLY
class TerrestrialReferenceFramePropertyType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}TerrestrialReferenceFramePropertyType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TerrestrialReferenceFramePropertyType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 14, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}TerrestrialReferenceFrame uses Python identifier TerrestrialReferenceFrame
    __TerrestrialReferenceFrame = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TerrestrialReferenceFrame'), 'TerrestrialReferenceFrame', '__urnxml_gov_auicsmegeodesy0_4_TerrestrialReferenceFramePropertyType_urnxml_gov_auicsmegeodesy0_4TerrestrialReferenceFrame', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 21, 4), )

    
    TerrestrialReferenceFrame = property(__TerrestrialReferenceFrame.value, __TerrestrialReferenceFrame.set, None, 'A terrestrial reference frame is a geodetic reference frame (or geodetic datum in previous GML parlance) in which the coordinates of reference or definition monuments are allowed to move. In essence, a terrestrial reference frame is continuously "realised" with the regular addition of new observations on a weekly or daily time scale. To use a terrestrial reference frame, up-to-date transformation products must be available to propagate coordinates and their uncertanties between epochs and between frames.\n            \n            To derive a static reference frame (a GML datum) from a terrestrial reference frame and a dynamic transformation, the source and target epochs of the dynamic transformation are required to compute coordinates in the realisation epoch of the static reference frame.')

    
    # Attribute {http://www.opengis.net/gml/3.2}remoteSchema uses Python identifier remoteSchema
    __remoteSchema = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'remoteSchema'), 'remoteSchema', '__urnxml_gov_auicsmegeodesy0_4_TerrestrialReferenceFramePropertyType_httpwww_opengis_netgml3_2remoteSchema', pyxb.binding.datatypes.anyURI)
    __remoteSchema._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/deprecatedTypes.xsd', 638, 1)
    __remoteSchema._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 52, 2)
    
    remoteSchema = property(__remoteSchema.value, __remoteSchema.set, None, '')

    
    # Attribute nilReason uses Python identifier nilReason
    __nilReason = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'nilReason'), 'nilReason', '__urnxml_gov_auicsmegeodesy0_4_TerrestrialReferenceFramePropertyType_nilReason', pyxb.bundles.opengis.gml_3_2.NilReasonType)
    __nilReason._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    __nilReason._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 51, 2)
    
    nilReason = property(__nilReason.value, __nilReason.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_TerrestrialReferenceFramePropertyType_httpwww_w3_org1999xlinktype', pyxb.bundles.common.xlink.typeType, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 29, 1)
    __type._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 112, 2)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'href'), 'href', '__urnxml_gov_auicsmegeodesy0_4_TerrestrialReferenceFramePropertyType_httpwww_w3_org1999xlinkhref', pyxb.bundles.common.xlink.hrefType)
    __href._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 42, 1)
    __href._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 113, 2)
    
    href = property(__href.value, __href.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'role'), 'role', '__urnxml_gov_auicsmegeodesy0_4_TerrestrialReferenceFramePropertyType_httpwww_w3_org1999xlinkrole', pyxb.bundles.common.xlink.roleType)
    __role._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 48, 1)
    __role._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 114, 2)
    
    role = property(__role.value, __role.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}arcrole uses Python identifier arcrole
    __arcrole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'arcrole'), 'arcrole', '__urnxml_gov_auicsmegeodesy0_4_TerrestrialReferenceFramePropertyType_httpwww_w3_org1999xlinkarcrole', pyxb.bundles.common.xlink.arcroleType)
    __arcrole._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 56, 1)
    __arcrole._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 115, 2)
    
    arcrole = property(__arcrole.value, __arcrole.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'title'), 'title', '__urnxml_gov_auicsmegeodesy0_4_TerrestrialReferenceFramePropertyType_httpwww_w3_org1999xlinktitle', pyxb.bundles.common.xlink.titleAttrType)
    __title._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 64, 1)
    __title._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 116, 2)
    
    title = property(__title.value, __title.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'show'), 'show', '__urnxml_gov_auicsmegeodesy0_4_TerrestrialReferenceFramePropertyType_httpwww_w3_org1999xlinkshow', pyxb.bundles.common.xlink.showType)
    __show._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 70, 1)
    __show._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 117, 2)
    
    show = property(__show.value, __show.set, None, None)

    
    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace, 'actuate'), 'actuate', '__urnxml_gov_auicsmegeodesy0_4_TerrestrialReferenceFramePropertyType_httpwww_w3_org1999xlinkactuate', pyxb.bundles.common.xlink.actuateType)
    __actuate._DeclarationLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 82, 1)
    __actuate._UseLocation = pyxb.utils.utility.Location('/tmp/pyxbdist.mjW1MNk/PyXB-1.2.5/pyxb/bundles/common/schemas/xlink.xsd', 118, 2)
    
    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({
        __TerrestrialReferenceFrame.name() : __TerrestrialReferenceFrame
    })
    _AttributeMap.update({
        __remoteSchema.name() : __remoteSchema,
        __nilReason.name() : __nilReason,
        __type.name() : __type,
        __href.name() : __href,
        __role.name() : __role,
        __arcrole.name() : __arcrole,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.TerrestrialReferenceFramePropertyType = TerrestrialReferenceFramePropertyType
Namespace.addCategoryObject('typeBinding', 'TerrestrialReferenceFramePropertyType', TerrestrialReferenceFramePropertyType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}TerrestrialReferenceFrameType with content type ELEMENT_ONLY
class TerrestrialReferenceFrameType (pyxb.bundles.opengis.gml_3_2.GeodeticDatumType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}TerrestrialReferenceFrameType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TerrestrialReferenceFrameType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 29, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.GeodeticDatumType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.GeodeticDatumType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.GeodeticDatumType
    
    # Element anchorDefinition ({http://www.opengis.net/gml/3.2}anchorDefinition) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element realizationEpoch ({http://www.opengis.net/gml/3.2}realizationEpoch) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element primeMeridian ({http://www.opengis.net/gml/3.2}primeMeridian) inherited from {http://www.opengis.net/gml/3.2}GeodeticDatumType
    
    # Element ellipsoid ({http://www.opengis.net/gml/3.2}ellipsoid) inherited from {http://www.opengis.net/gml/3.2}GeodeticDatumType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractDatumType
    
    # Attribute id is restricted from parent
    
    # Attribute {http://www.opengis.net/gml/3.2}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_gml, 'id'), 'id', '__httpwww_opengis_netgml3_2_AbstractGMLType_httpwww_opengis_netgml3_2id', pyxb.binding.datatypes.ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 137, 1)
    __id._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 58, 16)
    
    id = property(__id.value, __id.set, None, 'The attribute gml:id supports provision of a handle for the XML element representing a GML Object. Its use is mandatory for all GML objects. It is of XML type ID, so is constrained to be unique in the XML document within which it occurs.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.TerrestrialReferenceFrameType = TerrestrialReferenceFrameType
Namespace.addCategoryObject('typeBinding', 'TerrestrialReferenceFrameType', TerrestrialReferenceFrameType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicTransformationType with content type ELEMENT_ONLY
class DynamicTransformationType (pyxb.bundles.opengis.gml_3_2.AbstractGeneralTransformationType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicTransformationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DynamicTransformationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 71, 4)
    _ElementMap = pyxb.bundles.opengis.gml_3_2.AbstractGeneralTransformationType._ElementMap.copy()
    _AttributeMap = pyxb.bundles.opengis.gml_3_2.AbstractGeneralTransformationType._AttributeMap.copy()
    # Base type is pyxb.bundles.opengis.gml_3_2.AbstractGeneralTransformationType
    
    # Element operationVersion ({http://www.opengis.net/gml/3.2}operationVersion) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element sourceCRS ({http://www.opengis.net/gml/3.2}sourceCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element targetCRS ({http://www.opengis.net/gml/3.2}targetCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element {http://www.opengis.net/gml/3.2}parameterValue uses Python identifier parameterValue
    __parameterValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'parameterValue'), 'parameterValue', '__urnxml_gov_auicsmegeodesy0_4_DynamicTransformationType_httpwww_opengis_netgml3_2parameterValue', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 243, 1), )

    
    parameterValue = property(__parameterValue.value, __parameterValue.set, None, 'gml:parameterValue is a composition association to a parameter value or group of parameter values used by a coordinate operation.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}sourceEpoch uses Python identifier sourceEpoch
    __sourceEpoch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sourceEpoch'), 'sourceEpoch', '__urnxml_gov_auicsmegeodesy0_4_DynamicTransformationType_urnxml_gov_auicsmegeodesy0_4sourceEpoch', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 75, 20), )

    
    sourceEpoch = property(__sourceEpoch.value, __sourceEpoch.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}targetEpoch uses Python identifier targetEpoch
    __targetEpoch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'targetEpoch'), 'targetEpoch', '__urnxml_gov_auicsmegeodesy0_4_DynamicTransformationType_urnxml_gov_auicsmegeodesy0_4targetEpoch', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 76, 20), )

    
    targetEpoch = property(__targetEpoch.value, __targetEpoch.set, None, 'The absence of a targetEpoch element implies that this transformation has time-dependent parameters. This is the standard configuration of a 14-parameter transformation whereby the latter 7 parameters are coefficients to a time parameter. A residual velocity map would also implicitly have time-dependent parameters. An example of a dynamic transformation that requires a targetEpoch is a 7-parameter transformation (implying no time-dependent parameters) between two dynamic frames, e.g. ITRF2014 to ITRF2008 at epochs 2014-01-01 and 2008-01-01 respectively.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}usesMethod uses Python identifier usesMethod
    __usesMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usesMethod'), 'usesMethod', '__urnxml_gov_auicsmegeodesy0_4_DynamicTransformationType_urnxml_gov_auicsmegeodesy0_4usesMethod', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 81, 20), )

    
    usesMethod = property(__usesMethod.value, __usesMethod.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'source'), 'source', '__urnxml_gov_auicsmegeodesy0_4_DynamicTransformationType_urnxml_gov_auicsmegeodesy0_4source', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 83, 20), )

    
    source = property(__source.value, __source.set, None, 'An unbounded list of references to the source of each parameter.')

    
    # Attribute id_2 inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralTransformationType
    _ElementMap.update({
        __parameterValue.name() : __parameterValue,
        __sourceEpoch.name() : __sourceEpoch,
        __targetEpoch.name() : __targetEpoch,
        __usesMethod.name() : __usesMethod,
        __source.name() : __source
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DynamicTransformationType = DynamicTransformationType
Namespace.addCategoryObject('typeBinding', 'DynamicTransformationType', DynamicTransformationType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 183, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}InterpolatedSingleValue uses Python identifier InterpolatedSingleValue
    __InterpolatedSingleValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpolatedSingleValue'), 'InterpolatedSingleValue', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_13_urnxml_gov_auicsmegeodesy0_4InterpolatedSingleValue', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 152, 4), )

    
    InterpolatedSingleValue = property(__InterpolatedSingleValue.value, __InterpolatedSingleValue.set, None, 'The result of an interpolation operation on a gridded transformation or geoid.')

    _ElementMap.update({
        __InterpolatedSingleValue.name() : __InterpolatedSingleValue
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_13 = CTD_ANON_13


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 41, 36)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute encoding uses Python identifier encoding
    __encoding = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'encoding'), 'encoding', '__urnxml_gov_auicsmegeodesy0_4_CTD_ANON_14_encoding', _module_typeBindings.EncodingType, unicode_default='none')
    __encoding._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 44, 48)
    __encoding._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 44, 48)
    
    encoding = property(__encoding.value, __encoding.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __encoding.name() : __encoding
    })
_module_typeBindings.CTD_ANON_14 = CTD_ANON_14


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SensorWithCodeType with content type ELEMENT_ONLY
class SensorWithCodeType (SensorType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SensorWithCodeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SensorWithCodeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 43, 4)
    _ElementMap = SensorType._ElementMap.copy()
    _AttributeMap = SensorType._AttributeMap.copy()
    # Base type is SensorType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}SensorType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SensorWithCodeType = SensorWithCodeType
Namespace.addCategoryObject('typeBinding', 'SensorWithCodeType', SensorWithCodeType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}OtherInstrumentationType with content type ELEMENT_ONLY
class OtherInstrumentationType (InstrumentType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}OtherInstrumentationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OtherInstrumentationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 208, 4)
    _ElementMap = InstrumentType._ElementMap.copy()
    _AttributeMap = InstrumentType._AttributeMap.copy()
    # Base type is InstrumentType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_OtherInstrumentationType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}instrumentation uses Python identifier instrumentation
    __instrumentation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'instrumentation'), 'instrumentation', '__urnxml_gov_auicsmegeodesy0_4_OtherInstrumentationType_urnxml_gov_auicsmegeodesy0_4instrumentation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 212, 20), )

    
    instrumentation = property(__instrumentation.value, __instrumentation.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __validTime.name() : __validTime,
        __instrumentation.name() : __instrumentation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.OtherInstrumentationType = OtherInstrumentationType
Namespace.addCategoryObject('typeBinding', 'OtherInstrumentationType', OtherInstrumentationType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}TieMeasurementType with content type ELEMENT_ONLY
class TieMeasurementType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}TieMeasurementType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TieMeasurementType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 269, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Tie uses Python identifier Tie
    __Tie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Tie'), 'Tie', '__urnxml_gov_auicsmegeodesy0_4_TieMeasurementType_urnxml_gov_auicsmegeodesy0_4Tie', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 273, 20), )

    
    Tie = property(__Tie.value, __Tie.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}tiePairQuality uses Python identifier tiePairQuality
    __tiePairQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'tiePairQuality'), 'tiePairQuality', '__urnxml_gov_auicsmegeodesy0_4_TieMeasurementType_urnxml_gov_auicsmegeodesy0_4tiePairQuality', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 274, 20), )

    
    tiePairQuality = property(__tiePairQuality.value, __tiePairQuality.set, None, None)

    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_TieMeasurementType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_TieMeasurementType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_TieMeasurementType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_TieMeasurementType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __Tie.name() : __Tie,
        __tiePairQuality.name() : __tiePairQuality
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.TieMeasurementType = TieMeasurementType
Namespace.addCategoryObject('typeBinding', 'TieMeasurementType', TieMeasurementType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SetupType with content type ELEMENT_ONLY
class SetupType (DynamicFeatureType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SetupType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SetupType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 26, 4)
    _ElementMap = DynamicFeatureType._ElementMap.copy()
    _AttributeMap = DynamicFeatureType._AttributeMap.copy()
    # Base type is DynamicFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element dataSource ({http://www.opengis.net/gml/3.2}dataSource) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element dataSourceReference ({http://www.opengis.net/gml/3.2}dataSourceReference) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_SetupType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_SetupType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_SetupType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atSite uses Python identifier atSite
    __atSite = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atSite'), 'atSite', '__urnxml_gov_auicsmegeodesy0_4_SetupType_urnxml_gov_auicsmegeodesy0_4atSite', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 30, 20), )

    
    atSite = property(__atSite.value, __atSite.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}history uses Python identifier history_
    __history_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'history'), 'history_', '__urnxml_gov_auicsmegeodesy0_4_SetupType_urnxml_gov_auicsmegeodesy0_4history', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 31, 20), )

    
    history_ = property(__history_.value, __history_.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __atSite.name() : __atSite,
        __history_.name() : __history_
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SetupType = SetupType
Namespace.addCategoryObject('typeBinding', 'SetupType', SetupType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SetupInstanceType with content type ELEMENT_ONLY
class SetupInstanceType (AbstractTimeSliceType):
    """A geo:AbstractTimeSliceType extension to contain the value object for a setup instance. The date of setup is defined as the gml:validTime element inherited from geo:AbstractTimeSliceType."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SetupInstanceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 46, 4)
    _ElementMap = AbstractTimeSliceType._ElementMap.copy()
    _AttributeMap = AbstractTimeSliceType._AttributeMap.copy()
    # Base type is AbstractTimeSliceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element dataSource ({http://www.opengis.net/gml/3.2}dataSource) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractTimeSliceType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractTimeSliceType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_SetupInstanceType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_SetupInstanceType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_SetupInstanceType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}fromProject uses Python identifier fromProject
    __fromProject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fromProject'), 'fromProject', '__urnxml_gov_auicsmegeodesy0_4_SetupInstanceType_urnxml_gov_auicsmegeodesy0_4fromProject', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 53, 20), )

    
    fromProject = property(__fromProject.value, __fromProject.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}setupHeight uses Python identifier setupHeight
    __setupHeight = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'setupHeight'), 'setupHeight', '__urnxml_gov_auicsmegeodesy0_4_SetupInstanceType_urnxml_gov_auicsmegeodesy0_4setupHeight', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 54, 20), )

    
    setupHeight = property(__setupHeight.value, __setupHeight.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}observedBy uses Python identifier observedBy
    __observedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'observedBy'), 'observedBy', '__urnxml_gov_auicsmegeodesy0_4_SetupInstanceType_urnxml_gov_auicsmegeodesy0_4observedBy', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 55, 20), )

    
    observedBy = property(__observedBy.value, __observedBy.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}usesInstrument uses Python identifier usesInstrument
    __usesInstrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usesInstrument'), 'usesInstrument', '__urnxml_gov_auicsmegeodesy0_4_SetupInstanceType_urnxml_gov_auicsmegeodesy0_4usesInstrument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 56, 20), )

    
    usesInstrument = property(__usesInstrument.value, __usesInstrument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}usesSensor uses Python identifier usesSensor
    __usesSensor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usesSensor'), 'usesSensor', '__urnxml_gov_auicsmegeodesy0_4_SetupInstanceType_urnxml_gov_auicsmegeodesy0_4usesSensor', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 57, 20), )

    
    usesSensor = property(__usesSensor.value, __usesSensor.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __fromProject.name() : __fromProject,
        __setupHeight.name() : __setupHeight,
        __observedBy.name() : __observedBy,
        __usesInstrument.name() : __usesInstrument,
        __usesSensor.name() : __usesSensor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SetupInstanceType = SetupInstanceType
Namespace.addCategoryObject('typeBinding', 'SetupInstanceType', SetupInstanceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractObservationQualityType with content type ELEMENT_ONLY
class AbstractObservationQualityType (DynamicFeatureType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractObservationQualityType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractObservationQualityType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 96, 4)
    _ElementMap = DynamicFeatureType._ElementMap.copy()
    _AttributeMap = DynamicFeatureType._AttributeMap.copy()
    # Base type is DynamicFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element dataSource ({http://www.opengis.net/gml/3.2}dataSource) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element dataSourceReference ({http://www.opengis.net/gml/3.2}dataSourceReference) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_AbstractObservationQualityType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_AbstractObservationQualityType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_AbstractObservationQualityType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atSite uses Python identifier atSite
    __atSite = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atSite'), 'atSite', '__urnxml_gov_auicsmegeodesy0_4_AbstractObservationQualityType_urnxml_gov_auicsmegeodesy0_4atSite', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 100, 20), )

    
    atSite = property(__atSite.value, __atSite.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'source'), 'source', '__urnxml_gov_auicsmegeodesy0_4_AbstractObservationQualityType_urnxml_gov_auicsmegeodesy0_4source', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 101, 20), )

    
    source = property(__source.value, __source.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __atSite.name() : __atSite,
        __source.name() : __source
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractObservationQualityType = AbstractObservationQualityType
Namespace.addCategoryObject('typeBinding', 'AbstractObservationQualityType', AbstractObservationQualityType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GNSSObservationQualityInstanceType with content type ELEMENT_ONLY
class GNSSObservationQualityInstanceType (AbstractTimeSliceType):
    """A set of Site quality metrics computed daily to evaluate a Site's fitness or level of suitability in downstream GNSS analysis."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GNSSObservationQualityInstanceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 132, 4)
    _ElementMap = AbstractTimeSliceType._ElementMap.copy()
    _AttributeMap = AbstractTimeSliceType._AttributeMap.copy()
    # Base type is AbstractTimeSliceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element dataSource ({http://www.opengis.net/gml/3.2}dataSource) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractTimeSliceType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractTimeSliceType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}FirstObservedEpoch uses Python identifier FirstObservedEpoch
    __FirstObservedEpoch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FirstObservedEpoch'), 'FirstObservedEpoch', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4FirstObservedEpoch', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 139, 20), )

    
    FirstObservedEpoch = property(__FirstObservedEpoch.value, __FirstObservedEpoch.set, None, 'The function of this element and the next may overlap with the ValidTime TimePeriod element inherited by this complexType from AbstractTimeSliceType.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}LastObservedEpoch uses Python identifier LastObservedEpoch
    __LastObservedEpoch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LastObservedEpoch'), 'LastObservedEpoch', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4LastObservedEpoch', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 144, 20), )

    
    LastObservedEpoch = property(__LastObservedEpoch.value, __LastObservedEpoch.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}PossibleEpochs uses Python identifier PossibleEpochs
    __PossibleEpochs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PossibleEpochs'), 'PossibleEpochs', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4PossibleEpochs', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 145, 20), )

    
    PossibleEpochs = property(__PossibleEpochs.value, __PossibleEpochs.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ObservedEpochs uses Python identifier ObservedEpochs
    __ObservedEpochs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservedEpochs'), 'ObservedEpochs', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4ObservedEpochs', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 146, 20), )

    
    ObservedEpochs = property(__ObservedEpochs.value, __ObservedEpochs.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}EpochPercent uses Python identifier EpochPercent
    __EpochPercent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EpochPercent'), 'EpochPercent', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4EpochPercent', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 147, 20), )

    
    EpochPercent = property(__EpochPercent.value, __EpochPercent.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}averageMultipathL1 uses Python identifier averageMultipathL1
    __averageMultipathL1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'averageMultipathL1'), 'averageMultipathL1', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4averageMultipathL1', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 148, 20), )

    
    averageMultipathL1 = property(__averageMultipathL1.value, __averageMultipathL1.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AverageMutlipathL2 uses Python identifier AverageMutlipathL2
    __AverageMutlipathL2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AverageMutlipathL2'), 'AverageMutlipathL2', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4AverageMutlipathL2', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 149, 20), )

    
    AverageMutlipathL2 = property(__AverageMutlipathL2.value, __AverageMutlipathL2.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}PossibleObservations uses Python identifier PossibleObservations
    __PossibleObservations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PossibleObservations'), 'PossibleObservations', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4PossibleObservations', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 150, 20), )

    
    PossibleObservations = property(__PossibleObservations.value, __PossibleObservations.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}CompleteObservations uses Python identifier CompleteObservations
    __CompleteObservations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CompleteObservations'), 'CompleteObservations', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4CompleteObservations', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 151, 20), )

    
    CompleteObservations = property(__CompleteObservations.value, __CompleteObservations.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}DeletedObservations uses Python identifier DeletedObservations
    __DeletedObservations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DeletedObservations'), 'DeletedObservations', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4DeletedObservations', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 152, 20), )

    
    DeletedObservations = property(__DeletedObservations.value, __DeletedObservations.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}MaskedObservations uses Python identifier MaskedObservations
    __MaskedObservations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MaskedObservations'), 'MaskedObservations', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4MaskedObservations', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 153, 20), )

    
    MaskedObservations = property(__MaskedObservations.value, __MaskedObservations.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ObservationRate uses Python identifier ObservationRate
    __ObservationRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationRate'), 'ObservationRate', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4ObservationRate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 154, 20), )

    
    ObservationRate = property(__ObservationRate.value, __ObservationRate.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ObservationSlipRatio uses Python identifier ObservationSlipRatio
    __ObservationSlipRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationSlipRatio'), 'ObservationSlipRatio', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4ObservationSlipRatio', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 155, 20), )

    
    ObservationSlipRatio = property(__ObservationSlipRatio.value, __ObservationSlipRatio.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ObservationsMissingL1 uses Python identifier ObservationsMissingL1
    __ObservationsMissingL1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationsMissingL1'), 'ObservationsMissingL1', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4ObservationsMissingL1', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 156, 20), )

    
    ObservationsMissingL1 = property(__ObservationsMissingL1.value, __ObservationsMissingL1.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ObservationsMissingL2 uses Python identifier ObservationsMissingL2
    __ObservationsMissingL2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationsMissingL2'), 'ObservationsMissingL2', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4ObservationsMissingL2', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 157, 20), )

    
    ObservationsMissingL2 = property(__ObservationsMissingL2.value, __ObservationsMissingL2.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ObservationsMissingP1orC1 uses Python identifier ObservationsMissingP1orC1
    __ObservationsMissingP1orC1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationsMissingP1orC1'), 'ObservationsMissingP1orC1', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4ObservationsMissingP1orC1', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 158, 20), )

    
    ObservationsMissingP1orC1 = property(__ObservationsMissingP1orC1.value, __ObservationsMissingP1orC1.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ObservatinosMissingP2orC2 uses Python identifier ObservatinosMissingP2orC2
    __ObservatinosMissingP2orC2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservatinosMissingP2orC2'), 'ObservatinosMissingP2orC2', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4ObservatinosMissingP2orC2', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 159, 20), )

    
    ObservatinosMissingP2orC2 = property(__ObservatinosMissingP2orC2.value, __ObservatinosMissingP2orC2.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ReceiverTrackingCapability uses Python identifier ReceiverTrackingCapability
    __ReceiverTrackingCapability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ReceiverTrackingCapability'), 'ReceiverTrackingCapability', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4ReceiverTrackingCapability', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 160, 20), )

    
    ReceiverTrackingCapability = property(__ReceiverTrackingCapability.value, __ReceiverTrackingCapability.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}TotalSatellites uses Python identifier TotalSatellites
    __TotalSatellites = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TotalSatellites'), 'TotalSatellites', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4TotalSatellites', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 161, 20), )

    
    TotalSatellites = property(__TotalSatellites.value, __TotalSatellites.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}MeanS1 uses Python identifier MeanS1
    __MeanS1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MeanS1'), 'MeanS1', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4MeanS1', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 162, 20), )

    
    MeanS1 = property(__MeanS1.value, __MeanS1.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Means1 uses Python identifier Means1
    __Means1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Means1'), 'Means1', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4Means1', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 163, 20), )

    
    Means1 = property(__Means1.value, __Means1.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'source'), 'source', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityInstanceType_urnxml_gov_auicsmegeodesy0_4source', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 164, 20), )

    
    source = property(__source.value, __source.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __FirstObservedEpoch.name() : __FirstObservedEpoch,
        __LastObservedEpoch.name() : __LastObservedEpoch,
        __PossibleEpochs.name() : __PossibleEpochs,
        __ObservedEpochs.name() : __ObservedEpochs,
        __EpochPercent.name() : __EpochPercent,
        __averageMultipathL1.name() : __averageMultipathL1,
        __AverageMutlipathL2.name() : __AverageMutlipathL2,
        __PossibleObservations.name() : __PossibleObservations,
        __CompleteObservations.name() : __CompleteObservations,
        __DeletedObservations.name() : __DeletedObservations,
        __MaskedObservations.name() : __MaskedObservations,
        __ObservationRate.name() : __ObservationRate,
        __ObservationSlipRatio.name() : __ObservationSlipRatio,
        __ObservationsMissingL1.name() : __ObservationsMissingL1,
        __ObservationsMissingL2.name() : __ObservationsMissingL2,
        __ObservationsMissingP1orC1.name() : __ObservationsMissingP1orC1,
        __ObservatinosMissingP2orC2.name() : __ObservatinosMissingP2orC2,
        __ReceiverTrackingCapability.name() : __ReceiverTrackingCapability,
        __TotalSatellites.name() : __TotalSatellites,
        __MeanS1.name() : __MeanS1,
        __Means1.name() : __Means1,
        __source.name() : __source
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GNSSObservationQualityInstanceType = GNSSObservationQualityInstanceType
Namespace.addCategoryObject('typeBinding', 'GNSSObservationQualityInstanceType', GNSSObservationQualityInstanceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType with content type ELEMENT_ONLY
class baseGeodeticEquipmentType (InstrumentType):
    """
         Base Geodetic Equipment class.  Serves as a platform
         for the construction of other, more specific, types
         of equipment related to the field of geodesy.  More
         specifically, this class is designed for equipment
         that can be uniquely-identified.  In other words,
         actual physical objects used in geodetic practices.

         GeodesyML 0.2 change: Extend geo:InstrumentType and removed attr  final="restriction"
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'baseGeodeticEquipmentType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 47, 4)
    _ElementMap = InstrumentType._ElementMap.copy()
    _AttributeMap = InstrumentType._AttributeMap.copy()
    # Base type is InstrumentType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerName uses Python identifier manufacturerName
    __manufacturerName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'manufacturerName'), 'manufacturerName', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticEquipmentType_urnxml_gov_auicsmegeodesy0_4manufacturerName', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20), )

    
    manufacturerName = property(__manufacturerName.value, __manufacturerName.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerModel uses Python identifier manufacturerModel
    __manufacturerModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'manufacturerModel'), 'manufacturerModel', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticEquipmentType_urnxml_gov_auicsmegeodesy0_4manufacturerModel', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20), )

    
    manufacturerModel = property(__manufacturerModel.value, __manufacturerModel.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerPartNumber uses Python identifier manufacturerPartNumber
    __manufacturerPartNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'manufacturerPartNumber'), 'manufacturerPartNumber', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticEquipmentType_urnxml_gov_auicsmegeodesy0_4manufacturerPartNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20), )

    
    manufacturerPartNumber = property(__manufacturerPartNumber.value, __manufacturerPartNumber.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerDescription uses Python identifier manufacturerDescription
    __manufacturerDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'manufacturerDescription'), 'manufacturerDescription', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticEquipmentType_urnxml_gov_auicsmegeodesy0_4manufacturerDescription', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20), )

    
    manufacturerDescription = property(__manufacturerDescription.value, __manufacturerDescription.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerSerialNumber uses Python identifier manufacturerSerialNumber
    __manufacturerSerialNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'manufacturerSerialNumber'), 'manufacturerSerialNumber', '__urnxml_gov_auicsmegeodesy0_4_baseGeodeticEquipmentType_urnxml_gov_auicsmegeodesy0_4manufacturerSerialNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 82, 20), )

    
    manufacturerSerialNumber = property(__manufacturerSerialNumber.value, __manufacturerSerialNumber.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __manufacturerName.name() : __manufacturerName,
        __manufacturerModel.name() : __manufacturerModel,
        __manufacturerPartNumber.name() : __manufacturerPartNumber,
        __manufacturerDescription.name() : __manufacturerDescription,
        __manufacturerSerialNumber.name() : __manufacturerSerialNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.baseGeodeticEquipmentType = baseGeodeticEquipmentType
Namespace.addCategoryObject('typeBinding', 'baseGeodeticEquipmentType', baseGeodeticEquipmentType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractPositionSourceType with content type ELEMENT_ONLY
class AbstractPositionSourceType (AbstractSourceType):
    """Encapsulates"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionSourceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 80, 4)
    _ElementMap = AbstractSourceType._ElementMap.copy()
    _AttributeMap = AbstractSourceType._AttributeMap.copy()
    # Base type is AbstractSourceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runDate ({urn:xml-gov-au:icsm:egeodesy:0.4}runDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runBy ({urn:xml-gov-au:icsm:egeodesy:0.4}runBy) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element operands ({urn:xml-gov-au:icsm:egeodesy:0.4}operands) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element results ({urn:xml-gov-au:icsm:egeodesy:0.4}results) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}operation uses Python identifier operation
    __operation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'operation'), 'operation', '__urnxml_gov_auicsmegeodesy0_4_AbstractPositionSourceType_urnxml_gov_auicsmegeodesy0_4operation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 87, 20), )

    
    operation = property(__operation.value, __operation.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __operation.name() : __operation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractPositionSourceType = AbstractPositionSourceType
Namespace.addCategoryObject('typeBinding', 'AbstractPositionSourceType', AbstractPositionSourceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}PositionEstimatorProcessType with content type ELEMENT_ONLY
class PositionEstimatorProcessType (AbstractPositionEstimatorType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}PositionEstimatorProcessType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PositionEstimatorProcessType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 164, 4)
    _ElementMap = AbstractPositionEstimatorType._ElementMap.copy()
    _AttributeMap = AbstractPositionEstimatorType._AttributeMap.copy()
    # Base type is AbstractPositionEstimatorType
    
    # Element operationVersion ({http://www.opengis.net/gml/3.2}operationVersion) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}processStep uses Python identifier processStep
    __processStep = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'processStep'), 'processStep', '__urnxml_gov_auicsmegeodesy0_4_PositionEstimatorProcessType_urnxml_gov_auicsmegeodesy0_4processStep', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 168, 20), )

    
    processStep = property(__processStep.value, __processStep.set, None, None)

    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'dimension'), 'dimension', '__urnxml_gov_auicsmegeodesy0_4_PositionEstimatorProcessType_dimension', _module_typeBindings.PositionDimensionEnumeration)
    __dimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 179, 16)
    __dimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 179, 16)
    
    dimension = property(__dimension.value, __dimension.set, None, None)

    _ElementMap.update({
        __processStep.name() : __processStep
    })
    _AttributeMap.update({
        __dimension.name() : __dimension
    })
_module_typeBindings.PositionEstimatorProcessType = PositionEstimatorProcessType
Namespace.addCategoryObject('typeBinding', 'PositionEstimatorProcessType', PositionEstimatorProcessType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}adjustmentPositionType with content type ELEMENT_ONLY
class adjustmentPositionType (pyxb.binding.basis.complexTypeDefinition):
    """A reference to the Position record and a description of parameters to constrain."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'adjustmentPositionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 214, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_adjustmentPositionType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_adjustmentPositionType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_adjustmentPositionType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}usesPosition uses Python identifier usesPosition
    __usesPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usesPosition'), 'usesPosition', '__urnxml_gov_auicsmegeodesy0_4_adjustmentPositionType_urnxml_gov_auicsmegeodesy0_4usesPosition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 219, 12), )

    
    usesPosition = property(__usesPosition.value, __usesPosition.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractQuality uses Python identifier AbstractQuality
    __AbstractQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), 'AbstractQuality', '__urnxml_gov_auicsmegeodesy0_4_adjustmentPositionType_urnxml_gov_auicsmegeodesy0_4AbstractQuality', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4), )

    
    AbstractQuality = property(__AbstractQuality.value, __AbstractQuality.set, None, 'Abstract group for quality values.')

    
    # Attribute constraint uses Python identifier constraint
    __constraint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'constraint'), 'constraint', '__urnxml_gov_auicsmegeodesy0_4_adjustmentPositionType_constraint', _module_typeBindings.NodeConstraintEnumeration)
    __constraint._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 227, 8)
    __constraint._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 227, 8)
    
    constraint = property(__constraint.value, __constraint.set, None, None)

    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __usesPosition.name() : __usesPosition,
        __AbstractQuality.name() : __AbstractQuality
    })
    _AttributeMap.update({
        __constraint.name() : __constraint
    })
_module_typeBindings.adjustmentPositionType = adjustmentPositionType
Namespace.addCategoryObject('typeBinding', 'adjustmentPositionType', adjustmentPositionType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementSourceType with content type ELEMENT_ONLY
class AbstractMeasurementSourceType (AbstractSourceType):
    """Encapsulates measurement operation and the operands/results that define the operation event."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementSourceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 397, 4)
    _ElementMap = AbstractSourceType._ElementMap.copy()
    _AttributeMap = AbstractSourceType._AttributeMap.copy()
    # Base type is AbstractSourceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runDate ({urn:xml-gov-au:icsm:egeodesy:0.4}runDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runBy ({urn:xml-gov-au:icsm:egeodesy:0.4}runBy) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element operands ({urn:xml-gov-au:icsm:egeodesy:0.4}operands) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element results ({urn:xml-gov-au:icsm:egeodesy:0.4}results) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}operation uses Python identifier operation
    __operation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'operation'), 'operation', '__urnxml_gov_auicsmegeodesy0_4_AbstractMeasurementSourceType_urnxml_gov_auicsmegeodesy0_4operation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 404, 20), )

    
    operation = property(__operation.value, __operation.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __operation.name() : __operation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractMeasurementSourceType = AbstractMeasurementSourceType
Namespace.addCategoryObject('typeBinding', 'AbstractMeasurementSourceType', AbstractMeasurementSourceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementEstimatorType with content type ELEMENT_ONLY
class AbstractMeasurementEstimatorType (AbstractMeasurementOperationType):
    """Version 0.2.2: Mirrors the hierarchy of gml:AbstractMeasurementOperation for the purpose of the definition of estimators. Extends AbstractMeasurementOperation."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementEstimatorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 416, 4)
    _ElementMap = AbstractMeasurementOperationType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementOperationType._AttributeMap.copy()
    # Base type is AbstractMeasurementOperationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element procedure ({urn:xml-gov-au:icsm:egeodesy:0.4}procedure) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementOperationType
    
    # Element ReductionMethod ({urn:xml-gov-au:icsm:egeodesy:0.4}ReductionMethod) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementOperationType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractMeasurementEstimatorType = AbstractMeasurementEstimatorType
Namespace.addCategoryObject('typeBinding', 'AbstractMeasurementEstimatorType', AbstractMeasurementEstimatorType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractDefinitionSourceType with content type ELEMENT_ONLY
class AbstractDefinitionSourceType (AbstractSourceType):
    """Encapsulates a reference to the operation definition used to produce resultant parameters that are gazetted in the gml:IdentifiedObject."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionSourceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 491, 4)
    _ElementMap = AbstractSourceType._ElementMap.copy()
    _AttributeMap = AbstractSourceType._AttributeMap.copy()
    # Base type is AbstractSourceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runDate ({urn:xml-gov-au:icsm:egeodesy:0.4}runDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runBy ({urn:xml-gov-au:icsm:egeodesy:0.4}runBy) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element operands ({urn:xml-gov-au:icsm:egeodesy:0.4}operands) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element results ({urn:xml-gov-au:icsm:egeodesy:0.4}results) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractDefinitionOperation uses Python identifier AbstractDefinitionOperation
    __AbstractDefinitionOperation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionOperation'), 'AbstractDefinitionOperation', '__urnxml_gov_auicsmegeodesy0_4_AbstractDefinitionSourceType_urnxml_gov_auicsmegeodesy0_4AbstractDefinitionOperation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 521, 4), )

    
    AbstractDefinitionOperation = property(__AbstractDefinitionOperation.value, __AbstractDefinitionOperation.set, None, 'Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of definitons.')

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __AbstractDefinitionOperation.name() : __AbstractDefinitionOperation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractDefinitionSourceType = AbstractDefinitionSourceType
Namespace.addCategoryObject('typeBinding', 'AbstractDefinitionSourceType', AbstractDefinitionSourceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractDefinitionEstimatorType with content type ELEMENT_ONLY
class AbstractDefinitionEstimatorType (AbstractDefinitionOperationType):
    """Version 0.2.2: Mirrors the hierarchy of gml:AbstractMeasurementOperation for the purpose of the definition of estimators. Extends AbstractMeasurementOperation."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionEstimatorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 510, 4)
    _ElementMap = AbstractDefinitionOperationType._ElementMap.copy()
    _AttributeMap = AbstractDefinitionOperationType._AttributeMap.copy()
    # Base type is AbstractDefinitionOperationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute id_ inherited from {http://www.opengis.net/gml/3.2}DefinitionBaseType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractDefinitionEstimatorType = AbstractDefinitionEstimatorType
Namespace.addCategoryObject('typeBinding', 'AbstractDefinitionEstimatorType', AbstractDefinitionEstimatorType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}InterpolatedValueSourceType with content type ELEMENT_ONLY
class InterpolatedValueSourceType (AbstractSourceType):
    """Encapsulates the definition used to compute the interpolation, the gridded data operand and a result reference."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterpolatedValueSourceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 575, 4)
    _ElementMap = AbstractSourceType._ElementMap.copy()
    _AttributeMap = AbstractSourceType._AttributeMap.copy()
    # Base type is AbstractSourceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runDate ({urn:xml-gov-au:icsm:egeodesy:0.4}runDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runBy ({urn:xml-gov-au:icsm:egeodesy:0.4}runBy) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element operands ({urn:xml-gov-au:icsm:egeodesy:0.4}operands) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element results ({urn:xml-gov-au:icsm:egeodesy:0.4}results) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}definition uses Python identifier definition
    __definition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'definition'), 'definition', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedValueSourceType_urnxml_gov_auicsmegeodesy0_4definition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 582, 20), )

    
    definition = property(__definition.value, __definition.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __definition.name() : __definition
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterpolatedValueSourceType = InterpolatedValueSourceType
Namespace.addCategoryObject('typeBinding', 'InterpolatedValueSourceType', InterpolatedValueSourceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ObservationQualitySourceType with content type ELEMENT_ONLY
class ObservationQualitySourceType (AbstractSourceType):
    """Encapsulates the definition used to compute the interpolation, the gridded data operand and a result reference."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ObservationQualitySourceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 601, 4)
    _ElementMap = AbstractSourceType._ElementMap.copy()
    _AttributeMap = AbstractSourceType._AttributeMap.copy()
    # Base type is AbstractSourceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runDate ({urn:xml-gov-au:icsm:egeodesy:0.4}runDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runBy ({urn:xml-gov-au:icsm:egeodesy:0.4}runBy) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element operands ({urn:xml-gov-au:icsm:egeodesy:0.4}operands) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element results ({urn:xml-gov-au:icsm:egeodesy:0.4}results) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}definition uses Python identifier definition
    __definition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'definition'), 'definition', '__urnxml_gov_auicsmegeodesy0_4_ObservationQualitySourceType_urnxml_gov_auicsmegeodesy0_4definition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 608, 20), )

    
    definition = property(__definition.value, __definition.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __definition.name() : __definition
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ObservationQualitySourceType = ObservationQualitySourceType
Namespace.addCategoryObject('typeBinding', 'ObservationQualitySourceType', ObservationQualitySourceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}multipathSourceType with content type ELEMENT_ONLY
class multipathSourceType (basePossibleProblemSourceType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}multipathSourceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'multipathSourceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 53, 4)
    _ElementMap = basePossibleProblemSourceType._ElementMap.copy()
    _AttributeMap = basePossibleProblemSourceType._AttributeMap.copy()
    # Base type is basePossibleProblemSourceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}basePossibleProblemSourceType
    
    # Element possibleProblemSource ({urn:xml-gov-au:icsm:egeodesy:0.4}possibleProblemSource) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}basePossibleProblemSourceType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}basePossibleProblemSourceType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.multipathSourceType = multipathSourceType
Namespace.addCategoryObject('typeBinding', 'multipathSourceType', multipathSourceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}signalObstructionType with content type ELEMENT_ONLY
class signalObstructionType (basePossibleProblemSourceType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}signalObstructionType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'signalObstructionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 59, 4)
    _ElementMap = basePossibleProblemSourceType._ElementMap.copy()
    _AttributeMap = basePossibleProblemSourceType._AttributeMap.copy()
    # Base type is basePossibleProblemSourceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}basePossibleProblemSourceType
    
    # Element possibleProblemSource ({urn:xml-gov-au:icsm:egeodesy:0.4}possibleProblemSource) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}basePossibleProblemSourceType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}basePossibleProblemSourceType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.signalObstructionType = signalObstructionType
Namespace.addCategoryObject('typeBinding', 'signalObstructionType', signalObstructionType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}radioInterferenceType with content type ELEMENT_ONLY
class radioInterferenceType (basePossibleProblemSourceType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}radioInterferenceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'radioInterferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 65, 4)
    _ElementMap = basePossibleProblemSourceType._ElementMap.copy()
    _AttributeMap = basePossibleProblemSourceType._AttributeMap.copy()
    # Base type is basePossibleProblemSourceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}basePossibleProblemSourceType
    
    # Element possibleProblemSource ({urn:xml-gov-au:icsm:egeodesy:0.4}possibleProblemSource) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}basePossibleProblemSourceType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}basePossibleProblemSourceType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}observedDegradation uses Python identifier observedDegradation
    __observedDegradation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'observedDegradation'), 'observedDegradation', '__urnxml_gov_auicsmegeodesy0_4_radioInterferenceType_urnxml_gov_auicsmegeodesy0_4observedDegradation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 69, 20), )

    
    observedDegradation = property(__observedDegradation.value, __observedDegradation.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __observedDegradation.name() : __observedDegradation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.radioInterferenceType = radioInterferenceType
Namespace.addCategoryObject('typeBinding', 'radioInterferenceType', radioInterferenceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MeasurementType with content type ELEMENT_ONLY
class MeasurementType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MeasurementType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MeasurementType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 55, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'type'), 'type', '__urnxml_gov_auicsmegeodesy0_4_MeasurementType_urnxml_gov_auicsmegeodesy0_4type', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 59, 20), )

    
    type = property(__type.value, __type.set, None, 'Type of measurement. Typical examples (from the DynaNet manual) are:\n                                Measurement types\n                                A Horizontal angles (uncorrelated)\n                                B Geodetic azimuth (or bearing)\n                                C Ellipsoid chord distance\n                                D Direction set\n                                E Ellipsoid arc distance \n                                G Single GNSS baseline\n                                H Orthometric height\n                                I Astronomic latitude\n                                J Astronomic longitude\n                                K Astronomic (Laplace) azimuth\n                                L Orthometric height difference\n                                M Mean sea level (MSL) arc distance \n                                P Geodetic latitude\n                                Q Geodetic longitude\n                                R Ellipsoid height\n                                S Slope (direct) distance\n                                V Zenith distance\n                                X GNSS baseline cluster (full correlations)\n                                Y GNSS point cluster (full correlations)\n                                Z Vertical angle\n                            ')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}MeasurementLine uses Python identifier MeasurementLine
    __MeasurementLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MeasurementLine'), 'MeasurementLine', '__urnxml_gov_auicsmegeodesy0_4_MeasurementType_urnxml_gov_auicsmegeodesy0_4MeasurementLine', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 86, 20), )

    
    MeasurementLine = property(__MeasurementLine.value, __MeasurementLine.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}linePairQuality uses Python identifier linePairQuality
    __linePairQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'linePairQuality'), 'linePairQuality', '__urnxml_gov_auicsmegeodesy0_4_MeasurementType_urnxml_gov_auicsmegeodesy0_4linePairQuality', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 87, 20), )

    
    linePairQuality = property(__linePairQuality.value, __linePairQuality.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}MeasurementPoint uses Python identifier MeasurementPoint
    __MeasurementPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPoint'), 'MeasurementPoint', '__urnxml_gov_auicsmegeodesy0_4_MeasurementType_urnxml_gov_auicsmegeodesy0_4MeasurementPoint', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 88, 20), )

    
    MeasurementPoint = property(__MeasurementPoint.value, __MeasurementPoint.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}pointPairQuality uses Python identifier pointPairQuality
    __pointPairQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pointPairQuality'), 'pointPairQuality', '__urnxml_gov_auicsmegeodesy0_4_MeasurementType_urnxml_gov_auicsmegeodesy0_4pointPairQuality', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 89, 20), )

    
    pointPairQuality = property(__pointPairQuality.value, __pointPairQuality.set, None, None)

    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_MeasurementType_srsName', pyxb.binding.datatypes.anyURI)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_MeasurementType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_MeasurementType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_MeasurementType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __type.name() : __type,
        __MeasurementLine.name() : __MeasurementLine,
        __linePairQuality.name() : __linePairQuality,
        __MeasurementPoint.name() : __MeasurementPoint,
        __pointPairQuality.name() : __pointPairQuality
    })
    _AttributeMap.update({
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension,
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels
    })
_module_typeBindings.MeasurementType = MeasurementType
Namespace.addCategoryObject('typeBinding', 'MeasurementType', MeasurementType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}HorizontalAngleType with content type ELEMENT_ONLY
class HorizontalAngleType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}HorizontalAngleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HorizontalAngleType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 179, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}base uses Python identifier base
    __base = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'base'), 'base', '__urnxml_gov_auicsmegeodesy0_4_HorizontalAngleType_urnxml_gov_auicsmegeodesy0_4base', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 183, 20), )

    
    base = property(__base.value, __base.set, None, 'The base is a reference to the node at which the angle was measured (the instrument setup). The base/value element is ignored and by convention should be blank.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}angle uses Python identifier angle
    __angle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'angle'), 'angle', '__urnxml_gov_auicsmegeodesy0_4_HorizontalAngleType_urnxml_gov_auicsmegeodesy0_4angle', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 188, 20), )

    
    angle = property(__angle.value, __angle.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __base.name() : __base,
        __angle.name() : __angle
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.HorizontalAngleType = HorizontalAngleType
Namespace.addCategoryObject('typeBinding', 'HorizontalAngleType', HorizontalAngleType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GeodeticAzimuthType with content type ELEMENT_ONLY
class GeodeticAzimuthType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GeodeticAzimuthType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GeodeticAzimuthType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 196, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}azimuth uses Python identifier azimuth
    __azimuth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'azimuth'), 'azimuth', '__urnxml_gov_auicsmegeodesy0_4_GeodeticAzimuthType_urnxml_gov_auicsmegeodesy0_4azimuth', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 200, 20), )

    
    azimuth = property(__azimuth.value, __azimuth.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_GeodeticAzimuthType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_GeodeticAzimuthType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_GeodeticAzimuthType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_GeodeticAzimuthType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __azimuth.name() : __azimuth
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.GeodeticAzimuthType = GeodeticAzimuthType
Namespace.addCategoryObject('typeBinding', 'GeodeticAzimuthType', GeodeticAzimuthType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}EllipsoidChordDistanceType with content type ELEMENT_ONLY
class EllipsoidChordDistanceType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}EllipsoidChordDistanceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EllipsoidChordDistanceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 209, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}distance uses Python identifier distance
    __distance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'distance'), 'distance', '__urnxml_gov_auicsmegeodesy0_4_EllipsoidChordDistanceType_urnxml_gov_auicsmegeodesy0_4distance', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 213, 20), )

    
    distance = property(__distance.value, __distance.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_EllipsoidChordDistanceType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_EllipsoidChordDistanceType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_EllipsoidChordDistanceType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_EllipsoidChordDistanceType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __distance.name() : __distance
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.EllipsoidChordDistanceType = EllipsoidChordDistanceType
Namespace.addCategoryObject('typeBinding', 'EllipsoidChordDistanceType', EllipsoidChordDistanceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DirectionSetType with content type ELEMENT_ONLY
class DirectionSetType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DirectionSetType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DirectionSetType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 233, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__urnxml_gov_auicsmegeodesy0_4_DirectionSetType_urnxml_gov_auicsmegeodesy0_4direction', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 237, 20), )

    
    direction = property(__direction.value, __direction.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}directionPairQuality uses Python identifier directionPairQuality
    __directionPairQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'directionPairQuality'), 'directionPairQuality', '__urnxml_gov_auicsmegeodesy0_4_DirectionSetType_urnxml_gov_auicsmegeodesy0_4directionPairQuality', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 238, 20), )

    
    directionPairQuality = property(__directionPairQuality.value, __directionPairQuality.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __direction.name() : __direction,
        __directionPairQuality.name() : __directionPairQuality
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DirectionSetType = DirectionSetType
Namespace.addCategoryObject('typeBinding', 'DirectionSetType', DirectionSetType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GNSSBaselineType with content type ELEMENT_ONLY
class GNSSBaselineType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GNSSBaselineType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GNSSBaselineType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 246, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}vector uses Python identifier vector
    __vector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vector'), 'vector', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineType_urnxml_gov_auicsmegeodesy0_4vector', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 250, 20), )

    
    vector = property(__vector.value, __vector.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __vector.name() : __vector
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.GNSSBaselineType = GNSSBaselineType
Namespace.addCategoryObject('typeBinding', 'GNSSBaselineType', GNSSBaselineType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}OrthometricHeightType with content type ELEMENT_ONLY
class OrthometricHeightType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}OrthometricHeightType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OrthometricHeightType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 259, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}orthometricHeight uses Python identifier orthometricHeight
    __orthometricHeight = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'orthometricHeight'), 'orthometricHeight', '__urnxml_gov_auicsmegeodesy0_4_OrthometricHeightType_urnxml_gov_auicsmegeodesy0_4orthometricHeight', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 263, 20), )

    
    orthometricHeight = property(__orthometricHeight.value, __orthometricHeight.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_OrthometricHeightType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_OrthometricHeightType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_OrthometricHeightType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_OrthometricHeightType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __orthometricHeight.name() : __orthometricHeight
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.OrthometricHeightType = OrthometricHeightType
Namespace.addCategoryObject('typeBinding', 'OrthometricHeightType', OrthometricHeightType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}HeightDifferenceType with content type ELEMENT_ONLY
class HeightDifferenceType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}HeightDifferenceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HeightDifferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 272, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}heightDifference uses Python identifier heightDifference
    __heightDifference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heightDifference'), 'heightDifference', '__urnxml_gov_auicsmegeodesy0_4_HeightDifferenceType_urnxml_gov_auicsmegeodesy0_4heightDifference', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 276, 20), )

    
    heightDifference = property(__heightDifference.value, __heightDifference.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __heightDifference.name() : __heightDifference
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.HeightDifferenceType = HeightDifferenceType
Namespace.addCategoryObject('typeBinding', 'HeightDifferenceType', HeightDifferenceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}OrthometricHeightDifferenceType with content type ELEMENT_ONLY
class OrthometricHeightDifferenceType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}OrthometricHeightDifferenceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OrthometricHeightDifferenceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 284, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}heightDifference uses Python identifier heightDifference
    __heightDifference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heightDifference'), 'heightDifference', '__urnxml_gov_auicsmegeodesy0_4_OrthometricHeightDifferenceType_urnxml_gov_auicsmegeodesy0_4heightDifference', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 288, 20), )

    
    heightDifference = property(__heightDifference.value, __heightDifference.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_OrthometricHeightDifferenceType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_OrthometricHeightDifferenceType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_OrthometricHeightDifferenceType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_OrthometricHeightDifferenceType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __heightDifference.name() : __heightDifference
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.OrthometricHeightDifferenceType = OrthometricHeightDifferenceType
Namespace.addCategoryObject('typeBinding', 'OrthometricHeightDifferenceType', OrthometricHeightDifferenceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLatitudeType with content type ELEMENT_ONLY
class AstronomicLatitudeType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLatitudeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AstronomicLatitudeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 297, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}latitude uses Python identifier latitude
    __latitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'latitude'), 'latitude', '__urnxml_gov_auicsmegeodesy0_4_AstronomicLatitudeType_urnxml_gov_auicsmegeodesy0_4latitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 301, 20), )

    
    latitude = property(__latitude.value, __latitude.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_AstronomicLatitudeType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_AstronomicLatitudeType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_AstronomicLatitudeType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_AstronomicLatitudeType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __latitude.name() : __latitude
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.AstronomicLatitudeType = AstronomicLatitudeType
Namespace.addCategoryObject('typeBinding', 'AstronomicLatitudeType', AstronomicLatitudeType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLongitudeType with content type ELEMENT_ONLY
class AstronomicLongitudeType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLongitudeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AstronomicLongitudeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 310, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}longitude uses Python identifier longitude
    __longitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'longitude'), 'longitude', '__urnxml_gov_auicsmegeodesy0_4_AstronomicLongitudeType_urnxml_gov_auicsmegeodesy0_4longitude', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 314, 20), )

    
    longitude = property(__longitude.value, __longitude.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_AstronomicLongitudeType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_AstronomicLongitudeType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_AstronomicLongitudeType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_AstronomicLongitudeType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __longitude.name() : __longitude
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.AstronomicLongitudeType = AstronomicLongitudeType
Namespace.addCategoryObject('typeBinding', 'AstronomicLongitudeType', AstronomicLongitudeType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicAzimuthType with content type ELEMENT_ONLY
class AstronomicAzimuthType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicAzimuthType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AstronomicAzimuthType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 323, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}azimuth uses Python identifier azimuth
    __azimuth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'azimuth'), 'azimuth', '__urnxml_gov_auicsmegeodesy0_4_AstronomicAzimuthType_urnxml_gov_auicsmegeodesy0_4azimuth', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 327, 20), )

    
    azimuth = property(__azimuth.value, __azimuth.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_AstronomicAzimuthType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_AstronomicAzimuthType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_AstronomicAzimuthType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_AstronomicAzimuthType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __azimuth.name() : __azimuth
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.AstronomicAzimuthType = AstronomicAzimuthType
Namespace.addCategoryObject('typeBinding', 'AstronomicAzimuthType', AstronomicAzimuthType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MeanSeaLevelArcDistanceType with content type ELEMENT_ONLY
class MeanSeaLevelArcDistanceType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MeanSeaLevelArcDistanceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MeanSeaLevelArcDistanceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 352, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}arcDistance uses Python identifier arcDistance
    __arcDistance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'arcDistance'), 'arcDistance', '__urnxml_gov_auicsmegeodesy0_4_MeanSeaLevelArcDistanceType_urnxml_gov_auicsmegeodesy0_4arcDistance', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 356, 20), )

    
    arcDistance = property(__arcDistance.value, __arcDistance.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_MeanSeaLevelArcDistanceType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_MeanSeaLevelArcDistanceType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_MeanSeaLevelArcDistanceType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_MeanSeaLevelArcDistanceType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __arcDistance.name() : __arcDistance
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.MeanSeaLevelArcDistanceType = MeanSeaLevelArcDistanceType
Namespace.addCategoryObject('typeBinding', 'MeanSeaLevelArcDistanceType', MeanSeaLevelArcDistanceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SlopeDistanceType with content type ELEMENT_ONLY
class SlopeDistanceType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SlopeDistanceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SlopeDistanceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 365, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}slopeDistance uses Python identifier slopeDistance
    __slopeDistance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'slopeDistance'), 'slopeDistance', '__urnxml_gov_auicsmegeodesy0_4_SlopeDistanceType_urnxml_gov_auicsmegeodesy0_4slopeDistance', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 369, 20), )

    
    slopeDistance = property(__slopeDistance.value, __slopeDistance.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __slopeDistance.name() : __slopeDistance
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SlopeDistanceType = SlopeDistanceType
Namespace.addCategoryObject('typeBinding', 'SlopeDistanceType', SlopeDistanceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}EllipsoidHeightType with content type ELEMENT_ONLY
class EllipsoidHeightType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}EllipsoidHeightType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EllipsoidHeightType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 377, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}ellipsoidHeight uses Python identifier ellipsoidHeight
    __ellipsoidHeight = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ellipsoidHeight'), 'ellipsoidHeight', '__urnxml_gov_auicsmegeodesy0_4_EllipsoidHeightType_urnxml_gov_auicsmegeodesy0_4ellipsoidHeight', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 381, 20), )

    
    ellipsoidHeight = property(__ellipsoidHeight.value, __ellipsoidHeight.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_EllipsoidHeightType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_EllipsoidHeightType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_EllipsoidHeightType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_EllipsoidHeightType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __ellipsoidHeight.name() : __ellipsoidHeight
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.EllipsoidHeightType = EllipsoidHeightType
Namespace.addCategoryObject('typeBinding', 'EllipsoidHeightType', EllipsoidHeightType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ZenithDistanceType with content type ELEMENT_ONLY
class ZenithDistanceType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ZenithDistanceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ZenithDistanceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 390, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}zenithDistance uses Python identifier zenithDistance
    __zenithDistance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'zenithDistance'), 'zenithDistance', '__urnxml_gov_auicsmegeodesy0_4_ZenithDistanceType_urnxml_gov_auicsmegeodesy0_4zenithDistance', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 394, 20), )

    
    zenithDistance = property(__zenithDistance.value, __zenithDistance.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __zenithDistance.name() : __zenithDistance
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ZenithDistanceType = ZenithDistanceType
Namespace.addCategoryObject('typeBinding', 'ZenithDistanceType', ZenithDistanceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}VerticalAngleType with content type ELEMENT_ONLY
class VerticalAngleType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}VerticalAngleType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VerticalAngleType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 402, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}verticalAngle uses Python identifier verticalAngle
    __verticalAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'verticalAngle'), 'verticalAngle', '__urnxml_gov_auicsmegeodesy0_4_VerticalAngleType_urnxml_gov_auicsmegeodesy0_4verticalAngle', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 406, 20), )

    
    verticalAngle = property(__verticalAngle.value, __verticalAngle.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __verticalAngle.name() : __verticalAngle
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.VerticalAngleType = VerticalAngleType
Namespace.addCategoryObject('typeBinding', 'VerticalAngleType', VerticalAngleType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GNSSBaselineClusterType with content type ELEMENT_ONLY
class GNSSBaselineClusterType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GNSSBaselineClusterType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GNSSBaselineClusterType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 414, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Baseline uses Python identifier Baseline
    __Baseline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Baseline'), 'Baseline', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineClusterType_urnxml_gov_auicsmegeodesy0_4Baseline', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 418, 20), )

    
    Baseline = property(__Baseline.value, __Baseline.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}baselinePairQuality uses Python identifier baselinePairQuality
    __baselinePairQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'baselinePairQuality'), 'baselinePairQuality', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineClusterType_urnxml_gov_auicsmegeodesy0_4baselinePairQuality', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 419, 20), )

    
    baselinePairQuality = property(__baselinePairQuality.value, __baselinePairQuality.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineClusterType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineClusterType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineClusterType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineClusterType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __Baseline.name() : __Baseline,
        __baselinePairQuality.name() : __baselinePairQuality
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.GNSSBaselineClusterType = GNSSBaselineClusterType
Namespace.addCategoryObject('typeBinding', 'GNSSBaselineClusterType', GNSSBaselineClusterType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GNSSPointClusterType with content type ELEMENT_ONLY
class GNSSPointClusterType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GNSSPointClusterType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GNSSPointClusterType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 428, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}point uses Python identifier point
    __point = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'point'), 'point', '__urnxml_gov_auicsmegeodesy0_4_GNSSPointClusterType_urnxml_gov_auicsmegeodesy0_4point', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 432, 20), )

    
    point = property(__point.value, __point.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}pointPairQuality uses Python identifier pointPairQuality
    __pointPairQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pointPairQuality'), 'pointPairQuality', '__urnxml_gov_auicsmegeodesy0_4_GNSSPointClusterType_urnxml_gov_auicsmegeodesy0_4pointPairQuality', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 433, 20), )

    
    pointPairQuality = property(__pointPairQuality.value, __pointPairQuality.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_GNSSPointClusterType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_GNSSPointClusterType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_GNSSPointClusterType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_GNSSPointClusterType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __point.name() : __point,
        __pointPairQuality.name() : __pointPairQuality
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.GNSSPointClusterType = GNSSPointClusterType
Namespace.addCategoryObject('typeBinding', 'GNSSPointClusterType', GNSSPointClusterType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DInSARWrappedType with content type ELEMENT_ONLY
class DInSARWrappedType (AbstractMeasurementType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DInSARWrappedType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DInSARWrappedType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 442, 4)
    _ElementMap = AbstractMeasurementType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementType._AttributeMap.copy()
    # Base type is AbstractMeasurementType
    
    # Element {http://www.opengis.net/gml/3.2}RectifiedGridCoverage uses Python identifier RectifiedGridCoverage
    __RectifiedGridCoverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'RectifiedGridCoverage'), 'RectifiedGridCoverage', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_httpwww_opengis_netgml3_2RectifiedGridCoverage', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coverage.xsd', 287, 1), )

    
    RectifiedGridCoverage = property(__RectifiedGridCoverage.value, __RectifiedGridCoverage.set, None, 'The gml:RectifiedGridCoverage is a discrete point coverage based on a rectified grid. It is similar to the grid coverage except that the points of the grid are geometrically referenced. The rectified grid coverage has a domain that is a gml:RectifiedGrid geometry.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}captureSystem uses Python identifier captureSystem
    __captureSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'captureSystem'), 'captureSystem', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_urnxml_gov_auicsmegeodesy0_4captureSystem', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 446, 20), )

    
    captureSystem = property(__captureSystem.value, __captureSystem.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}mFrame uses Python identifier mFrame
    __mFrame = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mFrame'), 'mFrame', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_urnxml_gov_auicsmegeodesy0_4mFrame', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 448, 20), )

    
    mFrame = property(__mFrame.value, __mFrame.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}sFrame uses Python identifier sFrame
    __sFrame = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sFrame'), 'sFrame', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_urnxml_gov_auicsmegeodesy0_4sFrame', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 449, 20), )

    
    sFrame = property(__sFrame.value, __sFrame.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}temporalBaseline uses Python identifier temporalBaseline
    __temporalBaseline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'temporalBaseline'), 'temporalBaseline', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_urnxml_gov_auicsmegeodesy0_4temporalBaseline', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 450, 20), )

    
    temporalBaseline = property(__temporalBaseline.value, __temporalBaseline.set, None, 'Decimal days')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}perpendicularBaseline uses Python identifier perpendicularBaseline
    __perpendicularBaseline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'perpendicularBaseline'), 'perpendicularBaseline', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_urnxml_gov_auicsmegeodesy0_4perpendicularBaseline', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 455, 20), )

    
    perpendicularBaseline = property(__perpendicularBaseline.value, __perpendicularBaseline.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}track uses Python identifier track
    __track = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'track'), 'track', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_urnxml_gov_auicsmegeodesy0_4track', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 456, 20), )

    
    track = property(__track.value, __track.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}heading uses Python identifier heading
    __heading = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heading'), 'heading', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_urnxml_gov_auicsmegeodesy0_4heading', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 457, 20), )

    
    heading = property(__heading.value, __heading.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}polarity uses Python identifier polarity
    __polarity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'polarity'), 'polarity', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_urnxml_gov_auicsmegeodesy0_4polarity', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 458, 20), )

    
    polarity = property(__polarity.value, __polarity.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}centre uses Python identifier centre
    __centre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'centre'), 'centre', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_urnxml_gov_auicsmegeodesy0_4centre', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 459, 20), )

    
    centre = property(__centre.value, __centre.set, None, 'Geodetic coordinate lat/lon')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}lookAngle uses Python identifier lookAngle
    __lookAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'lookAngle'), 'lookAngle', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_urnxml_gov_auicsmegeodesy0_4lookAngle', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 464, 20), )

    
    lookAngle = property(__lookAngle.value, __lookAngle.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}imageFormat uses Python identifier imageFormat
    __imageFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'imageFormat'), 'imageFormat', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_urnxml_gov_auicsmegeodesy0_4imageFormat', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 465, 20), )

    
    imageFormat = property(__imageFormat.value, __imageFormat.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_DInSARWrappedType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __RectifiedGridCoverage.name() : __RectifiedGridCoverage,
        __captureSystem.name() : __captureSystem,
        __mFrame.name() : __mFrame,
        __sFrame.name() : __sFrame,
        __temporalBaseline.name() : __temporalBaseline,
        __perpendicularBaseline.name() : __perpendicularBaseline,
        __track.name() : __track,
        __heading.name() : __heading,
        __polarity.name() : __polarity,
        __centre.name() : __centre,
        __lookAngle.name() : __lookAngle,
        __imageFormat.name() : __imageFormat
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.DInSARWrappedType = DInSARWrappedType
Namespace.addCategoryObject('typeBinding', 'DInSARWrappedType', DInSARWrappedType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SiteType with content type ELEMENT_ONLY
class SiteType (AbstractMonumentType):
    """A Site is the umbrella element containing all physical information about a particular observing system site. All setups, nodes and observation quality elements reference a site. Conversely, measurements and positions do not reference a physical site but rather they reference the node abstraction. There can be more than one node that references the one site, but each node must have a unique authority. E.g. Yarragadee CORS can have a Reg13 node (or site certificate) and a national adjustment node. Both reference the same site and thus simultaneously reference the same setup and observation quality, but the estimated coordinates and velocities with associated quality can be different and this is dependent on the business rules of the authority."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SiteType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 65, 4)
    _ElementMap = AbstractMonumentType._ElementMap.copy()
    _AttributeMap = AbstractMonumentType._AttributeMap.copy()
    # Base type is AbstractMonumentType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element installedBy ({urn:xml-gov-au:icsm:egeodesy:0.4}installedBy) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element installedDate ({urn:xml-gov-au:icsm:egeodesy:0.4}installedDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Monument uses Python identifier Monument
    __Monument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Monument'), 'Monument', '__urnxml_gov_auicsmegeodesy0_4_SiteType_urnxml_gov_auicsmegeodesy0_4Monument', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 72, 20), )

    
    Monument = property(__Monument.value, __Monument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}SupplementaryMark uses Python identifier SupplementaryMark
    __SupplementaryMark = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SupplementaryMark'), 'SupplementaryMark', '__urnxml_gov_auicsmegeodesy0_4_SiteType_urnxml_gov_auicsmegeodesy0_4SupplementaryMark', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 73, 20), )

    
    SupplementaryMark = property(__SupplementaryMark.value, __SupplementaryMark.set, None, None)

    
    # Element Status ({urn:xml-gov-au:icsm:egeodesy:0.4}Status) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __Monument.name() : __Monument,
        __SupplementaryMark.name() : __SupplementaryMark
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SiteType = SiteType
Namespace.addCategoryObject('typeBinding', 'SiteType', SiteType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentType with content type ELEMENT_ONLY
class MonumentType (AbstractMonumentType):
    """Contains physical and geological information about the Monument. The meta-data and geological elements are derived from the SOPAC Site Log schema element mi:siteIdentification."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MonumentType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 81, 4)
    _ElementMap = AbstractMonumentType._ElementMap.copy()
    _AttributeMap = AbstractMonumentType._AttributeMap.copy()
    # Base type is AbstractMonumentType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element installedBy ({urn:xml-gov-au:icsm:egeodesy:0.4}installedBy) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element installedDate ({urn:xml-gov-au:icsm:egeodesy:0.4}installedDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}inscription uses Python identifier inscription
    __inscription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'inscription'), 'inscription', '__urnxml_gov_auicsmegeodesy0_4_MonumentType_urnxml_gov_auicsmegeodesy0_4inscription', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 88, 20), )

    
    inscription = property(__inscription.value, __inscription.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}monumentDescription uses Python identifier monumentDescription
    __monumentDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'monumentDescription'), 'monumentDescription', '__urnxml_gov_auicsmegeodesy0_4_MonumentType_urnxml_gov_auicsmegeodesy0_4monumentDescription', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 89, 20), )

    
    monumentDescription = property(__monumentDescription.value, __monumentDescription.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}height uses Python identifier height
    __height = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'height'), 'height', '__urnxml_gov_auicsmegeodesy0_4_MonumentType_urnxml_gov_auicsmegeodesy0_4height', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 90, 20), )

    
    height = property(__height.value, __height.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}foundation uses Python identifier foundation
    __foundation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'foundation'), 'foundation', '__urnxml_gov_auicsmegeodesy0_4_MonumentType_urnxml_gov_auicsmegeodesy0_4foundation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 91, 20), )

    
    foundation = property(__foundation.value, __foundation.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}foundationDepth uses Python identifier foundationDepth
    __foundationDepth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'foundationDepth'), 'foundationDepth', '__urnxml_gov_auicsmegeodesy0_4_MonumentType_urnxml_gov_auicsmegeodesy0_4foundationDepth', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 92, 20), )

    
    foundationDepth = property(__foundationDepth.value, __foundationDepth.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}markerDescription uses Python identifier markerDescription
    __markerDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'markerDescription'), 'markerDescription', '__urnxml_gov_auicsmegeodesy0_4_MonumentType_urnxml_gov_auicsmegeodesy0_4markerDescription', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 93, 20), )

    
    markerDescription = property(__markerDescription.value, __markerDescription.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}geologicCharacteristic uses Python identifier geologicCharacteristic
    __geologicCharacteristic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'geologicCharacteristic'), 'geologicCharacteristic', '__urnxml_gov_auicsmegeodesy0_4_MonumentType_urnxml_gov_auicsmegeodesy0_4geologicCharacteristic', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 94, 20), )

    
    geologicCharacteristic = property(__geologicCharacteristic.value, __geologicCharacteristic.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}bedrockType uses Python identifier bedrockType
    __bedrockType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bedrockType'), 'bedrockType', '__urnxml_gov_auicsmegeodesy0_4_MonumentType_urnxml_gov_auicsmegeodesy0_4bedrockType', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 95, 20), )

    
    bedrockType = property(__bedrockType.value, __bedrockType.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}bedrockCondition uses Python identifier bedrockCondition
    __bedrockCondition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bedrockCondition'), 'bedrockCondition', '__urnxml_gov_auicsmegeodesy0_4_MonumentType_urnxml_gov_auicsmegeodesy0_4bedrockCondition', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 96, 20), )

    
    bedrockCondition = property(__bedrockCondition.value, __bedrockCondition.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}fractureSpacing uses Python identifier fractureSpacing
    __fractureSpacing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fractureSpacing'), 'fractureSpacing', '__urnxml_gov_auicsmegeodesy0_4_MonumentType_urnxml_gov_auicsmegeodesy0_4fractureSpacing', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 97, 20), )

    
    fractureSpacing = property(__fractureSpacing.value, __fractureSpacing.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}faultZonesNearby uses Python identifier faultZonesNearby
    __faultZonesNearby = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'faultZonesNearby'), 'faultZonesNearby', '__urnxml_gov_auicsmegeodesy0_4_MonumentType_urnxml_gov_auicsmegeodesy0_4faultZonesNearby', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 98, 20), )

    
    faultZonesNearby = property(__faultZonesNearby.value, __faultZonesNearby.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}distanceActivity uses Python identifier distanceActivity
    __distanceActivity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'distanceActivity'), 'distanceActivity', '__urnxml_gov_auicsmegeodesy0_4_MonumentType_urnxml_gov_auicsmegeodesy0_4distanceActivity', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 99, 20), )

    
    distanceActivity = property(__distanceActivity.value, __distanceActivity.set, None, None)

    
    # Element Status ({urn:xml-gov-au:icsm:egeodesy:0.4}Status) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __inscription.name() : __inscription,
        __monumentDescription.name() : __monumentDescription,
        __height.name() : __height,
        __foundation.name() : __foundation,
        __foundationDepth.name() : __foundationDepth,
        __markerDescription.name() : __markerDescription,
        __geologicCharacteristic.name() : __geologicCharacteristic,
        __bedrockType.name() : __bedrockType,
        __bedrockCondition.name() : __bedrockCondition,
        __fractureSpacing.name() : __fractureSpacing,
        __faultZonesNearby.name() : __faultZonesNearby,
        __distanceActivity.name() : __distanceActivity
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MonumentType = MonumentType
Namespace.addCategoryObject('typeBinding', 'MonumentType', MonumentType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SiteCertificateType with content type ELEMENT_ONLY
class SiteCertificateType (NodeType):
    """A Site Certificate is a specialisation of geo:Node used for specially certified coordinate products. An example of this is the Regulation 13 certificate for GNSS CORS issued by Geoscience Australia."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SiteCertificateType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 157, 4)
    _ElementMap = NodeType._ElementMap.copy()
    _AttributeMap = NodeType._AttributeMap.copy()
    # Base type is NodeType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}NodeType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}NodeType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}NodeType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}NodeType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}CORSName uses Python identifier CORSName
    __CORSName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CORSName'), 'CORSName', '__urnxml_gov_auicsmegeodesy0_4_SiteCertificateType_urnxml_gov_auicsmegeodesy0_4CORSName', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 164, 20), )

    
    CORSName = property(__CORSName.value, __CORSName.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}FourCharID uses Python identifier FourCharID
    __FourCharID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FourCharID'), 'FourCharID', '__urnxml_gov_auicsmegeodesy0_4_SiteCertificateType_urnxml_gov_auicsmegeodesy0_4FourCharID', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 165, 20), )

    
    FourCharID = property(__FourCharID.value, __FourCharID.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Location uses Python identifier Location
    __Location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Location'), 'Location', '__urnxml_gov_auicsmegeodesy0_4_SiteCertificateType_urnxml_gov_auicsmegeodesy0_4Location', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 172, 20), )

    
    Location = property(__Location.value, __Location.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}LocalIDNumber uses Python identifier LocalIDNumber
    __LocalIDNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LocalIDNumber'), 'LocalIDNumber', '__urnxml_gov_auicsmegeodesy0_4_SiteCertificateType_urnxml_gov_auicsmegeodesy0_4LocalIDNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 173, 20), )

    
    LocalIDNumber = property(__LocalIDNumber.value, __LocalIDNumber.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}MarkDescription uses Python identifier MarkDescription
    __MarkDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MarkDescription'), 'MarkDescription', '__urnxml_gov_auicsmegeodesy0_4_SiteCertificateType_urnxml_gov_auicsmegeodesy0_4MarkDescription', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 174, 20), )

    
    MarkDescription = property(__MarkDescription.value, __MarkDescription.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}GNSSReceiver uses Python identifier GNSSReceiver
    __GNSSReceiver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNSSReceiver'), 'GNSSReceiver', '__urnxml_gov_auicsmegeodesy0_4_SiteCertificateType_urnxml_gov_auicsmegeodesy0_4GNSSReceiver', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 175, 20), )

    
    GNSSReceiver = property(__GNSSReceiver.value, __GNSSReceiver.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}GNSSAntenna uses Python identifier GNSSAntenna
    __GNSSAntenna = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GNSSAntenna'), 'GNSSAntenna', '__urnxml_gov_auicsmegeodesy0_4_SiteCertificateType_urnxml_gov_auicsmegeodesy0_4GNSSAntenna', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 176, 20), )

    
    GNSSAntenna = property(__GNSSAntenna.value, __GNSSAntenna.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}AntennaOffset uses Python identifier AntennaOffset
    __AntennaOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaOffset'), 'AntennaOffset', '__urnxml_gov_auicsmegeodesy0_4_SiteCertificateType_urnxml_gov_auicsmegeodesy0_4AntennaOffset', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 177, 20), )

    
    AntennaOffset = property(__AntennaOffset.value, __AntennaOffset.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Photo uses Python identifier Photo
    __Photo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Photo'), 'Photo', '__urnxml_gov_auicsmegeodesy0_4_SiteCertificateType_urnxml_gov_auicsmegeodesy0_4Photo', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 178, 20), )

    
    Photo = property(__Photo.value, __Photo.set, None, None)

    
    # Element aggregationType ({urn:xml-gov-au:icsm:egeodesy:0.4}aggregationType) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}NodeType
    
    # Element atSite ({urn:xml-gov-au:icsm:egeodesy:0.4}atSite) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}NodeType
    
    # Element Status ({urn:xml-gov-au:icsm:egeodesy:0.4}Status) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}NodeType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __CORSName.name() : __CORSName,
        __FourCharID.name() : __FourCharID,
        __Location.name() : __Location,
        __LocalIDNumber.name() : __LocalIDNumber,
        __MarkDescription.name() : __MarkDescription,
        __GNSSReceiver.name() : __GNSSReceiver,
        __GNSSAntenna.name() : __GNSSAntenna,
        __AntennaOffset.name() : __AntennaOffset,
        __Photo.name() : __Photo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SiteCertificateType = SiteCertificateType
Namespace.addCategoryObject('typeBinding', 'SiteCertificateType', SiteCertificateType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}PositionTimeSeriesType with content type ELEMENT_ONLY
class PositionTimeSeriesType (DynamicFeatureType):
    """Contains information about a 1d, 2d, or 3d position for a node.  In general a different position record is used for each datum and source.  For example if a 3d adjustment was the source a single 3d position record (e.g. lat, lon, ellipsoid ht) could be used. If there was an AHD height determined this would be a separate 1d position record."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PositionTimeSeriesType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 386, 4)
    _ElementMap = DynamicFeatureType._ElementMap.copy()
    _AttributeMap = DynamicFeatureType._AttributeMap.copy()
    # Base type is DynamicFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element dataSource ({http://www.opengis.net/gml/3.2}dataSource) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element dataSourceReference ({http://www.opengis.net/gml/3.2}dataSourceReference) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSeriesType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSeriesType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSeriesType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Status uses Python identifier Status
    __Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Status'), 'Status', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSeriesType_urnxml_gov_auicsmegeodesy0_4Status', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4), )

    
    Status = property(__Status.value, __Status.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}atNode uses Python identifier atNode
    __atNode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'atNode'), 'atNode', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSeriesType_urnxml_gov_auicsmegeodesy0_4atNode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 393, 20), )

    
    atNode = property(__atNode.value, __atNode.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'source'), 'source', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSeriesType_urnxml_gov_auicsmegeodesy0_4source', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 395, 20), )

    
    source = property(__source.value, __source.set, None, 'Estimation (adjustment) that defined position. As of GeodesyML 0.2 this can include any operation type. Retained (not deprecated) because this element can specify the default source for all elements in the history element')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}history uses Python identifier history_
    __history_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'history'), 'history_', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSeriesType_urnxml_gov_auicsmegeodesy0_4history', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 400, 20), )

    
    history_ = property(__history_.value, __history_.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSeriesType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSeriesType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSeriesType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_PositionTimeSeriesType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __Status.name() : __Status,
        __atNode.name() : __atNode,
        __source.name() : __source,
        __history_.name() : __history_
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.PositionTimeSeriesType = PositionTimeSeriesType
Namespace.addCategoryObject('typeBinding', 'PositionTimeSeriesType', PositionTimeSeriesType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ValueType with content type SIMPLE
class ValueType (pyxb.binding.basis.complexTypeDefinition):
    """Format of values is as per the dictionary identified by the codeSpace attribute. e.g. "sp1v20_positional-uncertainty" """
    _TypeDefinition = ValueTypeUnion
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ValueType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 26, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is ValueTypeUnion
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'codeSpace'), 'codeSpace', '__urnxml_gov_auicsmegeodesy0_4_ValueType_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    __codeSpace._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 32, 16)
    __codeSpace._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 32, 16)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_ValueType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 33, 16)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 33, 16)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_ValueType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 34, 16)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 34, 16)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute confidence uses Python identifier confidence
    __confidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'confidence'), 'confidence', '__urnxml_gov_auicsmegeodesy0_4_ValueType_confidence', _module_typeBindings.ConfidenceTypeEnumeration)
    __confidence._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 35, 16)
    __confidence._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 35, 16)
    
    confidence = property(__confidence.value, __confidence.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace,
        __uomLabels.name() : __uomLabels,
        __axisLabels.name() : __axisLabels,
        __confidence.name() : __confidence
    })
_module_typeBindings.ValueType = ValueType
Namespace.addCategoryObject('typeBinding', 'ValueType', ValueType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SingleValueType with content type SIMPLE
class SingleValueType (pyxb.binding.basis.complexTypeDefinition):
    """Format of a single value is as per the dictionary identified by the codeSpace attribute. e.g. "sp1v20_positional-uncertainty" """
    _TypeDefinition = pyxb.binding.datatypes.double
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SingleValueType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 44, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.double
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'codeSpace'), 'codeSpace', '__urnxml_gov_auicsmegeodesy0_4_SingleValueType_codeSpace', pyxb.binding.datatypes.anyURI)
    __codeSpace._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 50, 16)
    __codeSpace._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 50, 16)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_SingleValueType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 51, 16)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 51, 16)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute confidence uses Python identifier confidence
    __confidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'confidence'), 'confidence', '__urnxml_gov_auicsmegeodesy0_4_SingleValueType_confidence', _module_typeBindings.ConfidenceTypeEnumeration)
    __confidence._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 52, 16)
    __confidence._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 52, 16)
    
    confidence = property(__confidence.value, __confidence.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace,
        __uomLabels.name() : __uomLabels,
        __confidence.name() : __confidence
    })
_module_typeBindings.SingleValueType = SingleValueType
Namespace.addCategoryObject('typeBinding', 'SingleValueType', SingleValueType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GridTransformationType with content type ELEMENT_ONLY
class GridTransformationType (DynamicTransformationType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GridTransformationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GridTransformationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 99, 4)
    _ElementMap = DynamicTransformationType._ElementMap.copy()
    _AttributeMap = DynamicTransformationType._AttributeMap.copy()
    # Base type is DynamicTransformationType
    
    # Element operationVersion ({http://www.opengis.net/gml/3.2}operationVersion) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element sourceCRS ({http://www.opengis.net/gml/3.2}sourceCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element targetCRS ({http://www.opengis.net/gml/3.2}targetCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element parameterValue ({http://www.opengis.net/gml/3.2}parameterValue) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicTransformationType
    
    # Element {http://www.opengis.net/gml/3.2}RectifiedGridCoverage uses Python identifier RectifiedGridCoverage
    __RectifiedGridCoverage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'RectifiedGridCoverage'), 'RectifiedGridCoverage', '__urnxml_gov_auicsmegeodesy0_4_GridTransformationType_httpwww_opengis_netgml3_2RectifiedGridCoverage', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coverage.xsd', 287, 1), )

    
    RectifiedGridCoverage = property(__RectifiedGridCoverage.value, __RectifiedGridCoverage.set, None, 'The gml:RectifiedGridCoverage is a discrete point coverage based on a rectified grid. It is similar to the grid coverage except that the points of the grid are geometrically referenced. The rectified grid coverage has a domain that is a gml:RectifiedGrid geometry.')

    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element sourceEpoch ({urn:xml-gov-au:icsm:egeodesy:0.4}sourceEpoch) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicTransformationType
    
    # Element targetEpoch ({urn:xml-gov-au:icsm:egeodesy:0.4}targetEpoch) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicTransformationType
    
    # Element usesMethod ({urn:xml-gov-au:icsm:egeodesy:0.4}usesMethod) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicTransformationType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicTransformationType
    
    # Attribute id_2 inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralTransformationType
    _ElementMap.update({
        __RectifiedGridCoverage.name() : __RectifiedGridCoverage
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GridTransformationType = GridTransformationType
Namespace.addCategoryObject('typeBinding', 'GridTransformationType', GridTransformationType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}InterpolatedSingleValueType with content type ELEMENT_ONLY
class InterpolatedSingleValueType (AbstractTimeSliceType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}InterpolatedSingleValueType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterpolatedSingleValueType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 158, 4)
    _ElementMap = AbstractTimeSliceType._ElementMap.copy()
    _AttributeMap = AbstractTimeSliceType._AttributeMap.copy()
    # Base type is AbstractTimeSliceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element dataSource ({http://www.opengis.net/gml/3.2}dataSource) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractTimeSliceType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractTimeSliceType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Status uses Python identifier Status
    __Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Status'), 'Status', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedSingleValueType_urnxml_gov_auicsmegeodesy0_4Status', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4), )

    
    Status = property(__Status.value, __Status.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Value'), 'Value', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedSingleValueType_urnxml_gov_auicsmegeodesy0_4Value', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 136, 4), )

    
    Value = property(__Value.value, __Value.set, None, 'Generic property value holder')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'source'), 'source', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedSingleValueType_urnxml_gov_auicsmegeodesy0_4source', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 164, 20), )

    
    source = property(__source.value, __source.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __Status.name() : __Status,
        __Value.name() : __Value,
        __source.name() : __source
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterpolatedSingleValueType = InterpolatedSingleValueType
Namespace.addCategoryObject('typeBinding', 'InterpolatedSingleValueType', InterpolatedSingleValueType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}InterpolatedDynamicValueType with content type ELEMENT_ONLY
class InterpolatedDynamicValueType (DynamicFeatureType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}InterpolatedDynamicValueType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InterpolatedDynamicValueType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 176, 4)
    _ElementMap = DynamicFeatureType._ElementMap.copy()
    _AttributeMap = DynamicFeatureType._AttributeMap.copy()
    # Base type is DynamicFeatureType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element dataSource ({http://www.opengis.net/gml/3.2}dataSource) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element dataSourceReference ({http://www.opengis.net/gml/3.2}dataSourceReference) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Status uses Python identifier Status
    __Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Status'), 'Status', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedDynamicValueType_urnxml_gov_auicsmegeodesy0_4Status', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4), )

    
    Status = property(__Status.value, __Status.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'source'), 'source', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedDynamicValueType_urnxml_gov_auicsmegeodesy0_4source', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 181, 20), )

    
    source = property(__source.value, __source.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}history uses Python identifier history_
    __history_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'history'), 'history_', '__urnxml_gov_auicsmegeodesy0_4_InterpolatedDynamicValueType_urnxml_gov_auicsmegeodesy0_4history', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 182, 20), )

    
    history_ = property(__history_.value, __history_.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __Status.name() : __Status,
        __source.name() : __source,
        __history_.name() : __history_
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InterpolatedDynamicValueType = InterpolatedDynamicValueType
Namespace.addCategoryObject('typeBinding', 'InterpolatedDynamicValueType', InterpolatedDynamicValueType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SiteLogType with content type ELEMENT_ONLY
class SiteLogType (AbstractSiteLogType):
    """
                This derived complexType combines all relevant site metadata schemas to build a complete igs site log schema.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SiteLogType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 33, 4)
    _ElementMap = AbstractSiteLogType._ElementMap.copy()
    _AttributeMap = AbstractSiteLogType._AttributeMap.copy()
    # Base type is AbstractSiteLogType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element atSite ({urn:xml-gov-au:icsm:egeodesy:0.4}atSite) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSiteLogType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}formInformation uses Python identifier formInformation
    __formInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'formInformation'), 'formInformation', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4formInformation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 42, 20), )

    
    formInformation = property(__formInformation.value, __formInformation.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}siteIdentification uses Python identifier siteIdentification
    __siteIdentification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'siteIdentification'), 'siteIdentification', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4siteIdentification', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 43, 20), )

    
    siteIdentification = property(__siteIdentification.value, __siteIdentification.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}siteLocation uses Python identifier siteLocation
    __siteLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'siteLocation'), 'siteLocation', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4siteLocation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 44, 20), )

    
    siteLocation = property(__siteLocation.value, __siteLocation.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}gnssReceiver uses Python identifier gnssReceiver
    __gnssReceiver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'gnssReceiver'), 'gnssReceiver', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4gnssReceiver', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 45, 20), )

    
    gnssReceiver = property(__gnssReceiver.value, __gnssReceiver.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}gnssAntenna uses Python identifier gnssAntenna
    __gnssAntenna = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'gnssAntenna'), 'gnssAntenna', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4gnssAntenna', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 46, 20), )

    
    gnssAntenna = property(__gnssAntenna.value, __gnssAntenna.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}surveyedLocalTie uses Python identifier surveyedLocalTie
    __surveyedLocalTie = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'surveyedLocalTie'), 'surveyedLocalTie', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4surveyedLocalTie', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 47, 20), )

    
    surveyedLocalTie = property(__surveyedLocalTie.value, __surveyedLocalTie.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}frequencyStandard uses Python identifier frequencyStandard
    __frequencyStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'frequencyStandard'), 'frequencyStandard', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4frequencyStandard', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 48, 20), )

    
    frequencyStandard = property(__frequencyStandard.value, __frequencyStandard.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}collocationInformation uses Python identifier collocationInformation
    __collocationInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'collocationInformation'), 'collocationInformation', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4collocationInformation', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 49, 20), )

    
    collocationInformation = property(__collocationInformation.value, __collocationInformation.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}humiditySensor uses Python identifier humiditySensor
    __humiditySensor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'humiditySensor'), 'humiditySensor', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4humiditySensor', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 50, 20), )

    
    humiditySensor = property(__humiditySensor.value, __humiditySensor.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}pressureSensor uses Python identifier pressureSensor
    __pressureSensor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pressureSensor'), 'pressureSensor', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4pressureSensor', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 51, 20), )

    
    pressureSensor = property(__pressureSensor.value, __pressureSensor.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}temperatureSensor uses Python identifier temperatureSensor
    __temperatureSensor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'temperatureSensor'), 'temperatureSensor', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4temperatureSensor', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 52, 20), )

    
    temperatureSensor = property(__temperatureSensor.value, __temperatureSensor.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}waterVaporSensor uses Python identifier waterVaporSensor
    __waterVaporSensor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'waterVaporSensor'), 'waterVaporSensor', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4waterVaporSensor', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 53, 20), )

    
    waterVaporSensor = property(__waterVaporSensor.value, __waterVaporSensor.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}otherInstrumentation uses Python identifier otherInstrumentation
    __otherInstrumentation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'otherInstrumentation'), 'otherInstrumentation', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4otherInstrumentation', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 54, 20), )

    
    otherInstrumentation = property(__otherInstrumentation.value, __otherInstrumentation.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}radioInterference uses Python identifier radioInterference
    __radioInterference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'radioInterference'), 'radioInterference', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4radioInterference', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 55, 20), )

    
    radioInterference = property(__radioInterference.value, __radioInterference.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}multipathSource uses Python identifier multipathSource
    __multipathSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'multipathSource'), 'multipathSource', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4multipathSource', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 56, 20), )

    
    multipathSource = property(__multipathSource.value, __multipathSource.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}signalObstruction uses Python identifier signalObstruction
    __signalObstruction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'signalObstruction'), 'signalObstruction', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4signalObstruction', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 57, 20), )

    
    signalObstruction = property(__signalObstruction.value, __signalObstruction.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}localEpisodicEffect uses Python identifier localEpisodicEffect
    __localEpisodicEffect = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'localEpisodicEffect'), 'localEpisodicEffect', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4localEpisodicEffect', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 58, 20), )

    
    localEpisodicEffect = property(__localEpisodicEffect.value, __localEpisodicEffect.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}siteOwner uses Python identifier siteOwner
    __siteOwner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'siteOwner'), 'siteOwner', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4siteOwner', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 59, 20), )

    
    siteOwner = property(__siteOwner.value, __siteOwner.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}siteContact uses Python identifier siteContact
    __siteContact = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'siteContact'), 'siteContact', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4siteContact', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 60, 20), )

    
    siteContact = property(__siteContact.value, __siteContact.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}siteMetadataCustodian uses Python identifier siteMetadataCustodian
    __siteMetadataCustodian = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'siteMetadataCustodian'), 'siteMetadataCustodian', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4siteMetadataCustodian', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 61, 20), )

    
    siteMetadataCustodian = property(__siteMetadataCustodian.value, __siteMetadataCustodian.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}siteDataCenter uses Python identifier siteDataCenter
    __siteDataCenter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'siteDataCenter'), 'siteDataCenter', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4siteDataCenter', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 62, 20), )

    
    siteDataCenter = property(__siteDataCenter.value, __siteDataCenter.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}siteDataSource uses Python identifier siteDataSource
    __siteDataSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'siteDataSource'), 'siteDataSource', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4siteDataSource', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 63, 20), )

    
    siteDataSource = property(__siteDataSource.value, __siteDataSource.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}moreInformation uses Python identifier moreInformation
    __moreInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'moreInformation'), 'moreInformation', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4moreInformation', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 64, 20), )

    
    moreInformation = property(__moreInformation.value, __moreInformation.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dataStream uses Python identifier dataStream
    __dataStream = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dataStream'), 'dataStream', '__urnxml_gov_auicsmegeodesy0_4_SiteLogType_urnxml_gov_auicsmegeodesy0_4dataStream', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 65, 20), )

    
    dataStream = property(__dataStream.value, __dataStream.set, None, None)

    
    # Attribute srsName inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSiteLogType
    
    # Attribute srsDimension inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSiteLogType
    
    # Attribute axisLabels inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSiteLogType
    
    # Attribute uomLabels inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSiteLogType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __formInformation.name() : __formInformation,
        __siteIdentification.name() : __siteIdentification,
        __siteLocation.name() : __siteLocation,
        __gnssReceiver.name() : __gnssReceiver,
        __gnssAntenna.name() : __gnssAntenna,
        __surveyedLocalTie.name() : __surveyedLocalTie,
        __frequencyStandard.name() : __frequencyStandard,
        __collocationInformation.name() : __collocationInformation,
        __humiditySensor.name() : __humiditySensor,
        __pressureSensor.name() : __pressureSensor,
        __temperatureSensor.name() : __temperatureSensor,
        __waterVaporSensor.name() : __waterVaporSensor,
        __otherInstrumentation.name() : __otherInstrumentation,
        __radioInterference.name() : __radioInterference,
        __multipathSource.name() : __multipathSource,
        __signalObstruction.name() : __signalObstruction,
        __localEpisodicEffect.name() : __localEpisodicEffect,
        __siteOwner.name() : __siteOwner,
        __siteContact.name() : __siteContact,
        __siteMetadataCustodian.name() : __siteMetadataCustodian,
        __siteDataCenter.name() : __siteDataCenter,
        __siteDataSource.name() : __siteDataSource,
        __moreInformation.name() : __moreInformation,
        __dataStream.name() : __dataStream
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SiteLogType = SiteLogType
Namespace.addCategoryObject('typeBinding', 'SiteLogType', SiteLogType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType with content type ELEMENT_ONLY
class BaseSensorEquipmentType (SensorWithCodeType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BaseSensorEquipmentType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 58, 4)
    _ElementMap = SensorWithCodeType._ElementMap.copy()
    _AttributeMap = SensorWithCodeType._AttributeMap.copy()
    # Base type is SensorWithCodeType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element {http://www.opengis.net/gml/3.2}validTime uses Python identifier validTime
    __validTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), 'validTime', '__urnxml_gov_auicsmegeodesy0_4_BaseSensorEquipmentType_httpwww_opengis_netgml3_2validTime', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1), )

    
    validTime = property(__validTime.value, __validTime.set, None, 'gml:validTime is a convenience property element.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}notes uses Python identifier notes
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'notes'), 'notes', '__urnxml_gov_auicsmegeodesy0_4_BaseSensorEquipmentType_urnxml_gov_auicsmegeodesy0_4notes', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12), )

    
    notes = property(__notes.value, __notes.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument uses Python identifier associatedDocument
    __associatedDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), 'associatedDocument', '__urnxml_gov_auicsmegeodesy0_4_BaseSensorEquipmentType_urnxml_gov_auicsmegeodesy0_4associatedDocument', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12), )

    
    associatedDocument = property(__associatedDocument.value, __associatedDocument.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}extension uses Python identifier extension
    __extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extension'), 'extension', '__urnxml_gov_auicsmegeodesy0_4_BaseSensorEquipmentType_urnxml_gov_auicsmegeodesy0_4extension', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12), )

    
    extension = property(__extension.value, __extension.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}manufacturer uses Python identifier manufacturer
    __manufacturer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'manufacturer'), 'manufacturer', '__urnxml_gov_auicsmegeodesy0_4_BaseSensorEquipmentType_urnxml_gov_auicsmegeodesy0_4manufacturer', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 63, 20), )

    
    manufacturer = property(__manufacturer.value, __manufacturer.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}serialNumber uses Python identifier serialNumber
    __serialNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'serialNumber'), 'serialNumber', '__urnxml_gov_auicsmegeodesy0_4_BaseSensorEquipmentType_urnxml_gov_auicsmegeodesy0_4serialNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 64, 20), )

    
    serialNumber = property(__serialNumber.value, __serialNumber.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}heightDiffToAntenna uses Python identifier heightDiffToAntenna
    __heightDiffToAntenna = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'heightDiffToAntenna'), 'heightDiffToAntenna', '__urnxml_gov_auicsmegeodesy0_4_BaseSensorEquipmentType_urnxml_gov_auicsmegeodesy0_4heightDiffToAntenna', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 65, 20), )

    
    heightDiffToAntenna = property(__heightDiffToAntenna.value, __heightDiffToAntenna.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}calibrationDate uses Python identifier calibrationDate
    __calibrationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'calibrationDate'), 'calibrationDate', '__urnxml_gov_auicsmegeodesy0_4_BaseSensorEquipmentType_urnxml_gov_auicsmegeodesy0_4calibrationDate', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 66, 20), )

    
    calibrationDate = property(__calibrationDate.value, __calibrationDate.set, None, None)

    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}SensorType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __validTime.name() : __validTime,
        __notes.name() : __notes,
        __associatedDocument.name() : __associatedDocument,
        __extension.name() : __extension,
        __manufacturer.name() : __manufacturer,
        __serialNumber.name() : __serialNumber,
        __heightDiffToAntenna.name() : __heightDiffToAntenna,
        __calibrationDate.name() : __calibrationDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BaseSensorEquipmentType = BaseSensorEquipmentType
Namespace.addCategoryObject('typeBinding', 'BaseSensorEquipmentType', BaseSensorEquipmentType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GNSSObservationQualityType with content type ELEMENT_ONLY
class GNSSObservationQualityType (AbstractObservationQualityType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GNSSObservationQualityType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GNSSObservationQualityType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 114, 4)
    _ElementMap = AbstractObservationQualityType._ElementMap.copy()
    _AttributeMap = AbstractObservationQualityType._AttributeMap.copy()
    # Base type is AbstractObservationQualityType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element dataSource ({http://www.opengis.net/gml/3.2}dataSource) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element dataSourceReference ({http://www.opengis.net/gml/3.2}dataSourceReference) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {http://www.opengis.net/gml/3.2}DynamicFeatureType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractObservationQualityType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractObservationQualityType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractObservationQualityType
    
    # Element atSite ({urn:xml-gov-au:icsm:egeodesy:0.4}atSite) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractObservationQualityType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractObservationQualityType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}history uses Python identifier history_
    __history_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'history'), 'history_', '__urnxml_gov_auicsmegeodesy0_4_GNSSObservationQualityType_urnxml_gov_auicsmegeodesy0_4history', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 118, 20), )

    
    history_ = property(__history_.value, __history_.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __history_.name() : __history_
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GNSSObservationQualityType = GNSSObservationQualityType
Namespace.addCategoryObject('typeBinding', 'GNSSObservationQualityType', GNSSObservationQualityType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractGNSSAntennaType with content type ELEMENT_ONLY
class AbstractGNSSAntennaType (baseGeodeticEquipmentType):
    """
        Instantiable, non-substituble, global complex type
        representing a GNSS Antenna uniquely-identified
        by a serial number and IGS model code.

        GeodesyML 0.2: removed block="#all" attribute.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractGNSSAntennaType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 90, 4)
    _ElementMap = baseGeodeticEquipmentType._ElementMap.copy()
    _AttributeMap = baseGeodeticEquipmentType._AttributeMap.copy()
    # Base type is baseGeodeticEquipmentType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element manufacturerName ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerName) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerModel ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerModel) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerPartNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerPartNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerDescription ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerDescription) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerSerialNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerSerialNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}igsModelCode uses Python identifier igsModelCode
    __igsModelCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'igsModelCode'), 'igsModelCode', '__urnxml_gov_auicsmegeodesy0_4_AbstractGNSSAntennaType_urnxml_gov_auicsmegeodesy0_4igsModelCode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 103, 20), )

    
    igsModelCode = property(__igsModelCode.value, __igsModelCode.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __igsModelCode.name() : __igsModelCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractGNSSAntennaType = AbstractGNSSAntennaType
Namespace.addCategoryObject('typeBinding', 'AbstractGNSSAntennaType', AbstractGNSSAntennaType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GnssRadomeType with content type ELEMENT_ONLY
class GnssRadomeType (baseGeodeticEquipmentType):
    """
        Instantiable, non-substituble, global complex type
        representing a GNSS Radome uniquely-identified
        by a serial number and IGS model code.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GnssRadomeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 187, 4)
    _ElementMap = baseGeodeticEquipmentType._ElementMap.copy()
    _AttributeMap = baseGeodeticEquipmentType._AttributeMap.copy()
    # Base type is baseGeodeticEquipmentType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element manufacturerName ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerName) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerModel ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerModel) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerPartNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerPartNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerDescription ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerDescription) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerSerialNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerSerialNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}igsModelCode uses Python identifier igsModelCode
    __igsModelCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'igsModelCode'), 'igsModelCode', '__urnxml_gov_auicsmegeodesy0_4_GnssRadomeType_urnxml_gov_auicsmegeodesy0_4igsModelCode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 198, 20), )

    
    igsModelCode = property(__igsModelCode.value, __igsModelCode.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __igsModelCode.name() : __igsModelCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GnssRadomeType = GnssRadomeType
Namespace.addCategoryObject('typeBinding', 'GnssRadomeType', GnssRadomeType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractGNSSReceiverType with content type ELEMENT_ONLY
class AbstractGNSSReceiverType (baseGeodeticEquipmentType):
    """
                Instantiable, non-substituble, global complex type
                representing a GNSS Receiver uniquely-identified
                by a serial number and IGS model code.

                GeodesyML 0.2 changes: removed  block="#all"
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbstractGNSSReceiverType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 238, 4)
    _ElementMap = baseGeodeticEquipmentType._ElementMap.copy()
    _AttributeMap = baseGeodeticEquipmentType._AttributeMap.copy()
    # Base type is baseGeodeticEquipmentType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element manufacturerName ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerName) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerModel ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerModel) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerPartNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerPartNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerDescription ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerDescription) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerSerialNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerSerialNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}igsModelCode uses Python identifier igsModelCode
    __igsModelCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'igsModelCode'), 'igsModelCode', '__urnxml_gov_auicsmegeodesy0_4_AbstractGNSSReceiverType_urnxml_gov_auicsmegeodesy0_4igsModelCode', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 251, 20), )

    
    igsModelCode = property(__igsModelCode.value, __igsModelCode.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __igsModelCode.name() : __igsModelCode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AbstractGNSSReceiverType = AbstractGNSSReceiverType
Namespace.addCategoryObject('typeBinding', 'AbstractGNSSReceiverType', AbstractGNSSReceiverType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}PositionSourceType with content type ELEMENT_ONLY
class PositionSourceType (AbstractPositionSourceType):
    """A position source encapsulates any position estimation operation with source and destination references to operands, resultant parameters and configuration options.
                To encapsulate a geodetic adjustment, the least squares estimation operation would be the referenced along with operand positions and measurements.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PositionSourceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 126, 4)
    _ElementMap = AbstractPositionSourceType._ElementMap.copy()
    _AttributeMap = AbstractPositionSourceType._AttributeMap.copy()
    # Base type is AbstractPositionSourceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runDate ({urn:xml-gov-au:icsm:egeodesy:0.4}runDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runBy ({urn:xml-gov-au:icsm:egeodesy:0.4}runBy) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element operands ({urn:xml-gov-au:icsm:egeodesy:0.4}operands) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element results ({urn:xml-gov-au:icsm:egeodesy:0.4}results) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element operation ({urn:xml-gov-au:icsm:egeodesy:0.4}operation) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractPositionSourceType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}EstimationType uses Python identifier EstimationType
    __EstimationType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EstimationType'), 'EstimationType', '__urnxml_gov_auicsmegeodesy0_4_PositionSourceType_urnxml_gov_auicsmegeodesy0_4EstimationType', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 135, 20), )

    
    EstimationType = property(__EstimationType.value, __EstimationType.set, None, 'For clarity and identification purposes, some vendors may choose to denote the type of position estimation using a code supplied by a third party dictionary. A typical entry might be one of an enumeration of "Geodetic Adjustment", "National Adjustment" and "Campaign Adjustment" or could refer to a SINEX solution produced by Bernese "Daily Bernese SINEX" or "Weekly Bernese SINEX". This type is flexible enough to refer to both the business purpose for the estimation as well as infer the technique used in the estimation process.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__urnxml_gov_auicsmegeodesy0_4_PositionSourceType_urnxml_gov_auicsmegeodesy0_4version', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 140, 20), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}epoch uses Python identifier epoch
    __epoch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'epoch'), 'epoch', '__urnxml_gov_auicsmegeodesy0_4_PositionSourceType_urnxml_gov_auicsmegeodesy0_4epoch', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 141, 20), )

    
    epoch = property(__epoch.value, __epoch.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}configureValue uses Python identifier configureValue
    __configureValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'configureValue'), 'configureValue', '__urnxml_gov_auicsmegeodesy0_4_PositionSourceType_urnxml_gov_auicsmegeodesy0_4configureValue', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 143, 20), )

    
    configureValue = property(__configureValue.value, __configureValue.set, None, 'In a geodetic adjustment a typical configureValue codeSpace would be the confidence interval for the t-test or f-test, or the computed degrees of freedom, number of measurements or positions, or estimator type.')

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}Status uses Python identifier Status
    __Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Status'), 'Status', '__urnxml_gov_auicsmegeodesy0_4_PositionSourceType_urnxml_gov_auicsmegeodesy0_4Status', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4), )

    
    Status = property(__Status.value, __Status.set, None, None)

    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_PositionSourceType_srsName', pyxb.binding.datatypes.anyURI)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_PositionSourceType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_PositionSourceType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_PositionSourceType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __EstimationType.name() : __EstimationType,
        __version.name() : __version,
        __epoch.name() : __epoch,
        __configureValue.name() : __configureValue,
        __Status.name() : __Status
    })
    _AttributeMap.update({
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension,
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels
    })
_module_typeBindings.PositionSourceType = PositionSourceType
Namespace.addCategoryObject('typeBinding', 'PositionSourceType', PositionSourceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}TransformationType with content type ELEMENT_ONLY
class TransformationType (AbstractPositionSourceType):
    """A Transformation encapsulates the coordinate operation with source and destination references to operand and result data."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TransformationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 297, 4)
    _ElementMap = AbstractPositionSourceType._ElementMap.copy()
    _AttributeMap = AbstractPositionSourceType._AttributeMap.copy()
    # Base type is AbstractPositionSourceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runDate ({urn:xml-gov-au:icsm:egeodesy:0.4}runDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runBy ({urn:xml-gov-au:icsm:egeodesy:0.4}runBy) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element operands ({urn:xml-gov-au:icsm:egeodesy:0.4}operands) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element results ({urn:xml-gov-au:icsm:egeodesy:0.4}results) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element operation ({urn:xml-gov-au:icsm:egeodesy:0.4}operation) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractPositionSourceType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__urnxml_gov_auicsmegeodesy0_4_TransformationType_urnxml_gov_auicsmegeodesy0_4version', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 304, 20), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}epoch uses Python identifier epoch
    __epoch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'epoch'), 'epoch', '__urnxml_gov_auicsmegeodesy0_4_TransformationType_urnxml_gov_auicsmegeodesy0_4epoch', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 305, 20), )

    
    epoch = property(__epoch.value, __epoch.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'status'), 'status', '__urnxml_gov_auicsmegeodesy0_4_TransformationType_urnxml_gov_auicsmegeodesy0_4status', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 306, 20), )

    
    status = property(__status.value, __status.set, None, None)

    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_TransformationType_srsName', pyxb.binding.datatypes.anyURI)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_TransformationType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_TransformationType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_TransformationType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __version.name() : __version,
        __epoch.name() : __epoch,
        __status.name() : __status
    })
    _AttributeMap.update({
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension,
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels
    })
_module_typeBindings.TransformationType = TransformationType
Namespace.addCategoryObject('typeBinding', 'TransformationType', TransformationType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GNSSBaselineReductionType with content type ELEMENT_ONLY
class GNSSBaselineReductionType (AbstractMeasurementSourceType):
    """A GNSS baseline reduction source encapsulates the baseline reductuin operation with operand and result properties and configuration values."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GNSSBaselineReductionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 459, 4)
    _ElementMap = AbstractMeasurementSourceType._ElementMap.copy()
    _AttributeMap = AbstractMeasurementSourceType._AttributeMap.copy()
    # Base type is AbstractMeasurementSourceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runDate ({urn:xml-gov-au:icsm:egeodesy:0.4}runDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runBy ({urn:xml-gov-au:icsm:egeodesy:0.4}runBy) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element operands ({urn:xml-gov-au:icsm:egeodesy:0.4}operands) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element results ({urn:xml-gov-au:icsm:egeodesy:0.4}results) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element operation ({urn:xml-gov-au:icsm:egeodesy:0.4}operation) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementSourceType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineReductionType_urnxml_gov_auicsmegeodesy0_4version', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 466, 20), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'status'), 'status', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineReductionType_urnxml_gov_auicsmegeodesy0_4status', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 467, 20), )

    
    status = property(__status.value, __status.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}configureValue uses Python identifier configureValue
    __configureValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'configureValue'), 'configureValue', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineReductionType_urnxml_gov_auicsmegeodesy0_4configureValue', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 468, 20), )

    
    configureValue = property(__configureValue.value, __configureValue.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineReductionType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineReductionType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineReductionType_srsName', pyxb.binding.datatypes.anyURI, required=True)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 44, 8)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_GNSSBaselineReductionType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 45, 8)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    _ElementMap.update({
        __version.name() : __version,
        __status.name() : __status,
        __configureValue.name() : __configureValue
    })
    _AttributeMap.update({
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels,
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.GNSSBaselineReductionType = GNSSBaselineReductionType
Namespace.addCategoryObject('typeBinding', 'GNSSBaselineReductionType', GNSSBaselineReductionType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}ReferenceFrameSourceType with content type ELEMENT_ONLY
class ReferenceFrameSourceType (AbstractDefinitionSourceType):
    """A Reference Frame Source encapsulates the inversion operation with position operands and a 14 parameter transform as a result."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReferenceFrameSourceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 550, 4)
    _ElementMap = AbstractDefinitionSourceType._ElementMap.copy()
    _AttributeMap = AbstractDefinitionSourceType._AttributeMap.copy()
    # Base type is AbstractDefinitionSourceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runDate ({urn:xml-gov-au:icsm:egeodesy:0.4}runDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element runBy ({urn:xml-gov-au:icsm:egeodesy:0.4}runBy) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element operands ({urn:xml-gov-au:icsm:egeodesy:0.4}operands) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element results ({urn:xml-gov-au:icsm:egeodesy:0.4}results) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractSourceType
    
    # Element AbstractDefinitionOperation ({urn:xml-gov-au:icsm:egeodesy:0.4}AbstractDefinitionOperation) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractDefinitionSourceType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_ReferenceFrameSourceType_srsName', pyxb.binding.datatypes.anyURI)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 37, 2)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_ReferenceFrameSourceType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 38, 2)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_ReferenceFrameSourceType_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 47, 2)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_ReferenceFrameSourceType_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 48, 2)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension,
        __axisLabels.name() : __axisLabels,
        __uomLabels.name() : __uomLabels
    })
_module_typeBindings.ReferenceFrameSourceType = ReferenceFrameSourceType
Namespace.addCategoryObject('typeBinding', 'ReferenceFrameSourceType', ReferenceFrameSourceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}EllipsoidArcDistanceType with content type ELEMENT_ONLY
class EllipsoidArcDistanceType (EllipsoidChordDistanceType):
    """Ellipsoid Arc Distances store the same data structure as Ellipsoid Chord Distances and differ only in implementation, thus it is safe to use an alias."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EllipsoidArcDistanceType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 222, 4)
    _ElementMap = EllipsoidChordDistanceType._ElementMap.copy()
    _AttributeMap = EllipsoidChordDistanceType._AttributeMap.copy()
    # Base type is EllipsoidChordDistanceType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element distance ({urn:xml-gov-au:icsm:egeodesy:0.4}distance) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}EllipsoidChordDistanceType
    
    # Attribute axisLabels inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}EllipsoidChordDistanceType
    
    # Attribute uomLabels inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}EllipsoidChordDistanceType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}EllipsoidChordDistanceType
    
    # Attribute srsDimension inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}EllipsoidChordDistanceType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.EllipsoidArcDistanceType = EllipsoidArcDistanceType
Namespace.addCategoryObject('typeBinding', 'EllipsoidArcDistanceType', EllipsoidArcDistanceType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GeodeticLatitudeType with content type ELEMENT_ONLY
class GeodeticLatitudeType (AstronomicLatitudeType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GeodeticLatitudeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GeodeticLatitudeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 336, 4)
    _ElementMap = AstronomicLatitudeType._ElementMap.copy()
    _AttributeMap = AstronomicLatitudeType._AttributeMap.copy()
    # Base type is AstronomicLatitudeType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element latitude ({urn:xml-gov-au:icsm:egeodesy:0.4}latitude) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLatitudeType
    
    # Attribute axisLabels inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLatitudeType
    
    # Attribute uomLabels inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLatitudeType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLatitudeType
    
    # Attribute srsDimension inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLatitudeType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GeodeticLatitudeType = GeodeticLatitudeType
Namespace.addCategoryObject('typeBinding', 'GeodeticLatitudeType', GeodeticLatitudeType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GeodeticLongitudeType with content type ELEMENT_ONLY
class GeodeticLongitudeType (AstronomicLongitudeType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GeodeticLongitudeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GeodeticLongitudeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 344, 4)
    _ElementMap = AstronomicLongitudeType._ElementMap.copy()
    _AttributeMap = AstronomicLongitudeType._AttributeMap.copy()
    # Base type is AstronomicLongitudeType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element aprioriScalar ({urn:xml-gov-au:icsm:egeodesy:0.4}aprioriScalar) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element fromProject ({urn:xml-gov-au:icsm:egeodesy:0.4}fromProject) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMeasurementType
    
    # Element longitude ({urn:xml-gov-au:icsm:egeodesy:0.4}longitude) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLongitudeType
    
    # Attribute axisLabels inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLongitudeType
    
    # Attribute uomLabels inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLongitudeType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Attribute srsName inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLongitudeType
    
    # Attribute srsDimension inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AstronomicLongitudeType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GeodeticLongitudeType = GeodeticLongitudeType
Namespace.addCategoryObject('typeBinding', 'GeodeticLongitudeType', GeodeticLongitudeType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}SupplementaryMarkType with content type ELEMENT_ONLY
class SupplementaryMarkType (MonumentType):
    """Contains information about supplementary Sites at a node.  For example recovery marks, beacons, etc.  These are typically Sites that do not have a unique identifier within the authority."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SupplementaryMarkType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 107, 4)
    _ElementMap = MonumentType._ElementMap.copy()
    _AttributeMap = MonumentType._AttributeMap.copy()
    # Base type is MonumentType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element location ({http://www.opengis.net/gml/3.2}location) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element boundedBy ({http://www.opengis.net/gml/3.2}boundedBy) inherited from {http://www.opengis.net/gml/3.2}AbstractFeatureType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element installedBy ({urn:xml-gov-au:icsm:egeodesy:0.4}installedBy) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element installedDate ({urn:xml-gov-au:icsm:egeodesy:0.4}installedDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Element inscription ({urn:xml-gov-au:icsm:egeodesy:0.4}inscription) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentType
    
    # Element monumentDescription ({urn:xml-gov-au:icsm:egeodesy:0.4}monumentDescription) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentType
    
    # Element height ({urn:xml-gov-au:icsm:egeodesy:0.4}height) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentType
    
    # Element foundation ({urn:xml-gov-au:icsm:egeodesy:0.4}foundation) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentType
    
    # Element foundationDepth ({urn:xml-gov-au:icsm:egeodesy:0.4}foundationDepth) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentType
    
    # Element markerDescription ({urn:xml-gov-au:icsm:egeodesy:0.4}markerDescription) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentType
    
    # Element geologicCharacteristic ({urn:xml-gov-au:icsm:egeodesy:0.4}geologicCharacteristic) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentType
    
    # Element bedrockType ({urn:xml-gov-au:icsm:egeodesy:0.4}bedrockType) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentType
    
    # Element bedrockCondition ({urn:xml-gov-au:icsm:egeodesy:0.4}bedrockCondition) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentType
    
    # Element fractureSpacing ({urn:xml-gov-au:icsm:egeodesy:0.4}fractureSpacing) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentType
    
    # Element faultZonesNearby ({urn:xml-gov-au:icsm:egeodesy:0.4}faultZonesNearby) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentType
    
    # Element distanceActivity ({urn:xml-gov-au:icsm:egeodesy:0.4}distanceActivity) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}MonumentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}relativeOffset uses Python identifier relativeOffset
    __relativeOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'relativeOffset'), 'relativeOffset', '__urnxml_gov_auicsmegeodesy0_4_SupplementaryMarkType_urnxml_gov_auicsmegeodesy0_4relativeOffset', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 114, 20), )

    
    relativeOffset = property(__relativeOffset.value, __relativeOffset.set, None, None)

    
    # Element Status ({urn:xml-gov-au:icsm:egeodesy:0.4}Status) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractMonumentType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __relativeOffset.name() : __relativeOffset
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SupplementaryMarkType = SupplementaryMarkType
Namespace.addCategoryObject('typeBinding', 'SupplementaryMarkType', SupplementaryMarkType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}RelativeOffsetType with content type SIMPLE
class RelativeOffsetType (ValueType):
    """An offset of a supplementary mark to a Site. The type field would refer to the measurement type (usually bearing or distance) and the value is one or more doubles."""
    _TypeDefinition = ValueTypeUnion
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RelativeOffsetType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 184, 4)
    _ElementMap = ValueType._ElementMap.copy()
    _AttributeMap = ValueType._AttributeMap.copy()
    # Base type is ValueType
    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_RelativeOffsetType_srsName', pyxb.binding.datatypes.anyURI)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 190, 16)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 190, 16)
    
    srsName = property(__srsName.value, __srsName.set, None, None)

    
    # Attribute srsDimension uses Python identifier srsDimension
    __srsDimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsDimension'), 'srsDimension', '__urnxml_gov_auicsmegeodesy0_4_RelativeOffsetType_srsDimension', pyxb.binding.datatypes.positiveInteger)
    __srsDimension._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 191, 16)
    __srsDimension._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 191, 16)
    
    srsDimension = property(__srsDimension.value, __srsDimension.set, None, None)

    
    # Attribute codeSpace inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}ValueType
    
    # Attribute uomLabels inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}ValueType
    
    # Attribute axisLabels inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}ValueType
    
    # Attribute confidence inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}ValueType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __srsName.name() : __srsName,
        __srsDimension.name() : __srsDimension
    })
_module_typeBindings.RelativeOffsetType = RelativeOffsetType
Namespace.addCategoryObject('typeBinding', 'RelativeOffsetType', RelativeOffsetType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}VCV3x3Type with content type SIMPLE
class VCV3x3Type (pyxb.binding.basis.complexTypeDefinition):
    """A type for 3x3 VCV described as a list of double values."""
    _TypeDefinition = ValueTypes6
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VCV3x3Type')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 72, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is ValueTypes6
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'codeSpace'), 'codeSpace', '__urnxml_gov_auicsmegeodesy0_4_VCV3x3Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    __codeSpace._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 78, 16)
    __codeSpace._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 78, 16)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)

    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_VCV3x3Type_srsName', pyxb.binding.datatypes.anyURI)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 79, 16)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 79, 16)
    
    srsName = property(__srsName.value, __srsName.set, None, 'Often the reference frame and coordinate system of the quality matrix matches that of the coordinates, but sometimes these figures can be provided in a difference coordinate system. For example, coordinates could be in geocentric cartesian coordinates, but the quality could be in topocentric (ENU) cartesian coordinates which thurs requires rotation and translation before propagating variance.')

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_VCV3x3Type_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 84, 16)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 84, 16)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_VCV3x3Type_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 85, 16)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 85, 16)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute confidence uses Python identifier confidence
    __confidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'confidence'), 'confidence', '__urnxml_gov_auicsmegeodesy0_4_VCV3x3Type_confidence', _module_typeBindings.ConfidenceTypeEnumeration)
    __confidence._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 86, 16)
    __confidence._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 86, 16)
    
    confidence = property(__confidence.value, __confidence.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace,
        __srsName.name() : __srsName,
        __uomLabels.name() : __uomLabels,
        __axisLabels.name() : __axisLabels,
        __confidence.name() : __confidence
    })
_module_typeBindings.VCV3x3Type = VCV3x3Type
Namespace.addCategoryObject('typeBinding', 'VCV3x3Type', VCV3x3Type)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}VCV2x2Type with content type SIMPLE
class VCV2x2Type (pyxb.binding.basis.complexTypeDefinition):
    """A type for 2x2 VCV described as a list of double values."""
    _TypeDefinition = ValueTypes3
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VCV2x2Type')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 104, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is ValueTypes3
    
    # Attribute codeSpace uses Python identifier codeSpace
    __codeSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'codeSpace'), 'codeSpace', '__urnxml_gov_auicsmegeodesy0_4_VCV2x2Type_codeSpace', pyxb.binding.datatypes.anyURI, required=True)
    __codeSpace._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 110, 16)
    __codeSpace._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 110, 16)
    
    codeSpace = property(__codeSpace.value, __codeSpace.set, None, None)

    
    # Attribute srsName uses Python identifier srsName
    __srsName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'srsName'), 'srsName', '__urnxml_gov_auicsmegeodesy0_4_VCV2x2Type_srsName', pyxb.binding.datatypes.anyURI)
    __srsName._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 111, 16)
    __srsName._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 111, 16)
    
    srsName = property(__srsName.value, __srsName.set, None, 'Often the reference frame and coordinate system of the quality matrix matches that of the coordinates, but sometimes these figures can be provided in a difference coordinate system. For example, coordinates could be in geocentric cartesian coordinates, but the quality could be in topocentric (ENU) cartesian coordinates which thurs requires rotation and translation before propagating variance.')

    
    # Attribute uomLabels uses Python identifier uomLabels
    __uomLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'uomLabels'), 'uomLabels', '__urnxml_gov_auicsmegeodesy0_4_VCV2x2Type_uomLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __uomLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 116, 16)
    __uomLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 116, 16)
    
    uomLabels = property(__uomLabels.value, __uomLabels.set, None, None)

    
    # Attribute axisLabels uses Python identifier axisLabels
    __axisLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'axisLabels'), 'axisLabels', '__urnxml_gov_auicsmegeodesy0_4_VCV2x2Type_axisLabels', pyxb.bundles.opengis.gml_3_2.NCNameList)
    __axisLabels._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 117, 16)
    __axisLabels._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 117, 16)
    
    axisLabels = property(__axisLabels.value, __axisLabels.set, None, None)

    
    # Attribute confidence uses Python identifier confidence
    __confidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'confidence'), 'confidence', '__urnxml_gov_auicsmegeodesy0_4_VCV2x2Type_confidence', _module_typeBindings.ConfidenceTypeEnumeration)
    __confidence._DeclarationLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 118, 16)
    __confidence._UseLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 118, 16)
    
    confidence = property(__confidence.value, __confidence.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __codeSpace.name() : __codeSpace,
        __srsName.name() : __srsName,
        __uomLabels.name() : __uomLabels,
        __axisLabels.name() : __axisLabels,
        __confidence.name() : __confidence
    })
_module_typeBindings.VCV2x2Type = VCV2x2Type
Namespace.addCategoryObject('typeBinding', 'VCV2x2Type', VCV2x2Type)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DeformationGridTransformationType with content type ELEMENT_ONLY
class DeformationGridTransformationType (GridTransformationType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}DeformationGridTransformationType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DeformationGridTransformationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 115, 4)
    _ElementMap = GridTransformationType._ElementMap.copy()
    _AttributeMap = GridTransformationType._AttributeMap.copy()
    # Base type is GridTransformationType
    
    # Element operationVersion ({http://www.opengis.net/gml/3.2}operationVersion) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element coordinateOperationAccuracy ({http://www.opengis.net/gml/3.2}coordinateOperationAccuracy) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element sourceCRS ({http://www.opengis.net/gml/3.2}sourceCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element targetCRS ({http://www.opengis.net/gml/3.2}targetCRS) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element parameterValue ({http://www.opengis.net/gml/3.2}parameterValue) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicTransformationType
    
    # Element RectifiedGridCoverage ({http://www.opengis.net/gml/3.2}RectifiedGridCoverage) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}GridTransformationType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element remarks ({http://www.opengis.net/gml/3.2}remarks) inherited from {http://www.opengis.net/gml/3.2}DefinitionType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element domainOfValidity ({http://www.opengis.net/gml/3.2}domainOfValidity) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element scope ({http://www.opengis.net/gml/3.2}scope) inherited from {http://www.opengis.net/gml/3.2}AbstractCoordinateOperationType
    
    # Element sourceEpoch ({urn:xml-gov-au:icsm:egeodesy:0.4}sourceEpoch) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicTransformationType
    
    # Element targetEpoch ({urn:xml-gov-au:icsm:egeodesy:0.4}targetEpoch) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicTransformationType
    
    # Element usesMethod ({urn:xml-gov-au:icsm:egeodesy:0.4}usesMethod) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicTransformationType
    
    # Element source ({urn:xml-gov-au:icsm:egeodesy:0.4}source) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}DynamicTransformationType
    
    # Attribute id_2 inherited from {http://www.opengis.net/gml/3.2}AbstractGeneralTransformationType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DeformationGridTransformationType = DeformationGridTransformationType
Namespace.addCategoryObject('typeBinding', 'DeformationGridTransformationType', DeformationGridTransformationType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GnssAntennaType with content type ELEMENT_ONLY
class GnssAntennaType (AbstractGNSSAntennaType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GnssAntennaType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GnssAntennaType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 151, 4)
    _ElementMap = AbstractGNSSAntennaType._ElementMap.copy()
    _AttributeMap = AbstractGNSSAntennaType._AttributeMap.copy()
    # Base type is AbstractGNSSAntennaType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}antennaReferencePoint uses Python identifier antennaReferencePoint
    __antennaReferencePoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'antennaReferencePoint'), 'antennaReferencePoint', '__urnxml_gov_auicsmegeodesy0_4_GnssAntennaType_urnxml_gov_auicsmegeodesy0_4antennaReferencePoint', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 156, 20), )

    
    antennaReferencePoint = property(__antennaReferencePoint.value, __antennaReferencePoint.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}marker-arpUpEcc. uses Python identifier marker_arpUpEcc
    __marker_arpUpEcc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'marker-arpUpEcc.'), 'marker_arpUpEcc', '__urnxml_gov_auicsmegeodesy0_4_GnssAntennaType_urnxml_gov_auicsmegeodesy0_4marker_arpUpEcc', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 157, 20), )

    
    marker_arpUpEcc = property(__marker_arpUpEcc.value, __marker_arpUpEcc.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}marker-arpNorthEcc. uses Python identifier marker_arpNorthEcc
    __marker_arpNorthEcc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'marker-arpNorthEcc.'), 'marker_arpNorthEcc', '__urnxml_gov_auicsmegeodesy0_4_GnssAntennaType_urnxml_gov_auicsmegeodesy0_4marker_arpNorthEcc', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 158, 20), )

    
    marker_arpNorthEcc = property(__marker_arpNorthEcc.value, __marker_arpNorthEcc.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}marker-arpEastEcc. uses Python identifier marker_arpEastEcc
    __marker_arpEastEcc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'marker-arpEastEcc.'), 'marker_arpEastEcc', '__urnxml_gov_auicsmegeodesy0_4_GnssAntennaType_urnxml_gov_auicsmegeodesy0_4marker_arpEastEcc', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 159, 20), )

    
    marker_arpEastEcc = property(__marker_arpEastEcc.value, __marker_arpEastEcc.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}alignmentFromTrueNorth uses Python identifier alignmentFromTrueNorth
    __alignmentFromTrueNorth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'alignmentFromTrueNorth'), 'alignmentFromTrueNorth', '__urnxml_gov_auicsmegeodesy0_4_GnssAntennaType_urnxml_gov_auicsmegeodesy0_4alignmentFromTrueNorth', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 160, 20), )

    
    alignmentFromTrueNorth = property(__alignmentFromTrueNorth.value, __alignmentFromTrueNorth.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}antennaRadomeType uses Python identifier antennaRadomeType
    __antennaRadomeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'antennaRadomeType'), 'antennaRadomeType', '__urnxml_gov_auicsmegeodesy0_4_GnssAntennaType_urnxml_gov_auicsmegeodesy0_4antennaRadomeType', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 161, 20), )

    
    antennaRadomeType = property(__antennaRadomeType.value, __antennaRadomeType.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}radomeSerialNumber uses Python identifier radomeSerialNumber
    __radomeSerialNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'radomeSerialNumber'), 'radomeSerialNumber', '__urnxml_gov_auicsmegeodesy0_4_GnssAntennaType_urnxml_gov_auicsmegeodesy0_4radomeSerialNumber', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 162, 20), )

    
    radomeSerialNumber = property(__radomeSerialNumber.value, __radomeSerialNumber.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}antennaCableType uses Python identifier antennaCableType
    __antennaCableType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'antennaCableType'), 'antennaCableType', '__urnxml_gov_auicsmegeodesy0_4_GnssAntennaType_urnxml_gov_auicsmegeodesy0_4antennaCableType', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 163, 20), )

    
    antennaCableType = property(__antennaCableType.value, __antennaCableType.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}antennaCableLength uses Python identifier antennaCableLength
    __antennaCableLength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'antennaCableLength'), 'antennaCableLength', '__urnxml_gov_auicsmegeodesy0_4_GnssAntennaType_urnxml_gov_auicsmegeodesy0_4antennaCableLength', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 164, 20), )

    
    antennaCableLength = property(__antennaCableLength.value, __antennaCableLength.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInstalled uses Python identifier dateInstalled
    __dateInstalled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInstalled'), 'dateInstalled', '__urnxml_gov_auicsmegeodesy0_4_GnssAntennaType_urnxml_gov_auicsmegeodesy0_4dateInstalled', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 165, 20), )

    
    dateInstalled = property(__dateInstalled.value, __dateInstalled.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateRemoved uses Python identifier dateRemoved
    __dateRemoved = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateRemoved'), 'dateRemoved', '__urnxml_gov_auicsmegeodesy0_4_GnssAntennaType_urnxml_gov_auicsmegeodesy0_4dateRemoved', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 166, 20), )

    
    dateRemoved = property(__dateRemoved.value, __dateRemoved.set, None, None)

    
    # Element manufacturerName ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerName) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerModel ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerModel) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerPartNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerPartNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerDescription ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerDescription) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerSerialNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerSerialNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element igsModelCode ({urn:xml-gov-au:icsm:egeodesy:0.4}igsModelCode) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractGNSSAntennaType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __antennaReferencePoint.name() : __antennaReferencePoint,
        __marker_arpUpEcc.name() : __marker_arpUpEcc,
        __marker_arpNorthEcc.name() : __marker_arpNorthEcc,
        __marker_arpEastEcc.name() : __marker_arpEastEcc,
        __alignmentFromTrueNorth.name() : __alignmentFromTrueNorth,
        __antennaRadomeType.name() : __antennaRadomeType,
        __radomeSerialNumber.name() : __radomeSerialNumber,
        __antennaCableType.name() : __antennaCableType,
        __antennaCableLength.name() : __antennaCableLength,
        __dateInstalled.name() : __dateInstalled,
        __dateRemoved.name() : __dateRemoved
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GnssAntennaType = GnssAntennaType
Namespace.addCategoryObject('typeBinding', 'GnssAntennaType', GnssAntennaType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}HumiditySensorType with content type ELEMENT_ONLY
class HumiditySensorType (BaseSensorEquipmentType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}HumiditySensorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HumiditySensorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 197, 4)
    _ElementMap = BaseSensorEquipmentType._ElementMap.copy()
    _AttributeMap = BaseSensorEquipmentType._AttributeMap.copy()
    # Base type is BaseSensorEquipmentType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element manufacturer ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturer) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element serialNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}serialNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element heightDiffToAntenna ({urn:xml-gov-au:icsm:egeodesy:0.4}heightDiffToAntenna) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element calibrationDate ({urn:xml-gov-au:icsm:egeodesy:0.4}calibrationDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dataSamplingInterval uses Python identifier dataSamplingInterval
    __dataSamplingInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dataSamplingInterval'), 'dataSamplingInterval', '__urnxml_gov_auicsmegeodesy0_4_HumiditySensorType_urnxml_gov_auicsmegeodesy0_4dataSamplingInterval', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 201, 20), )

    
    dataSamplingInterval = property(__dataSamplingInterval.value, __dataSamplingInterval.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}accuracy-percentRelativeHumidity uses Python identifier accuracy_percentRelativeHumidity
    __accuracy_percentRelativeHumidity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accuracy-percentRelativeHumidity'), 'accuracy_percentRelativeHumidity', '__urnxml_gov_auicsmegeodesy0_4_HumiditySensorType_urnxml_gov_auicsmegeodesy0_4accuracy_percentRelativeHumidity', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 202, 20), )

    
    accuracy_percentRelativeHumidity = property(__accuracy_percentRelativeHumidity.value, __accuracy_percentRelativeHumidity.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}aspiration uses Python identifier aspiration
    __aspiration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'aspiration'), 'aspiration', '__urnxml_gov_auicsmegeodesy0_4_HumiditySensorType_urnxml_gov_auicsmegeodesy0_4aspiration', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 203, 20), )

    
    aspiration = property(__aspiration.value, __aspiration.set, None, None)

    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}SensorType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __dataSamplingInterval.name() : __dataSamplingInterval,
        __accuracy_percentRelativeHumidity.name() : __accuracy_percentRelativeHumidity,
        __aspiration.name() : __aspiration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.HumiditySensorType = HumiditySensorType
Namespace.addCategoryObject('typeBinding', 'HumiditySensorType', HumiditySensorType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}PressureSensorType with content type ELEMENT_ONLY
class PressureSensorType (BaseSensorEquipmentType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}PressureSensorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PressureSensorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 218, 4)
    _ElementMap = BaseSensorEquipmentType._ElementMap.copy()
    _AttributeMap = BaseSensorEquipmentType._AttributeMap.copy()
    # Base type is BaseSensorEquipmentType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element manufacturer ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturer) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element serialNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}serialNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element heightDiffToAntenna ({urn:xml-gov-au:icsm:egeodesy:0.4}heightDiffToAntenna) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element calibrationDate ({urn:xml-gov-au:icsm:egeodesy:0.4}calibrationDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dataSamplingInterval uses Python identifier dataSamplingInterval
    __dataSamplingInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dataSamplingInterval'), 'dataSamplingInterval', '__urnxml_gov_auicsmegeodesy0_4_PressureSensorType_urnxml_gov_auicsmegeodesy0_4dataSamplingInterval', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 222, 20), )

    
    dataSamplingInterval = property(__dataSamplingInterval.value, __dataSamplingInterval.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}accuracy-hPa uses Python identifier accuracy_hPa
    __accuracy_hPa = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accuracy-hPa'), 'accuracy_hPa', '__urnxml_gov_auicsmegeodesy0_4_PressureSensorType_urnxml_gov_auicsmegeodesy0_4accuracy_hPa', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 223, 20), )

    
    accuracy_hPa = property(__accuracy_hPa.value, __accuracy_hPa.set, None, None)

    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}SensorType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __dataSamplingInterval.name() : __dataSamplingInterval,
        __accuracy_hPa.name() : __accuracy_hPa
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PressureSensorType = PressureSensorType
Namespace.addCategoryObject('typeBinding', 'PressureSensorType', PressureSensorType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GnssReceiverType with content type ELEMENT_ONLY
class GnssReceiverType (AbstractGNSSReceiverType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}GnssReceiverType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GnssReceiverType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 228, 4)
    _ElementMap = AbstractGNSSReceiverType._ElementMap.copy()
    _AttributeMap = AbstractGNSSReceiverType._AttributeMap.copy()
    # Base type is AbstractGNSSReceiverType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}InstrumentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}satelliteSystem uses Python identifier satelliteSystem
    __satelliteSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'satelliteSystem'), 'satelliteSystem', '__urnxml_gov_auicsmegeodesy0_4_GnssReceiverType_urnxml_gov_auicsmegeodesy0_4satelliteSystem', True, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 233, 20), )

    
    satelliteSystem = property(__satelliteSystem.value, __satelliteSystem.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}firmwareVersion uses Python identifier firmwareVersion
    __firmwareVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'firmwareVersion'), 'firmwareVersion', '__urnxml_gov_auicsmegeodesy0_4_GnssReceiverType_urnxml_gov_auicsmegeodesy0_4firmwareVersion', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 234, 20), )

    
    firmwareVersion = property(__firmwareVersion.value, __firmwareVersion.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}elevationCutoffSetting uses Python identifier elevationCutoffSetting
    __elevationCutoffSetting = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'elevationCutoffSetting'), 'elevationCutoffSetting', '__urnxml_gov_auicsmegeodesy0_4_GnssReceiverType_urnxml_gov_auicsmegeodesy0_4elevationCutoffSetting', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 235, 20), )

    
    elevationCutoffSetting = property(__elevationCutoffSetting.value, __elevationCutoffSetting.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateInstalled uses Python identifier dateInstalled
    __dateInstalled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateInstalled'), 'dateInstalled', '__urnxml_gov_auicsmegeodesy0_4_GnssReceiverType_urnxml_gov_auicsmegeodesy0_4dateInstalled', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 236, 20), )

    
    dateInstalled = property(__dateInstalled.value, __dateInstalled.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dateRemoved uses Python identifier dateRemoved
    __dateRemoved = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dateRemoved'), 'dateRemoved', '__urnxml_gov_auicsmegeodesy0_4_GnssReceiverType_urnxml_gov_auicsmegeodesy0_4dateRemoved', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 237, 20), )

    
    dateRemoved = property(__dateRemoved.value, __dateRemoved.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}temperatureStabilization uses Python identifier temperatureStabilization
    __temperatureStabilization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'temperatureStabilization'), 'temperatureStabilization', '__urnxml_gov_auicsmegeodesy0_4_GnssReceiverType_urnxml_gov_auicsmegeodesy0_4temperatureStabilization', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 238, 20), )

    
    temperatureStabilization = property(__temperatureStabilization.value, __temperatureStabilization.set, None, None)

    
    # Element manufacturerName ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerName) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerModel ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerModel) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerPartNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerPartNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerDescription ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerDescription) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element manufacturerSerialNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturerSerialNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}baseGeodeticEquipmentType
    
    # Element igsModelCode ({urn:xml-gov-au:icsm:egeodesy:0.4}igsModelCode) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}AbstractGNSSReceiverType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __satelliteSystem.name() : __satelliteSystem,
        __firmwareVersion.name() : __firmwareVersion,
        __elevationCutoffSetting.name() : __elevationCutoffSetting,
        __dateInstalled.name() : __dateInstalled,
        __dateRemoved.name() : __dateRemoved,
        __temperatureStabilization.name() : __temperatureStabilization
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GnssReceiverType = GnssReceiverType
Namespace.addCategoryObject('typeBinding', 'GnssReceiverType', GnssReceiverType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}TemperatureSensorType with content type ELEMENT_ONLY
class TemperatureSensorType (BaseSensorEquipmentType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}TemperatureSensorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureSensorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 280, 4)
    _ElementMap = BaseSensorEquipmentType._ElementMap.copy()
    _AttributeMap = BaseSensorEquipmentType._AttributeMap.copy()
    # Base type is BaseSensorEquipmentType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element manufacturer ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturer) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element serialNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}serialNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element heightDiffToAntenna ({urn:xml-gov-au:icsm:egeodesy:0.4}heightDiffToAntenna) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element calibrationDate ({urn:xml-gov-au:icsm:egeodesy:0.4}calibrationDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}dataSamplingInterval uses Python identifier dataSamplingInterval
    __dataSamplingInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dataSamplingInterval'), 'dataSamplingInterval', '__urnxml_gov_auicsmegeodesy0_4_TemperatureSensorType_urnxml_gov_auicsmegeodesy0_4dataSamplingInterval', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 284, 20), )

    
    dataSamplingInterval = property(__dataSamplingInterval.value, __dataSamplingInterval.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}accuracy-degreesCelcius uses Python identifier accuracy_degreesCelcius
    __accuracy_degreesCelcius = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accuracy-degreesCelcius'), 'accuracy_degreesCelcius', '__urnxml_gov_auicsmegeodesy0_4_TemperatureSensorType_urnxml_gov_auicsmegeodesy0_4accuracy_degreesCelcius', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 285, 20), )

    
    accuracy_degreesCelcius = property(__accuracy_degreesCelcius.value, __accuracy_degreesCelcius.set, None, None)

    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}aspiration uses Python identifier aspiration
    __aspiration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'aspiration'), 'aspiration', '__urnxml_gov_auicsmegeodesy0_4_TemperatureSensorType_urnxml_gov_auicsmegeodesy0_4aspiration', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 286, 20), )

    
    aspiration = property(__aspiration.value, __aspiration.set, None, None)

    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}SensorType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __dataSamplingInterval.name() : __dataSamplingInterval,
        __accuracy_degreesCelcius.name() : __accuracy_degreesCelcius,
        __aspiration.name() : __aspiration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TemperatureSensorType = TemperatureSensorType
Namespace.addCategoryObject('typeBinding', 'TemperatureSensorType', TemperatureSensorType)


# Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}WaterVaporSensorType with content type ELEMENT_ONLY
class WaterVaporSensorType (BaseSensorEquipmentType):
    """Complex type {urn:xml-gov-au:icsm:egeodesy:0.4}WaterVaporSensorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WaterVaporSensorType')
    _XSDLocation = pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 291, 4)
    _ElementMap = BaseSensorEquipmentType._ElementMap.copy()
    _AttributeMap = BaseSensorEquipmentType._AttributeMap.copy()
    # Base type is BaseSensorEquipmentType
    
    # Element metaDataProperty ({http://www.opengis.net/gml/3.2}metaDataProperty) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element description ({http://www.opengis.net/gml/3.2}description) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element descriptionReference ({http://www.opengis.net/gml/3.2}descriptionReference) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element name ({http://www.opengis.net/gml/3.2}name) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element identifier ({http://www.opengis.net/gml/3.2}identifier) inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    
    # Element validTime ({http://www.opengis.net/gml/3.2}validTime) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element notes ({urn:xml-gov-au:icsm:egeodesy:0.4}notes) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element associatedDocument ({urn:xml-gov-au:icsm:egeodesy:0.4}associatedDocument) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element extension ({urn:xml-gov-au:icsm:egeodesy:0.4}extension) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element manufacturer ({urn:xml-gov-au:icsm:egeodesy:0.4}manufacturer) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element serialNumber ({urn:xml-gov-au:icsm:egeodesy:0.4}serialNumber) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element heightDiffToAntenna ({urn:xml-gov-au:icsm:egeodesy:0.4}heightDiffToAntenna) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element calibrationDate ({urn:xml-gov-au:icsm:egeodesy:0.4}calibrationDate) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}BaseSensorEquipmentType
    
    # Element {urn:xml-gov-au:icsm:egeodesy:0.4}distanceToAntenna uses Python identifier distanceToAntenna
    __distanceToAntenna = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'distanceToAntenna'), 'distanceToAntenna', '__urnxml_gov_auicsmegeodesy0_4_WaterVaporSensorType_urnxml_gov_auicsmegeodesy0_4distanceToAntenna', False, pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 295, 20), )

    
    distanceToAntenna = property(__distanceToAntenna.value, __distanceToAntenna.set, None, None)

    
    # Element type ({urn:xml-gov-au:icsm:egeodesy:0.4}type) inherited from {urn:xml-gov-au:icsm:egeodesy:0.4}SensorType
    
    # Attribute id inherited from {http://www.opengis.net/gml/3.2}AbstractGMLType
    _ElementMap.update({
        __distanceToAntenna.name() : __distanceToAntenna
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.WaterVaporSensorType = WaterVaporSensorType
Namespace.addCategoryObject('typeBinding', 'WaterVaporSensorType', WaterVaporSensorType)


antennaReferencePoint = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'antennaReferencePoint'), pyxb.bundles.opengis.gml_3_2.CodeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 84, 4))
Namespace.addCategoryObject('elementBinding', antennaReferencePoint.name().localName(), antennaReferencePoint)

AbstractOperand = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractOperand'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 184, 4))
Namespace.addCategoryObject('elementBinding', AbstractOperand.name().localName(), AbstractOperand)

AbstractResult = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractResult'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 186, 4))
Namespace.addCategoryObject('elementBinding', AbstractResult.name().localName(), AbstractResult)

ReductionMethod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReductionMethod'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 476, 4))
Namespace.addCategoryObject('elementBinding', ReductionMethod.name().localName(), ReductionMethod)

AbstractMeasurement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurement'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 25, 4))
Namespace.addCategoryObject('elementBinding', AbstractMeasurement.name().localName(), AbstractMeasurement)

AbstractPosition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractPosition'), pyxb.binding.datatypes.anyType, documentation='\n                A Position element contains information about a 1d, 2d, or 3d position for a node.  In general a different position record is used for each datum and source.  For example if a 3d adjustment was the source a single 3d position record (e.g. lat, lon, ellipsoid ht) could be used. If there was an AHD height determined this would be a separate 1d position record.\n            ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 358, 4))
Namespace.addCategoryObject('elementBinding', AbstractPosition.name().localName(), AbstractPosition)

AbstractQuality = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Abstract group for quality values.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4))
Namespace.addCategoryObject('elementBinding', AbstractQuality.name().localName(), AbstractQuality)

DescriptiveQuality = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DescriptiveQuality'), pyxb.bundles.opengis.gml_3_2.CodeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 161, 4))
Namespace.addCategoryObject('elementBinding', DescriptiveQuality.name().localName(), DescriptiveQuality)

DynamicFeature = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DynamicFeature'), DynamicFeatureType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Restriction of the gml:DynamicFeatureType. Removes gml:history and relies upon the extending type to implement a history element that restricts child types to those allowed by the class model.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 80, 4))
Namespace.addCategoryObject('elementBinding', DynamicFeature.name().localName(), DynamicFeature)

AbstractTimeSlice = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractTimeSlice'), AbstractTimeSliceType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Mimics the gml:AbstractTimeSlice element but extends gml:AbstractFeatureType instead of gml:AbstractGMLType. The purpose of making this distinction is to ensure better access to a wider variety of WFS solutions that use the gml:AbstractFeature/gml:Location element for visualisation. \n            ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 93, 4))
Namespace.addCategoryObject('elementBinding', AbstractTimeSlice.name().localName(), AbstractTimeSlice)

Instrument = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Instrument'), InstrumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 110, 4))
Namespace.addCategoryObject('elementBinding', Instrument.name().localName(), Instrument)

dataStream = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dataStream'), dataStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 121, 4))
Namespace.addCategoryObject('elementBinding', dataStream.name().localName(), dataStream)

Document = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Document'), DocumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 21, 4))
Namespace.addCategoryObject('elementBinding', Document.name().localName(), Document)

SurveyedLocalTie = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SurveyedLocalTie'), SurveyedLocalTieType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 310, 4))
Namespace.addCategoryObject('elementBinding', SurveyedLocalTie.name().localName(), SurveyedLocalTie)

FrequencyStandard = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyStandard'), FrequencyStandardType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 311, 4))
Namespace.addCategoryObject('elementBinding', FrequencyStandard.name().localName(), FrequencyStandard)

CollocationInformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CollocationInformation'), CollocationInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 312, 4))
Namespace.addCategoryObject('elementBinding', CollocationInformation.name().localName(), CollocationInformation)

Sensor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Sensor'), SensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 71, 4))
Namespace.addCategoryObject('elementBinding', Sensor.name().localName(), Sensor)

GeodesyML = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeodesyML'), GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 33, 4))
Namespace.addCategoryObject('elementBinding', GeodesyML.name().localName(), GeodesyML)

igsRadomeModelCode = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'igsRadomeModelCode'), igsRadomeModelCodeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 235, 4))
Namespace.addCategoryObject('elementBinding', igsRadomeModelCode.name().localName(), igsRadomeModelCode)

geodeticMonument = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'geodeticMonument'), baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 32, 4))
Namespace.addCategoryObject('elementBinding', geodeticMonument.name().localName(), geodeticMonument)

AbstractSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractSource'), AbstractSourceType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 27, 4))
Namespace.addCategoryObject('elementBinding', AbstractSource.name().localName(), AbstractSource)

AbstractPositionEstimator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionEstimator'), AbstractPositionEstimatorType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of estimators. Extends AbstractCoordinateOperation. gml:targetCRS and gml:sourceCRS have been removed.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 93, 4))
Namespace.addCategoryObject('elementBinding', AbstractPositionEstimator.name().localName(), AbstractPositionEstimator)

operand = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'operand'), AnyOperandType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 188, 4))
Namespace.addCategoryObject('elementBinding', operand.name().localName(), operand)

result = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'result'), AnyResultType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 198, 4))
Namespace.addCategoryObject('elementBinding', result.name().localName(), result)

adjustmentMeasurement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adjustmentMeasurement'), adjustmentMeasurementType, documentation='Measurements within adjustment.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 230, 4))
Namespace.addCategoryObject('elementBinding', adjustmentMeasurement.name().localName(), adjustmentMeasurement)

adjustedPosition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adjustedPosition'), adjustedPositionType, documentation='Position returned from an adjustment. This element may be redundant since this link will be identified in a PositionType:source element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 251, 4))
Namespace.addCategoryObject('elementBinding', adjustedPosition.name().localName(), adjustedPosition)

adjustedPositionQuality = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adjustedPositionQuality'), adjustedPositionQualityType, documentation='Covariances between adjusted positions determined as part of adjustment.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 264, 4))
Namespace.addCategoryObject('elementBinding', adjustedPositionQuality.name().localName(), adjustedPositionQuality)

adjustedMeasurement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adjustedMeasurement'), adjustedMeasurementType, documentation='Additional values returned from an adjustment for measurement line.  For example may be residuals or statistics.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 279, 4))
Namespace.addCategoryObject('elementBinding', adjustedMeasurement.name().localName(), adjustedMeasurement)

transformationPosition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transformationPosition'), transformationPositionType, documentation='The operand to a transformation on a position.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 318, 4))
Namespace.addCategoryObject('elementBinding', transformationPosition.name().localName(), transformationPosition)

transformationMeasurement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transformationMeasurement'), transformationMeasurementType, documentation='The operand to a transformation on a datum-defined measurement.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 330, 4))
Namespace.addCategoryObject('elementBinding', transformationMeasurement.name().localName(), transformationMeasurement)

transformedPosition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transformedPosition'), transformedPositionType, documentation='The result of a transformation on a position.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 342, 4))
Namespace.addCategoryObject('elementBinding', transformedPosition.name().localName(), transformedPosition)

transformedMeasurement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transformedMeasurement'), transformedMeasurementType, documentation='The result of a transformation on a datum-defined measurement.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 354, 4))
Namespace.addCategoryObject('elementBinding', transformedMeasurement.name().localName(), transformedMeasurement)

AbstractMeasurementOperation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementOperation'), AbstractMeasurementOperationType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of estimators.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 427, 4))
Namespace.addCategoryObject('elementBinding', AbstractMeasurementOperation.name().localName(), AbstractMeasurementOperation)

AbstractDefinitionOperation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionOperation'), AbstractDefinitionOperationType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of definitons.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 521, 4))
Namespace.addCategoryObject('elementBinding', AbstractDefinitionOperation.name().localName(), AbstractDefinitionOperation)

LocalEpisodicEffect = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocalEpisodicEffect'), localEpisodicEffectType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 89, 4))
Namespace.addCategoryObject('elementBinding', LocalEpisodicEffect.name().localName(), LocalEpisodicEffect)

AbstractSiteLog = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractSiteLog'), AbstractSiteLogType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 120, 4))
Namespace.addCategoryObject('elementBinding', AbstractSiteLog.name().localName(), AbstractSiteLog)

siteVisit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteVisit'), SiteVisitType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 132, 4))
Namespace.addCategoryObject('elementBinding', siteVisit.name().localName(), siteVisit)

Node = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Node'), NodeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 203, 4))
Namespace.addCategoryObject('elementBinding', Node.name().localName(), Node)

Status = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Status'), FeatureStatusType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4))
Namespace.addCategoryObject('elementBinding', Status.name().localName(), Status)

StatusInstance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatusInstance'), FeatureStatusInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 256, 4))
Namespace.addCategoryObject('elementBinding', StatusInstance.name().localName(), StatusInstance)

PositionPairCovariance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PositionPairCovariance'), PositionPairCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 298, 4))
Namespace.addCategoryObject('elementBinding', PositionPairCovariance.name().localName(), PositionPairCovariance)

Position = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Position'), PositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 366, 4))
Namespace.addCategoryObject('elementBinding', Position.name().localName(), Position)

PositionTimeSlice = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PositionTimeSlice'), PositionTimeSliceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 414, 4))
Namespace.addCategoryObject('elementBinding', PositionTimeSlice.name().localName(), PositionTimeSlice)

Project = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Project'), ProjectType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 22, 4))
Namespace.addCategoryObject('elementBinding', Project.name().localName(), Project)

TerrestrialReferenceFrame = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TerrestrialReferenceFrame'), TerrestrialReferenceFrameType, documentation='A terrestrial reference frame is a geodetic reference frame (or geodetic datum in previous GML parlance) in which the coordinates of reference or definition monuments are allowed to move. In essence, a terrestrial reference frame is continuously "realised" with the regular addition of new observations on a weekly or daily time scale. To use a terrestrial reference frame, up-to-date transformation products must be available to propagate coordinates and their uncertanties between epochs and between frames.\n            \n            To derive a static reference frame (a GML datum) from a terrestrial reference frame and a dynamic transformation, the source and target epochs of the dynamic transformation are required to compute coordinates in the realisation epoch of the static reference frame.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 21, 4))
Namespace.addCategoryObject('elementBinding', TerrestrialReferenceFrame.name().localName(), TerrestrialReferenceFrame)

DynamicTransformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DynamicTransformation'), DynamicTransformationType, documentation='A dynamic transformation is a coordinate transformation between reference frames where at least one of which is a dynamic or terrestrial reference frame. To derive a static reference frame (a GML datum) from a terrestrial reference frame and a dynamic transformation, either the source and target epochs OR the source epoch and a relative time quantity parameter of the dynamic transformation are required to compute coordinates in the realisation epoch of the static reference frame.\n\nA transformation between reference frames in the static sense requires no temporal parameters. That is, a static reference frame (SRF) such as GDA94 can be transformed to another SRF like AGD66 with seven spatial parameters and no temporal parameters. In contrast, a dynamic reference frame (DRF) such as ITRF2008 (or the upcoming ITRF2014) requires temporal parameters to be transformed to a SRF and vice versa, and this results in the 14-parameter transformation comprised of 7 spatial and 7 temporal-spatial parameters. A fundamental requirement of the 14-parameter transformation is the provision of a time vector relative to the realisation epoch of the dynamic frame. See Dawson & Woods (2010).', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 63, 4))
Namespace.addCategoryObject('elementBinding', DynamicTransformation.name().localName(), DynamicTransformation)

OtherInstrumentation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OtherInstrumentation'), OtherInstrumentationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 308, 4))
Namespace.addCategoryObject('elementBinding', OtherInstrumentation.name().localName(), OtherInstrumentation)

TieMeasurement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TieMeasurement'), TieMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 309, 4))
Namespace.addCategoryObject('elementBinding', TieMeasurement.name().localName(), TieMeasurement)

Setup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Setup'), SetupType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 24, 4))
Namespace.addCategoryObject('elementBinding', Setup.name().localName(), Setup)

SetupInstance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupInstance'), SetupInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 44, 4))
Namespace.addCategoryObject('elementBinding', SetupInstance.name().localName(), SetupInstance)

AbstractObservationQuality = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractObservationQuality'), AbstractObservationQualityType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Abstract class to contain observation-specific environment quality. For example, GNSS node quality.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 90, 4))
Namespace.addCategoryObject('elementBinding', AbstractObservationQuality.name().localName(), AbstractObservationQuality)

GNSSObservationQualityInstance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNSSObservationQualityInstance'), GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 130, 4))
Namespace.addCategoryObject('elementBinding', GNSSObservationQualityInstance.name().localName(), GNSSObservationQualityInstance)

geodeticEquipmentItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'geodeticEquipmentItem'), baseGeodeticEquipmentType, documentation='\n         Provides a base non-instantiable element type whose\n         structure is a derived complex type.  This element\n         can then be referenced as a substitutionGroup for\n         equipment cataloges and such.\n            ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 37, 4))
Namespace.addCategoryObject('elementBinding', geodeticEquipmentItem.name().localName(), geodeticEquipmentItem)

AbstractPositionSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionSource'), AbstractPositionSourceType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Version 0.2.2: Define an abstract type to encapsulate the inputs and outputs of an "instance" of a coordinate operation. This instance is recorded to maintain the traceable lineage of a Position value.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 74, 4))
Namespace.addCategoryObject('elementBinding', AbstractPositionSource.name().localName(), AbstractPositionSource)

PositionEstimatorProcess = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PositionEstimatorProcess'), PositionEstimatorProcessType, documentation='Contains process steps that identify processes used for the generation of position parameters.\n                For geodetic adjustments this could involve a preprocessing step for generation of apriori coordinates, adjustment phases, outlier detection and removal and any other relevant procedures that impart a significant result on parameters.\n                For the generation of a SINEX file via GNSS processing software such as Bernese this type can be used to describe configuration steps.\n            ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 155, 4))
Namespace.addCategoryObject('elementBinding', PositionEstimatorProcess.name().localName(), PositionEstimatorProcess)

adjustmentPosition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adjustmentPosition'), adjustmentPositionType, documentation='Position for nodes within adjustment.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 208, 4))
Namespace.addCategoryObject('elementBinding', adjustmentPosition.name().localName(), adjustmentPosition)

adjustmentValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adjustmentValue'), ValueType, documentation='Used for returning information about the adjustment.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 245, 4))
Namespace.addCategoryObject('elementBinding', adjustmentValue.name().localName(), adjustmentValue)

AbstractMeasurementSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementSource'), AbstractMeasurementSourceType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Version 0.2.2: Encapsulates measurement operation and the operands/results that define the operation event.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 391, 4))
Namespace.addCategoryObject('elementBinding', AbstractMeasurementSource.name().localName(), AbstractMeasurementSource)

AbstractMeasurementEstimator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementEstimator'), AbstractMeasurementEstimatorType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of estimators.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 410, 4))
Namespace.addCategoryObject('elementBinding', AbstractMeasurementEstimator.name().localName(), AbstractMeasurementEstimator)

AbstractDefinitionSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionSource'), AbstractDefinitionSourceType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Version 0.2.2: Define an abstract type to encapsulate the inputs and outputs of an "instance" of a coordinate operation. This instance is recorded to maintain the traceable lineage of a Position value.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 485, 4))
Namespace.addCategoryObject('elementBinding', AbstractDefinitionSource.name().localName(), AbstractDefinitionSource)

AbstractDefinitionEstimator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionEstimator'), AbstractDefinitionEstimatorType, abstract=pyxb.binding.datatypes.boolean(1), documentation='Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of definition estimators. Usually defines a collocation or inversion.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 504, 4))
Namespace.addCategoryObject('elementBinding', AbstractDefinitionEstimator.name().localName(), AbstractDefinitionEstimator)

InterpolatedValueSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpolatedValueSource'), InterpolatedValueSourceType, documentation='Version 0.2.2: Define an abstract type to encapsulate the operands, results and process of the operation event that produced an interpolated value.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 569, 4))
Namespace.addCategoryObject('elementBinding', InterpolatedValueSource.name().localName(), InterpolatedValueSource)

ObservationQualitySource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationQualitySource'), ObservationQualitySourceType, documentation='Version 0.2.2: Define an abstract type to encapsulate the operands, results and process of the operation event that produced observation quality meta-data.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 595, 4))
Namespace.addCategoryObject('elementBinding', ObservationQualitySource.name().localName(), ObservationQualitySource)

MultipathSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultipathSource'), multipathSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 86, 4))
Namespace.addCategoryObject('elementBinding', MultipathSource.name().localName(), MultipathSource)

SignalObstruction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignalObstruction'), signalObstructionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 87, 4))
Namespace.addCategoryObject('elementBinding', SignalObstruction.name().localName(), SignalObstruction)

RadioInterference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RadioInterference'), radioInterferenceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 88, 4))
Namespace.addCategoryObject('elementBinding', RadioInterference.name().localName(), RadioInterference)

Measurement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Measurement'), MeasurementType, documentation='A general container for any geodetic measurement. This element will be deprecated in a subsequent version of GeodesyML subject to the requirements coverage provided by the specific named measurement types such as GNSSBaseline, DirectionSet, OrthometricHeight, etc.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 49, 4))
Namespace.addCategoryObject('elementBinding', Measurement.name().localName(), Measurement)

HorizontalAngle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HorizontalAngle'), HorizontalAngleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 177, 4))
Namespace.addCategoryObject('elementBinding', HorizontalAngle.name().localName(), HorizontalAngle)

GeodeticAzimuth = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeodeticAzimuth'), GeodeticAzimuthType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 194, 4))
Namespace.addCategoryObject('elementBinding', GeodeticAzimuth.name().localName(), GeodeticAzimuth)

EllipsoidChordDistance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EllipsoidChordDistance'), EllipsoidChordDistanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 207, 4))
Namespace.addCategoryObject('elementBinding', EllipsoidChordDistance.name().localName(), EllipsoidChordDistance)

DirectionSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DirectionSet'), DirectionSetType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 231, 4))
Namespace.addCategoryObject('elementBinding', DirectionSet.name().localName(), DirectionSet)

GNSSBaseline = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNSSBaseline'), GNSSBaselineType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 244, 4))
Namespace.addCategoryObject('elementBinding', GNSSBaseline.name().localName(), GNSSBaseline)

OrthometricHeight = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrthometricHeight'), OrthometricHeightType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 257, 4))
Namespace.addCategoryObject('elementBinding', OrthometricHeight.name().localName(), OrthometricHeight)

HeightDifference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HeightDifference'), HeightDifferenceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 270, 4))
Namespace.addCategoryObject('elementBinding', HeightDifference.name().localName(), HeightDifference)

OrthometricHeightDifference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrthometricHeightDifference'), OrthometricHeightDifferenceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 282, 4))
Namespace.addCategoryObject('elementBinding', OrthometricHeightDifference.name().localName(), OrthometricHeightDifference)

AstronomicLatitude = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AstronomicLatitude'), AstronomicLatitudeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 295, 4))
Namespace.addCategoryObject('elementBinding', AstronomicLatitude.name().localName(), AstronomicLatitude)

AstronomicLongitude = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AstronomicLongitude'), AstronomicLongitudeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 308, 4))
Namespace.addCategoryObject('elementBinding', AstronomicLongitude.name().localName(), AstronomicLongitude)

AstronomicAzimuth = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AstronomicAzimuth'), AstronomicAzimuthType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 321, 4))
Namespace.addCategoryObject('elementBinding', AstronomicAzimuth.name().localName(), AstronomicAzimuth)

MeanSeaLevelArcDistance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MeanSeaLevelArcDistance'), MeanSeaLevelArcDistanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 350, 4))
Namespace.addCategoryObject('elementBinding', MeanSeaLevelArcDistance.name().localName(), MeanSeaLevelArcDistance)

SlopeDistance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SlopeDistance'), SlopeDistanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 363, 4))
Namespace.addCategoryObject('elementBinding', SlopeDistance.name().localName(), SlopeDistance)

EllipsoidHeight = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EllipsoidHeight'), EllipsoidHeightType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 375, 4))
Namespace.addCategoryObject('elementBinding', EllipsoidHeight.name().localName(), EllipsoidHeight)

ZenithDistance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ZenithDistance'), ZenithDistanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 388, 4))
Namespace.addCategoryObject('elementBinding', ZenithDistance.name().localName(), ZenithDistance)

VerticalAngle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VerticalAngle'), VerticalAngleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 400, 4))
Namespace.addCategoryObject('elementBinding', VerticalAngle.name().localName(), VerticalAngle)

GNSSBaselineCluster = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNSSBaselineCluster'), GNSSBaselineClusterType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 412, 4))
Namespace.addCategoryObject('elementBinding', GNSSBaselineCluster.name().localName(), GNSSBaselineCluster)

GNSSPointCluster = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNSSPointCluster'), GNSSPointClusterType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 426, 4))
Namespace.addCategoryObject('elementBinding', GNSSPointCluster.name().localName(), GNSSPointCluster)

DInSARWrapped = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DInSARWrapped'), DInSARWrappedType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 440, 4))
Namespace.addCategoryObject('elementBinding', DInSARWrapped.name().localName(), DInSARWrapped)

Site = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Site'), SiteType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 63, 4))
Namespace.addCategoryObject('elementBinding', Site.name().localName(), Site)

Monument = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Monument'), MonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 79, 4))
Namespace.addCategoryObject('elementBinding', Monument.name().localName(), Monument)

SiteCertificate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SiteCertificate'), SiteCertificateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 155, 4))
Namespace.addCategoryObject('elementBinding', SiteCertificate.name().localName(), SiteCertificate)

PositionTimeSeries = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PositionTimeSeries'), PositionTimeSeriesType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 384, 4))
Namespace.addCategoryObject('elementBinding', PositionTimeSeries.name().localName(), PositionTimeSeries)

Value = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), ValueType, documentation='Generic property value holder', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 136, 4))
Namespace.addCategoryObject('elementBinding', Value.name().localName(), Value)

NumericSingleQuality = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumericSingleQuality'), SingleValueType, documentation='A numeric value for quality. This is often the type used to describe Positional Uncertainty, Relative Uncertainty and Survey Uncertainty.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 148, 4))
Namespace.addCategoryObject('elementBinding', NumericSingleQuality.name().localName(), NumericSingleQuality)

NumericQualityList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumericQualityList'), ValueType, documentation='A numeric list value for quality. This is often the type used to describe a VCV matrix or some other arbitrary list of values. To specify a VCV matrix of 2x2 or 3x3 dimension it is better to use VCV2D and VCV3D respectively.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 154, 4))
Namespace.addCategoryObject('elementBinding', NumericQualityList.name().localName(), NumericQualityList)

GridTransformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GridTransformation'), GridTransformationType, documentation='A gridded transformation can be either  (1) an absolute deformation model between two defined epochs, or (2) a time-relative transformation such as a velocity map or residual velocity map transformation. A residual linear velocity map is often defined in conjunction with an optional Euler-pole 3-parameter transformation. The application of velocity map transformations require propagation of the initial coordinates to the sourceEpoch of the transformation to derive the appropriate linear velocity vector and uncertainty for that point to be propagated to the target epoch. The target epoch is not specified in a velocity map definition, instead the derived velocity is a time-dependent parameter which can be used to propagate the point to any desired epoch.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 93, 4))
Namespace.addCategoryObject('elementBinding', GridTransformation.name().localName(), GridTransformation)

InterpolatedSingleValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpolatedSingleValue'), InterpolatedSingleValueType, documentation='The result of an interpolation operation on a gridded transformation or geoid.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 152, 4))
Namespace.addCategoryObject('elementBinding', InterpolatedSingleValue.name().localName(), InterpolatedSingleValue)

InterpolatedDynamicValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpolatedDynamicValue'), InterpolatedDynamicValueType, documentation='The time-series result of interpolation operations on a gridded transformation or geoid over a time period.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 170, 4))
Namespace.addCategoryObject('elementBinding', InterpolatedDynamicValue.name().localName(), InterpolatedDynamicValue)

siteLog = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteLog'), SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 70, 4))
Namespace.addCategoryObject('elementBinding', siteLog.name().localName(), siteLog)

GnssRadome = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GnssRadome'), GnssRadomeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 301, 4))
Namespace.addCategoryObject('elementBinding', GnssRadome.name().localName(), GnssRadome)

GNSSObservationQuality = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNSSObservationQuality'), GNSSObservationQualityType, documentation='Abstract class to contain observation-specific environment quality. For example, GNSS node quality.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 108, 4))
Namespace.addCategoryObject('elementBinding', GNSSObservationQuality.name().localName(), GNSSObservationQuality)

PositionSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PositionSource'), PositionSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 124, 4))
Namespace.addCategoryObject('elementBinding', PositionSource.name().localName(), PositionSource)

Transformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Transformation'), TransformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 295, 4))
Namespace.addCategoryObject('elementBinding', Transformation.name().localName(), Transformation)

GNSSBaselineReduction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNSSBaselineReduction'), GNSSBaselineReductionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 457, 4))
Namespace.addCategoryObject('elementBinding', GNSSBaselineReduction.name().localName(), GNSSBaselineReduction)

ReferenceFrameSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReferenceFrameSource'), ReferenceFrameSourceType, abstract=pyxb.binding.datatypes.boolean(1), location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 548, 4))
Namespace.addCategoryObject('elementBinding', ReferenceFrameSource.name().localName(), ReferenceFrameSource)

EllipsoidArcDistance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EllipsoidArcDistance'), EllipsoidArcDistanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 220, 4))
Namespace.addCategoryObject('elementBinding', EllipsoidArcDistance.name().localName(), EllipsoidArcDistance)

GeodeticLatitude = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeodeticLatitude'), GeodeticLatitudeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 334, 4))
Namespace.addCategoryObject('elementBinding', GeodeticLatitude.name().localName(), GeodeticLatitude)

GeodeticLongitude = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeodeticLongitude'), GeodeticLongitudeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 342, 4))
Namespace.addCategoryObject('elementBinding', GeodeticLongitude.name().localName(), GeodeticLongitude)

SupplementaryMark = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SupplementaryMark'), SupplementaryMarkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 105, 4))
Namespace.addCategoryObject('elementBinding', SupplementaryMark.name().localName(), SupplementaryMark)

VCV3D = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VCV3D'), VCV3x3Type, documentation='Upper triangle of a symmetric 3x3 VCV matrix defined as a list of six doubles.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 163, 4))
Namespace.addCategoryObject('elementBinding', VCV3D.name().localName(), VCV3D)

VCV2D = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VCV2D'), VCV2x2Type, documentation='Upper triangle of a symmetric 2x2 VCV matrix defined as a list of three doubles.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 169, 4))
Namespace.addCategoryObject('elementBinding', VCV2D.name().localName(), VCV2D)

DeformationGridTransformation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeformationGridTransformation'), DeformationGridTransformationType, documentation='A deformation grid transformation is an in-frame transformation i.e. sourceCRS and targetCRS are the same. The targetEpoch element is required. Deformation defines an absolute transformation, that is, one that does not have time-dependent parameters. It is often called a patch-model when used in scenarios where deformation has occurred due to an earthquake.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 109, 4))
Namespace.addCategoryObject('elementBinding', DeformationGridTransformation.name().localName(), DeformationGridTransformation)

GnssReceiver = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GnssReceiver'), GnssReceiverType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 302, 4))
Namespace.addCategoryObject('elementBinding', GnssReceiver.name().localName(), GnssReceiver)

GnssAntenna = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GnssAntenna'), GnssAntennaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 303, 4))
Namespace.addCategoryObject('elementBinding', GnssAntenna.name().localName(), GnssAntenna)

HumiditySensor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HumiditySensor'), HumiditySensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 304, 4))
Namespace.addCategoryObject('elementBinding', HumiditySensor.name().localName(), HumiditySensor)

PressureSensor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PressureSensor'), PressureSensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 305, 4))
Namespace.addCategoryObject('elementBinding', PressureSensor.name().localName(), PressureSensor)

TemperatureSensor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TemperatureSensor'), TemperatureSensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 306, 4))
Namespace.addCategoryObject('elementBinding', TemperatureSensor.name().localName(), TemperatureSensor)

WaterVaporSensor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WaterVaporSensor'), WaterVaporSensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 307, 4))
Namespace.addCategoryObject('elementBinding', WaterVaporSensor.name().localName(), WaterVaporSensor)



def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 67, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 68, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 71, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 72, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 73, 24))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 67, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 68, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 71, 24))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 72, 24))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DynamicFeatureType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSourceReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 73, 24))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DynamicFeatureType._Automaton = _BuildAutomaton()




InstrumentPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Instrument'), InstrumentType, scope=InstrumentPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 110, 4)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 87, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Instrument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 88, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
InstrumentPropertyType._Automaton = _BuildAutomaton_()




AbstractTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource'), pyxb.bundles.opengis.gml_3_2.StringOrRefType, scope=AbstractTimeSliceType, documentation='Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data. The remote link attributes of the gml:dataSource element have been deprecated along with its current type.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dynamicFeature.xsd', 17, 1)))

AbstractTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=AbstractTimeSliceType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 55, 12))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 54, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AbstractTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 55, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractTimeSliceType._Automaton = _BuildAutomaton_2()




InstrumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=InstrumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

InstrumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=InstrumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

InstrumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=InstrumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

InstrumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=InstrumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
InstrumentType._Automaton = _BuildAutomaton_3()




agencyPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, 'CI_ResponsibleParty'), pyxb.bundles.opengis.iso19139.v20070417.gmd.CI_ResponsibleParty_Type, scope=agencyPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/iso/19139/20070417/gmd/citation.xsd', 31, 1)))

agencyPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gmd, 'MD_SecurityConstraints'), pyxb.bundles.opengis.iso19139.v20070417.gmd.MD_SecurityConstraints_Type, scope=agencyPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/iso/19139/20070417/gmd/constraints.xsd', 77, 1)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/contact.xsd', 22, 20))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agencyPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agencyPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agencyPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agencyPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agencyPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(agencyPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, 'MD_SecurityConstraints')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/contact.xsd', 22, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(agencyPropertyType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gmd, 'CI_ResponsibleParty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/contact.xsd', 23, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
agencyPropertyType._Automaton = _BuildAutomaton_4()




ntripMountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mountPoint'), pyxb.binding.datatypes.token, scope=ntripMountType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 67, 12)))

ntripMountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sourceID'), pyxb.binding.datatypes.string, scope=ntripMountType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 68, 12)))

ntripMountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'countryCode'), pyxb.binding.datatypes.token, scope=ntripMountType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 69, 12)))

ntripMountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'network'), pyxb.binding.datatypes.token, scope=ntripMountType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 70, 12)))

ntripMountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'allowConnections'), pyxb.binding.datatypes.boolean, scope=ntripMountType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 71, 12)))

ntripMountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'requireAuthentication'), pyxb.binding.datatypes.boolean, scope=ntripMountType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 72, 12)))

ntripMountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'encryption'), pyxb.binding.datatypes.boolean, scope=ntripMountType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 73, 12)))

ntripMountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'feesApply'), pyxb.binding.datatypes.boolean, scope=ntripMountType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 74, 12)))

ntripMountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitrate'), pyxb.binding.datatypes.double, scope=ntripMountType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 75, 12)))

ntripMountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'carrierPhase'), pyxb.binding.datatypes.token, scope=ntripMountType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 76, 12)))

ntripMountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'navSystem'), pyxb.binding.datatypes.token, scope=ntripMountType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 77, 12)))

ntripMountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nmea'), pyxb.binding.datatypes.string, scope=ntripMountType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 78, 12)))

ntripMountType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'solution'), pyxb.binding.datatypes.string, scope=ntripMountType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 79, 12)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 67, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 68, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 69, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 70, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 71, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 72, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 73, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 74, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 75, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 76, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 77, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 78, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 79, 12))
    counters.add(cc_12)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ntripMountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mountPoint')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 67, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ntripMountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sourceID')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 68, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ntripMountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'countryCode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 69, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ntripMountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'network')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 70, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ntripMountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'allowConnections')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 71, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ntripMountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'requireAuthentication')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 72, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ntripMountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'encryption')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 73, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ntripMountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'feesApply')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 74, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ntripMountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitrate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 75, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ntripMountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'carrierPhase')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 76, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ntripMountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'navSystem')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 77, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ntripMountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nmea')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 78, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ntripMountType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'solution')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 79, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ntripMountType._Automaton = _BuildAutomaton_5()




ntripMountsType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ntripMount'), ntripMountType, scope=ntripMountsType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 84, 12)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ntripMountsType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ntripMount')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 84, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ntripMountsType._Automaton = _BuildAutomaton_6()




baseDataStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hostname'), pyxb.binding.datatypes.string, scope=baseDataStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 90, 16)))

baseDataStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ipAddress'), ipAddressType, scope=baseDataStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 91, 16)))

baseDataStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'port'), pyxb.binding.datatypes.positiveInteger, scope=baseDataStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 93, 12)))

baseDataStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sampInterval'), pyxb.binding.datatypes.double, scope=baseDataStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 94, 12)))

baseDataStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dataFormat'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=baseDataStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 96, 12)))

baseDataStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ntripMounts'), ntripMountsType, scope=baseDataStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 97, 12)))

baseDataStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'startDate'), pyxb.binding.datatypes.date, scope=baseDataStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 98, 12)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 97, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 98, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseDataStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hostname')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 90, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseDataStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ipAddress')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 91, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseDataStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'port')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 93, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseDataStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sampInterval')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 94, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(baseDataStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dataFormat')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 96, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(baseDataStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ntripMounts')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 97, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(baseDataStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'startDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 98, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
baseDataStreamType._Automaton = _BuildAutomaton_7()




siteStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'agency'), agencyPropertyType, scope=siteStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 103, 12)))

siteStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dataStream'), baseDataStreamType, scope=siteStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 104, 12)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 103, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 104, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(siteStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'agency')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 103, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(siteStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dataStream')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 104, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
siteStreamType._Automaton = _BuildAutomaton_8()




publishedStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'agency'), agencyPropertyType, scope=publishedStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 109, 12)))

publishedStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dataStream'), baseDataStreamType, scope=publishedStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 110, 12)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 109, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 110, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(publishedStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'agency')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 109, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(publishedStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dataStream')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 110, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
publishedStreamType._Automaton = _BuildAutomaton_9()




dataStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteStream'), siteStreamType, scope=dataStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 115, 12)))

dataStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'publishedStream'), publishedStreamType, scope=dataStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 116, 12)))

dataStreamType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=dataStreamType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 117, 12)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 115, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 116, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 117, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dataStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteStream')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 115, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(dataStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'publishedStream')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 116, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(dataStreamType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 117, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
dataStreamType._Automaton = _BuildAutomaton_10()




dataStreamPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dataStream'), dataStreamType, scope=dataStreamPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 121, 4)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 124, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(dataStreamPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dataStream')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/dataStreams.xsd', 125, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
dataStreamPropertyType._Automaton = _BuildAutomaton_11()




DocumentPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Document'), DocumentType, scope=DocumentPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 21, 4)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 15, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DocumentPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Document')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 16, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DocumentPropertyType._Automaton = _BuildAutomaton_12()




DocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=DocumentType, documentation='Type of document.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 27, 20)))

DocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'createdDate'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=DocumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 32, 20)))

DocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'receivedDate'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=DocumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 33, 20)))

DocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'custodian'), pyxb.bundles.opengis.iso19139.v20070417.gmd.CI_ResponsibleParty_PropertyType, scope=DocumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 34, 20)))

DocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'remarks'), pyxb.binding.datatypes.string, scope=DocumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 35, 20)))

DocumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'body'), CTD_ANON, scope=DocumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 36, 20)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 32, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 33, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 34, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 35, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 36, 20))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 27, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'createdDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 32, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'receivedDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 33, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'custodian')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 34, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'remarks')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 35, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(DocumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'body')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 36, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DocumentType._Automaton = _BuildAutomaton_13()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileReference'), pyxb.bundles.opengis.gml_3_2.ReferenceType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 39, 32)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'content'), CTD_ANON_14, scope=CTD_ANON, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 40, 32)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 39, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'content')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 40, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_strict, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'urn:xml-gov-au:icsm:egeodesy:0.4')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 49, 32))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_14()




CollocationInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=CollocationInformationType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

CollocationInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=CollocationInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

CollocationInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=CollocationInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

CollocationInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=CollocationInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

CollocationInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'instrumentationType'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=CollocationInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 176, 20)))

CollocationInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'status'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=CollocationInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 177, 20)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CollocationInformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CollocationInformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CollocationInformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CollocationInformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CollocationInformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CollocationInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'instrumentationType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 176, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CollocationInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 177, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollocationInformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 178, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CollocationInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CollocationInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CollocationInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollocationInformationType._Automaton = _BuildAutomaton_15()




FrequencyStandardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=FrequencyStandardType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

FrequencyStandardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=FrequencyStandardType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

FrequencyStandardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=FrequencyStandardType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

FrequencyStandardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=FrequencyStandardType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

FrequencyStandardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'standardType'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=FrequencyStandardType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 189, 20)))

FrequencyStandardType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'inputFrequency'), pyxb.binding.datatypes.double, scope=FrequencyStandardType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 190, 20)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 190, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FrequencyStandardType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FrequencyStandardType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FrequencyStandardType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FrequencyStandardType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FrequencyStandardType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FrequencyStandardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'standardType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 189, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FrequencyStandardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inputFrequency')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 190, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FrequencyStandardType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 191, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(FrequencyStandardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(FrequencyStandardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(FrequencyStandardType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FrequencyStandardType._Automaton = _BuildAutomaton_16()




SurveyedLocalTieType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=SurveyedLocalTieType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

SurveyedLocalTieType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=SurveyedLocalTieType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

SurveyedLocalTieType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=SurveyedLocalTieType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

SurveyedLocalTieType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tiedMarkerName'), pyxb.binding.datatypes.string, scope=SurveyedLocalTieType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 247, 20)))

SurveyedLocalTieType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tiedMarkerUsage'), pyxb.binding.datatypes.string, scope=SurveyedLocalTieType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 248, 20)))

SurveyedLocalTieType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tiedMarkerCDPNumber'), pyxb.binding.datatypes.string, scope=SurveyedLocalTieType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 249, 20)))

SurveyedLocalTieType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tiedMarkerDOMESNumber'), pyxb.binding.datatypes.string, scope=SurveyedLocalTieType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 250, 20)))

SurveyedLocalTieType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'differentialComponentsGNSSMarkerToTiedMonumentITRS'), CTD_ANON_, scope=SurveyedLocalTieType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 251, 20)))

SurveyedLocalTieType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'localSiteTiesAccuracy'), pyxb.binding.datatypes.double, nillable=pyxb.binding.datatypes.boolean(1), scope=SurveyedLocalTieType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 260, 20)))

SurveyedLocalTieType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surveyMethod'), pyxb.binding.datatypes.string, scope=SurveyedLocalTieType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 261, 20)))

SurveyedLocalTieType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateMeasured'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=SurveyedLocalTieType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 262, 20)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tiedMarkerName')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 247, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tiedMarkerUsage')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 248, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tiedMarkerCDPNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 249, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tiedMarkerDOMESNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 250, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'differentialComponentsGNSSMarkerToTiedMonumentITRS')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 251, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'localSiteTiesAccuracy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 260, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surveyMethod')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 261, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateMeasured')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 262, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SurveyedLocalTieType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SurveyedLocalTieType._Automaton = _BuildAutomaton_17()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dx'), pyxb.binding.datatypes.double, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 254, 32)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dy'), pyxb.binding.datatypes.double, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 255, 32)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dz'), pyxb.binding.datatypes.double, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 256, 32)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dx')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 254, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 255, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dz')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 256, 32))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_18()




gnssReceiverPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=gnssReceiverPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

gnssReceiverPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=gnssReceiverPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

gnssReceiverPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=gnssReceiverPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

gnssReceiverPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GnssReceiver'), GnssReceiverType, scope=gnssReceiverPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 302, 4)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 316, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(gnssReceiverPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GnssReceiver')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 317, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(gnssReceiverPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(gnssReceiverPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(gnssReceiverPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
gnssReceiverPropertyType._Automaton = _BuildAutomaton_19()




gnssAntennaPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=gnssAntennaPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

gnssAntennaPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=gnssAntennaPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

gnssAntennaPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=gnssAntennaPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

gnssAntennaPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GnssAntenna'), GnssAntennaType, scope=gnssAntennaPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 303, 4)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 326, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(gnssAntennaPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GnssAntenna')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 327, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(gnssAntennaPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(gnssAntennaPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(gnssAntennaPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
gnssAntennaPropertyType._Automaton = _BuildAutomaton_20()




humiditySensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=humiditySensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

humiditySensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=humiditySensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

humiditySensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=humiditySensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

humiditySensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HumiditySensor'), HumiditySensorType, scope=humiditySensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 304, 4)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 336, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(humiditySensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HumiditySensor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 337, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(humiditySensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(humiditySensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(humiditySensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
humiditySensorPropertyType._Automaton = _BuildAutomaton_21()




pressureSensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=pressureSensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

pressureSensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=pressureSensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

pressureSensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=pressureSensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

pressureSensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PressureSensor'), PressureSensorType, scope=pressureSensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 305, 4)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 346, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(pressureSensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PressureSensor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 347, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(pressureSensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(pressureSensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(pressureSensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
pressureSensorPropertyType._Automaton = _BuildAutomaton_22()




temperatureSensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=temperatureSensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

temperatureSensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=temperatureSensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

temperatureSensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=temperatureSensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

temperatureSensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TemperatureSensor'), TemperatureSensorType, scope=temperatureSensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 306, 4)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 356, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(temperatureSensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TemperatureSensor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 357, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(temperatureSensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(temperatureSensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(temperatureSensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
temperatureSensorPropertyType._Automaton = _BuildAutomaton_23()




waterVaporSensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=waterVaporSensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

waterVaporSensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=waterVaporSensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

waterVaporSensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=waterVaporSensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

waterVaporSensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WaterVaporSensor'), WaterVaporSensorType, scope=waterVaporSensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 307, 4)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 366, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(waterVaporSensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WaterVaporSensor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 367, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(waterVaporSensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(waterVaporSensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(waterVaporSensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
waterVaporSensorPropertyType._Automaton = _BuildAutomaton_24()




otherInstrumentationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=otherInstrumentationPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

otherInstrumentationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=otherInstrumentationPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

otherInstrumentationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=otherInstrumentationPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

otherInstrumentationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OtherInstrumentation'), OtherInstrumentationType, scope=otherInstrumentationPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 308, 4)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 376, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(otherInstrumentationPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OtherInstrumentation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 377, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(otherInstrumentationPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(otherInstrumentationPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(otherInstrumentationPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
otherInstrumentationPropertyType._Automaton = _BuildAutomaton_25()




gnssRadomePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=gnssRadomePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

gnssRadomePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=gnssRadomePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

gnssRadomePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=gnssRadomePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

gnssRadomePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GnssRadome'), GnssRadomeType, scope=gnssRadomePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 301, 4)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 386, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(gnssRadomePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GnssRadome')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 387, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(gnssRadomePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(gnssRadomePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(gnssRadomePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
gnssRadomePropertyType._Automaton = _BuildAutomaton_26()




surveyedLocalTiePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=surveyedLocalTiePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

surveyedLocalTiePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=surveyedLocalTiePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

surveyedLocalTiePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=surveyedLocalTiePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

surveyedLocalTiePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TieMeasurement'), TieMeasurementType, scope=surveyedLocalTiePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 309, 4)))

surveyedLocalTiePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SurveyedLocalTie'), SurveyedLocalTieType, scope=surveyedLocalTiePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 310, 4)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 396, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(surveyedLocalTiePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SurveyedLocalTie')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 397, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(surveyedLocalTiePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TieMeasurement')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 398, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(surveyedLocalTiePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(surveyedLocalTiePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(surveyedLocalTiePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
surveyedLocalTiePropertyType._Automaton = _BuildAutomaton_27()




frequencyStandardPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=frequencyStandardPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

frequencyStandardPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=frequencyStandardPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

frequencyStandardPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=frequencyStandardPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

frequencyStandardPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=frequencyStandardPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

frequencyStandardPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=frequencyStandardPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

frequencyStandardPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=frequencyStandardPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

frequencyStandardPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyStandard'), FrequencyStandardType, scope=frequencyStandardPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 311, 4)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 407, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(frequencyStandardPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyStandard')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 408, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(frequencyStandardPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(frequencyStandardPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(frequencyStandardPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(frequencyStandardPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(frequencyStandardPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(frequencyStandardPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
frequencyStandardPropertyType._Automaton = _BuildAutomaton_28()




collocationInformationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=collocationInformationPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

collocationInformationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=collocationInformationPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

collocationInformationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=collocationInformationPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

collocationInformationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CollocationInformation'), CollocationInformationType, scope=collocationInformationPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 312, 4)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 418, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(collocationInformationPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CollocationInformation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 419, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(collocationInformationPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(collocationInformationPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(collocationInformationPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
collocationInformationPropertyType._Automaton = _BuildAutomaton_29()




SetupPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Setup'), SetupType, scope=SetupPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 24, 4)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 18, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SetupPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Setup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 19, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SetupPropertyType._Automaton = _BuildAutomaton_30()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SetupInstance'), SetupInstanceType, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 44, 4)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SetupInstance')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 34, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_31()




SensorPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Sensor'), SensorType, scope=SensorPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 71, 4)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 65, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SensorPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Sensor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 66, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SensorPropertyType._Automaton = _BuildAutomaton_32()




SensorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=SensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 77, 20)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 77, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 77, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SensorType._Automaton = _BuildAutomaton_33()




ObservationQualityPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractObservationQuality'), AbstractObservationQualityType, abstract=pyxb.binding.datatypes.boolean(1), scope=ObservationQualityPropertyType, documentation='Abstract class to contain observation-specific environment quality. For example, GNSS node quality.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 90, 4)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 84, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ObservationQualityPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractObservationQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 85, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ObservationQualityPropertyType._Automaton = _BuildAutomaton_34()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNSSObservationQualityInstance'), GNSSObservationQualityInstanceType, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 130, 4)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNSSObservationQualityInstance')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 121, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_35()




GeodesyMLPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeodesyML'), GeodesyMLType, scope=GeodesyMLPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 33, 4)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 27, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GeodesyMLPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeodesyML')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 28, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
GeodesyMLPropertyType._Automaton = _BuildAutomaton_36()




GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'AbstractCRS'), pyxb.bundles.opengis.gml_3_2.AbstractCRSType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeodesyMLType, documentation='gml:AbstractCRS specifies a coordinate reference system which is usually single but may be compound. This abstract complex type shall not be used, extended, or restricted, in a GML Application Schema, to define a concrete subtype with a meaning equivalent to a concrete subtype specified in this document.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/referenceSystems.xsd', 30, 1)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=GeodesyMLType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Instrument'), InstrumentType, scope=GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 110, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Document'), DocumentType, scope=GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/document.xsd', 21, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Setup'), SetupType, scope=GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 24, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Sensor'), SensorType, scope=GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 71, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionSource'), AbstractPositionSourceType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeodesyMLType, documentation='Version 0.2.2: Define an abstract type to encapsulate the inputs and outputs of an "instance" of a coordinate operation. This instance is recorded to maintain the traceable lineage of a Position value.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 74, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionEstimator'), AbstractPositionEstimatorType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeodesyMLType, documentation='Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of estimators. Extends AbstractCoordinateOperation. gml:targetCRS and gml:sourceCRS have been removed.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 93, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementSource'), AbstractMeasurementSourceType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeodesyMLType, documentation='Version 0.2.2: Encapsulates measurement operation and the operands/results that define the operation event.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 391, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementOperation'), AbstractMeasurementOperationType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeodesyMLType, documentation='Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of estimators.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 427, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionSource'), AbstractDefinitionSourceType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeodesyMLType, documentation='Version 0.2.2: Define an abstract type to encapsulate the inputs and outputs of an "instance" of a coordinate operation. This instance is recorded to maintain the traceable lineage of a Position value.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 485, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionOperation'), AbstractDefinitionOperationType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeodesyMLType, documentation='Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of definitons.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 521, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurement'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 25, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Site'), SiteType, scope=GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 63, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Monument'), MonumentType, scope=GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 79, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SupplementaryMark'), SupplementaryMarkType, scope=GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 105, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractSiteLog'), AbstractSiteLogType, abstract=pyxb.binding.datatypes.boolean(1), scope=GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 120, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteVisit'), SiteVisitType, scope=GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 132, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Node'), NodeType, scope=GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 203, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PositionPairCovariance'), PositionPairCovarianceType, scope=GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 298, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractPosition'), pyxb.binding.datatypes.anyType, scope=GeodesyMLType, documentation='\n                A Position element contains information about a 1d, 2d, or 3d position for a node.  In general a different position record is used for each datum and source.  For example if a 3d adjustment was the source a single 3d position record (e.g. lat, lon, ellipsoid ht) could be used. If there was an AHD height determined this would be a separate 1d position record.\n            ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 358, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Project'), ProjectType, scope=GeodesyMLType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 22, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TerrestrialReferenceFrame'), TerrestrialReferenceFrameType, scope=GeodesyMLType, documentation='A terrestrial reference frame is a geodetic reference frame (or geodetic datum in previous GML parlance) in which the coordinates of reference or definition monuments are allowed to move. In essence, a terrestrial reference frame is continuously "realised" with the regular addition of new observations on a weekly or daily time scale. To use a terrestrial reference frame, up-to-date transformation products must be available to propagate coordinates and their uncertanties between epochs and between frames.\n            \n            To derive a static reference frame (a GML datum) from a terrestrial reference frame and a dynamic transformation, the source and target epochs of the dynamic transformation are required to compute coordinates in the realisation epoch of the static reference frame.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 21, 4)))

GeodesyMLType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DynamicTransformation'), DynamicTransformationType, scope=GeodesyMLType, documentation='A dynamic transformation is a coordinate transformation between reference frames where at least one of which is a dynamic or terrestrial reference frame. To derive a static reference frame (a GML datum) from a terrestrial reference frame and a dynamic transformation, either the source and target epochs OR the source epoch and a relative time quantity parameter of the dynamic transformation are required to compute coordinates in the realisation epoch of the static reference frame.\n\nA transformation between reference frames in the static sense requires no temporal parameters. That is, a static reference frame (SRF) such as GDA94 can be transformed to another SRF like AGD66 with seven spatial parameters and no temporal parameters. In contrast, a dynamic reference frame (DRF) such as ITRF2008 (or the upcoming ITRF2014) requires temporal parameters to be transformed to a SRF and vice versa, and this results in the 14-parameter transformation comprised of 7 spatial and 7 temporal-spatial parameters. A fundamental requirement of the 14-parameter transformation is the provision of a time vector relative to the realisation epoch of the dynamic frame. See Dawson & Woods (2010).', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 63, 4)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 39, 20))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 39, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Node')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 41, 24))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractPosition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 42, 24))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PositionPairCovariance')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 43, 24))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Site')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 44, 24))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteVisit')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 45, 24))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Monument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 46, 24))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SupplementaryMark')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 47, 24))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurement')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 48, 24))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Instrument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 49, 24))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Sensor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 50, 24))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 51, 24))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionEstimator')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 52, 24))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 53, 24))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementOperation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 54, 24))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 55, 24))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionOperation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 56, 24))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSiteLog')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 57, 24))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Project')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 58, 24))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Document')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 59, 24))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Setup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 60, 24))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TerrestrialReferenceFrame')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 61, 24))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DynamicTransformation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 62, 24))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodesyMLType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'AbstractCRS')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodesyML.xsd', 63, 24))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    st_30._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GeodesyMLType._Automaton = _BuildAutomaton_37()




geodeticEquipmentItemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=geodeticEquipmentItemPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

geodeticEquipmentItemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=geodeticEquipmentItemPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

geodeticEquipmentItemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=geodeticEquipmentItemPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

geodeticEquipmentItemPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'geodeticEquipmentItem'), baseGeodeticEquipmentType, scope=geodeticEquipmentItemPropertyType, documentation='\n         Provides a base non-instantiable element type whose\n         structure is a derived complex type.  This element\n         can then be referenced as a substitutionGroup for\n         equipment cataloges and such.\n            ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 37, 4)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 30, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(geodeticEquipmentItemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geodeticEquipmentItem')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 31, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(geodeticEquipmentItemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(geodeticEquipmentItemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(geodeticEquipmentItemPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
geodeticEquipmentItemPropertyType._Automaton = _BuildAutomaton_38()




gnssAntennaConfigType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'antennaCableLengthMeters'), STD_ANON, scope=gnssAntennaConfigType, documentation='\n            Refers to the length (in meters) of the cable\n            used to connect the antenna to other gnss equipment\n            (typically a gnss receiver or set of receivers).\n                    ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 117, 12)))

gnssAntennaConfigType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'antennaCableType'), pyxb.binding.datatypes.string, scope=gnssAntennaConfigType, documentation='\n            Refers to the type of cable\n            used to connect the antenna to other gnss equipment\n            (typically a gnss receiver or set of receivers).\n                    ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 132, 12)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=2, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 116, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 117, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 132, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(gnssAntennaConfigType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'antennaCableLengthMeters')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 117, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(gnssAntennaConfigType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'antennaCableType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 132, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
gnssAntennaConfigType._Automaton = _BuildAutomaton_39()




gnssAntennaHeightMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'unitOfMeasure'), pyxb.bundles.opengis.gml_3_2.UnitOfMeasureType, scope=gnssAntennaHeightMeasurementType, documentation='The element gml:unitOfMeasure is a property element to refer to a unit of measure. This is an empty element which carries a reference to a unit of measure definition.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/units.xsd', 21, 1)))

gnssAntennaHeightMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType, scope=gnssAntennaHeightMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 153, 12), unicode_default='vertical'))

gnssAntennaHeightMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), STD_ANON_, scope=gnssAntennaHeightMeasurementType, documentation='\n            Refers to the distance (+|-) between the geodetic\n            reference point of the associated monument, and a\n            chosen reference point on the antenna.\n                    ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 154, 12)))

gnssAntennaHeightMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'referencePoint'), pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType, scope=gnssAntennaHeightMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 170, 12), unicode_default='BPA'))

gnssAntennaHeightMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateAndTimeUTC'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=gnssAntennaHeightMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 171, 12)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=5, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 152, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 153, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 169, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 170, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 171, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(gnssAntennaHeightMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 153, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(gnssAntennaHeightMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 154, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(gnssAntennaHeightMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'unitOfMeasure')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 169, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(gnssAntennaHeightMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'referencePoint')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 170, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(gnssAntennaHeightMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateAndTimeUTC')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 171, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
gnssAntennaHeightMeasurementType._Automaton = _BuildAutomaton_40()




gnssRadomeConfigType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'radomeFastenerType'), pyxb.binding.datatypes.string, scope=gnssRadomeConfigType, documentation='\n            Refers to the type of fasteners used to secure a radome\n            in place.  This is pretty much a bogus data field\n            intended for future compatibility purposes.\n          ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 212, 12)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 211, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 212, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(gnssRadomeConfigType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'radomeFastenerType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 212, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
gnssRadomeConfigType._Automaton = _BuildAutomaton_41()




gnssReceiverConfigType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'satelliteSystem'), pyxb.bundles.opengis.gml_3_2.CodeListType, scope=gnssReceiverConfigType, documentation='\n                        Refers to a satellite\n                        constellation being observed by a gnss receiver.\n                    ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 265, 12)))

gnssReceiverConfigType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'firmwareVersion'), pyxb.binding.datatypes.string, scope=gnssReceiverConfigType, documentation='\n                        Refers to the manufacturer-\n                        designated version of the firmware installed\n                        on a gnss receiver.\n                    ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 273, 12)))

gnssReceiverConfigType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'elevationCutoff'), pyxb.binding.datatypes.string, scope=gnssReceiverConfigType, documentation='\n                        Refers to the elevation mask (or cutoff)\n                        used on a gnss receiver.\n                    ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 282, 12)))

gnssReceiverConfigType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'temperatureStabilization'), pyxb.binding.datatypes.string, scope=gnssReceiverConfigType, documentation='\n                        Refers to the temperature stabilization\n                        on a gnss receiver.\n                    ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 290, 12)))

gnssReceiverConfigType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sampleIntervalInSeconds'), STD_ANON_2, scope=gnssReceiverConfigType, documentation='\n                        Refers to the sampling interval with which\n                        observations are made with respect to the observed\n                        constellation(s) of satellite(s).\n                    ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 298, 12)))

gnssReceiverConfigType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nativeBaudRateInBPS'), STD_ANON_3, scope=gnssReceiverConfigType, documentation='\n                        Refers to the sampling interval with which\n                        observations are made with respect to the observed\n                        constellation(s) of satellite(s).\n                    ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 313, 12)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=6, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 264, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 265, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 273, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 282, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 290, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 298, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 313, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(gnssReceiverConfigType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'satelliteSystem')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 265, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(gnssReceiverConfigType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'firmwareVersion')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 273, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(gnssReceiverConfigType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'elevationCutoff')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 282, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(gnssReceiverConfigType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'temperatureStabilization')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 290, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(gnssReceiverConfigType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sampleIntervalInSeconds')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 298, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(gnssReceiverConfigType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nativeBaudRateInBPS')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 313, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
gnssReceiverConfigType._Automaton = _BuildAutomaton_42()




geodeticMonumentPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'geodeticMonument'), baseGeodeticMonumentType, scope=geodeticMonumentPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 32, 4)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 35, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(geodeticMonumentPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geodeticMonument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 36, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
geodeticMonumentPropertyType._Automaton = _BuildAutomaton_43()




baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 53, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commonName'), pyxb.binding.datatypes.string, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 55, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'characterIdentifier'), STD_ANON_4, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 57, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'inscription'), pyxb.binding.datatypes.string, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 65, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'iersDomesNumber'), pyxb.binding.datatypes.string, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 67, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cdpNumber'), pyxb.binding.datatypes.string, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 69, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ngsPID'), STD_ANON_5, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 71, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'verbalLocation'), pyxb.binding.datatypes.string, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 79, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'geodeticPosition'), PositionPropertyType, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 81, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'nearestCity'), pyxb.binding.datatypes.string, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 115, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'territory'), pyxb.binding.datatypes.string, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 117, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'country'), pyxb.binding.datatypes.string, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 119, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monumentHeight'), STD_ANON_6, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 121, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monumentFoundation'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 131, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monumentFoundationDepth'), STD_ANON_7, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 133, 20)))

baseGeodeticMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'geologicCharacteristics'), pyxb.binding.datatypes.string, scope=baseGeodeticMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 142, 20)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 53, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 55, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 65, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 67, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 69, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 71, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 79, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 115, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 117, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 121, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 131, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 133, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 142, 20))
    counters.add(cc_19)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 53, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commonName')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 55, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'characterIdentifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 57, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inscription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 65, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'iersDomesNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 67, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cdpNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 69, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ngsPID')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 71, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'verbalLocation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 79, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geodeticPosition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 81, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'nearestCity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 115, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'territory')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 117, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'country')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 119, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monumentHeight')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 121, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monumentFoundation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 131, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monumentFoundationDepth')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 133, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(baseGeodeticMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geologicCharacteristics')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticMonument.xsd', 142, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_22._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
baseGeodeticMonumentType._Automaton = _BuildAutomaton_44()




AbstractSourcePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractSource'), AbstractSourceType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractSourcePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 27, 4)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 21, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSourcePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 22, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractSourcePropertyType._Automaton = _BuildAutomaton_45()




AbstractSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=AbstractSourceType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

AbstractSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=AbstractSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

AbstractSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=AbstractSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

AbstractSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=AbstractSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

AbstractSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'runDate'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=AbstractSourceType, documentation='Date and time this operation was run.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20)))

AbstractSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'runBy'), pyxb.bundles.opengis.iso19139.v20070417.gmd.CI_ResponsibleParty_PropertyType, scope=AbstractSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20)))

AbstractSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'operands'), CTD_ANON_4, scope=AbstractSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20)))

AbstractSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'results'), CTD_ANON_5, scope=AbstractSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 36, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operands')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'results')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractSourceType._Automaton = _BuildAutomaton_46()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractOperand'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 184, 4)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractOperand')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 50, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_47()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractResult'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 186, 4)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractResult')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 57, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_48()




AbstractPositionSourcePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionSource'), AbstractPositionSourceType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractPositionSourcePropertyType, documentation='Version 0.2.2: Define an abstract type to encapsulate the inputs and outputs of an "instance" of a coordinate operation. This instance is recorded to maintain the traceable lineage of a Position value.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 74, 4)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 68, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourcePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractPositionSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 69, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractPositionSourcePropertyType._Automaton = _BuildAutomaton_49()




def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 104, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 105, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 106, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 108, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 111, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 114, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 116, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 117, 24))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 104, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 105, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 106, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 107, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 108, 24))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'remarks')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 111, 24))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'domainOfValidity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 114, 24))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractPositionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'scope')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 115, 24))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AbstractPositionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'operationVersion')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 116, 24))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AbstractPositionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'coordinateOperationAccuracy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 117, 24))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractPositionEstimatorType._Automaton = _BuildAutomaton_50()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 171, 32)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processReference'), pyxb.bundles.opengis.gml_3_2.ReferenceType, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 172, 32)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processValue'), ValueType, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 173, 32)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 172, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 173, 32))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 171, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 172, 32))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processValue')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 173, 32))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_51()




AnyOperandType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=AnyOperandType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

AnyOperandType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=AnyOperandType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

AnyOperandType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=AnyOperandType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

AnyOperandType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=AnyOperandType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 192, 12)))

AnyOperandType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), pyxb.binding.datatypes.anyType, scope=AnyOperandType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 193, 12)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 192, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 193, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AnyOperandType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 192, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AnyOperandType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 193, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AnyOperandType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AnyOperandType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AnyOperandType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AnyOperandType._Automaton = _BuildAutomaton_52()




AnyResultType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=AnyResultType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

AnyResultType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=AnyResultType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

AnyResultType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=AnyResultType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

AnyResultType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=AnyResultType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 202, 12)))

AnyResultType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), pyxb.binding.datatypes.anyType, scope=AnyResultType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 203, 12)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 202, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 203, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AnyResultType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 202, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AnyResultType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 203, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AnyResultType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AnyResultType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AnyResultType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AnyResultType._Automaton = _BuildAutomaton_53()




adjustmentMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=adjustmentMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

adjustmentMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=adjustmentMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

adjustmentMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=adjustmentMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

adjustmentMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usesMeasurement'), AbstractMeasurementPropertyType, scope=adjustmentMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 238, 12)))

adjustmentMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar'), ValueType, scope=adjustmentMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 239, 12)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 239, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(adjustmentMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usesMeasurement')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 238, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(adjustmentMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 239, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(adjustmentMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(adjustmentMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(adjustmentMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
adjustmentMeasurementType._Automaton = _BuildAutomaton_54()




adjustedPositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=adjustedPositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

adjustedPositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=adjustedPositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

adjustedPositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=adjustedPositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

adjustedPositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usesPosition'), PositionPropertyType, scope=adjustedPositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 259, 12)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(adjustedPositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usesPosition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 259, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(adjustedPositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(adjustedPositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(adjustedPositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
adjustedPositionType._Automaton = _BuildAutomaton_55()




adjustedPositionQualityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=adjustedPositionQualityType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

adjustedPositionQualityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=adjustedPositionQualityType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

adjustedPositionQualityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=adjustedPositionQualityType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

adjustedPositionQualityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atPosition'), pyxb.bundles.opengis.gml_3_2.ReferenceType, scope=adjustedPositionQualityType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 272, 12)))

adjustedPositionQualityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'toPosition'), pyxb.bundles.opengis.gml_3_2.ReferenceType, scope=adjustedPositionQualityType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 273, 12)))

adjustedPositionQualityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), ValueType, scope=adjustedPositionQualityType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 274, 12)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(adjustedPositionQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atPosition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 272, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(adjustedPositionQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'toPosition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 273, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(adjustedPositionQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 274, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(adjustedPositionQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(adjustedPositionQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(adjustedPositionQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
adjustedPositionQualityType._Automaton = _BuildAutomaton_56()




adjustedMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atLine'), pyxb.bundles.opengis.gml_3_2.ReferenceType, scope=adjustedMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 288, 16)))

adjustedMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atPoint'), pyxb.bundles.opengis.gml_3_2.ReferenceType, scope=adjustedMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 289, 16)))

adjustedMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adjustmentValue'), ValueType, scope=adjustedMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 291, 12)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(adjustedMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atLine')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 288, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(adjustedMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atPoint')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 289, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(adjustedMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'adjustmentValue')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 291, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
adjustedMeasurementType._Automaton = _BuildAutomaton_57()




transformationPositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Position'), PositionType, scope=transformationPositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 366, 4)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(transformationPositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Position')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 326, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
transformationPositionType._Automaton = _BuildAutomaton_58()




transformationMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurement'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=transformationMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 25, 4)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(transformationMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurement')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 338, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
transformationMeasurementType._Automaton = _BuildAutomaton_59()




transformedPositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Position'), PositionType, scope=transformedPositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 366, 4)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(transformedPositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Position')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 350, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
transformedPositionType._Automaton = _BuildAutomaton_60()




transformedMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurement'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=transformedMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 25, 4)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(transformedMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurement')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 362, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
transformedMeasurementType._Automaton = _BuildAutomaton_61()




AbstractMeasurementSourcePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementSource'), AbstractMeasurementSourceType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractMeasurementSourcePropertyType, documentation='Version 0.2.2: Encapsulates measurement operation and the operands/results that define the operation event.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 391, 4)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 385, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourcePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 386, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractMeasurementSourcePropertyType._Automaton = _BuildAutomaton_62()




AbstractMeasurementOperationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'procedure'), pyxb.bundles.opengis.om_2_0.OM_ProcessPropertyType, scope=AbstractMeasurementOperationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 441, 20)))

AbstractMeasurementOperationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReductionMethod'), pyxb.binding.datatypes.string, scope=AbstractMeasurementOperationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 476, 4)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 35, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 36, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 37, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 39, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 49, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 440, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 441, 20))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 35, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 36, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 37, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 38, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 39, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'remarks')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 49, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementOperationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReductionMethod')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 440, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementOperationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'procedure')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 441, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractMeasurementOperationType._Automaton = _BuildAutomaton_63()




MeasurementOperationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementOperation'), AbstractMeasurementOperationType, abstract=pyxb.binding.datatypes.boolean(1), scope=MeasurementOperationPropertyType, documentation='Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of estimators.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 427, 4)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 451, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementOperationPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurementOperation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 452, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MeasurementOperationPropertyType._Automaton = _BuildAutomaton_64()




AbstractDefinitionSourcePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionSource'), AbstractDefinitionSourceType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractDefinitionSourcePropertyType, documentation='Version 0.2.2: Define an abstract type to encapsulate the inputs and outputs of an "instance" of a coordinate operation. This instance is recorded to maintain the traceable lineage of a Position value.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 485, 4)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 479, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourcePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 480, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractDefinitionSourcePropertyType._Automaton = _BuildAutomaton_65()




def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 35, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 36, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 37, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 39, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 49, 5))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 35, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 36, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 37, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 38, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 39, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionOperationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'remarks')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 49, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractDefinitionOperationType._Automaton = _BuildAutomaton_66()




DefinitionOperationPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionOperation'), AbstractDefinitionOperationType, abstract=pyxb.binding.datatypes.boolean(1), scope=DefinitionOperationPropertyType, documentation='Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of definitons.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 521, 4)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 542, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DefinitionOperationPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionOperation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 543, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DefinitionOperationPropertyType._Automaton = _BuildAutomaton_67()




InterpolatedValueSourcePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpolatedValueSource'), InterpolatedValueSourceType, scope=InterpolatedValueSourcePropertyType, documentation='Version 0.2.2: Define an abstract type to encapsulate the operands, results and process of the operation event that produced an interpolated value.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 569, 4)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 563, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourcePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpolatedValueSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 564, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
InterpolatedValueSourcePropertyType._Automaton = _BuildAutomaton_68()




ObservationQualitySourcePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationQualitySource'), ObservationQualitySourceType, scope=ObservationQualitySourcePropertyType, documentation='Version 0.2.2: Define an abstract type to encapsulate the operands, results and process of the operation event that produced observation quality meta-data.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 595, 4)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 589, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourcePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationQualitySource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 590, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ObservationQualitySourcePropertyType._Automaton = _BuildAutomaton_69()




basePossibleProblemSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=basePossibleProblemSourceType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

basePossibleProblemSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'possibleProblemSource'), pyxb.binding.datatypes.string, scope=basePossibleProblemSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 32, 20)))

basePossibleProblemSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=basePossibleProblemSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 34, 20)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(basePossibleProblemSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(basePossibleProblemSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(basePossibleProblemSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(basePossibleProblemSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(basePossibleProblemSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(basePossibleProblemSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(basePossibleProblemSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(basePossibleProblemSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'possibleProblemSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 32, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(basePossibleProblemSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 33, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(basePossibleProblemSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 34, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
basePossibleProblemSourceType._Automaton = _BuildAutomaton_70()




localEpisodicEffectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=localEpisodicEffectType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

localEpisodicEffectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'event'), pyxb.binding.datatypes.string, scope=localEpisodicEffectType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 80, 20)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(localEpisodicEffectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(localEpisodicEffectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(localEpisodicEffectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(localEpisodicEffectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(localEpisodicEffectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(localEpisodicEffectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(localEpisodicEffectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(localEpisodicEffectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 79, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(localEpisodicEffectType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'event')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 80, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
localEpisodicEffectType._Automaton = _BuildAutomaton_71()




multipathSourcePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=multipathSourcePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

multipathSourcePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=multipathSourcePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

multipathSourcePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=multipathSourcePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

multipathSourcePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultipathSource'), multipathSourceType, scope=multipathSourcePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 86, 4)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 93, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multipathSourcePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MultipathSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 94, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(multipathSourcePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(multipathSourcePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(multipathSourcePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
multipathSourcePropertyType._Automaton = _BuildAutomaton_72()




signalObstructionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=signalObstructionPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

signalObstructionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=signalObstructionPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

signalObstructionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=signalObstructionPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

signalObstructionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SignalObstruction'), signalObstructionType, scope=signalObstructionPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 87, 4)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 103, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(signalObstructionPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SignalObstruction')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 104, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(signalObstructionPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(signalObstructionPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(signalObstructionPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
signalObstructionPropertyType._Automaton = _BuildAutomaton_73()




radioInterferencePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=radioInterferencePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

radioInterferencePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=radioInterferencePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

radioInterferencePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=radioInterferencePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

radioInterferencePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RadioInterference'), radioInterferenceType, scope=radioInterferencePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 88, 4)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 113, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(radioInterferencePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RadioInterference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 114, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(radioInterferencePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(radioInterferencePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(radioInterferencePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
radioInterferencePropertyType._Automaton = _BuildAutomaton_74()




localEpisodicEffectPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInserted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=localEpisodicEffectPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16)))

localEpisodicEffectPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=localEpisodicEffectPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16)))

localEpisodicEffectPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'deletedReason'), pyxb.binding.datatypes.string, scope=localEpisodicEffectPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16)))

localEpisodicEffectPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocalEpisodicEffect'), localEpisodicEffectType, scope=localEpisodicEffectPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 89, 4)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 123, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(localEpisodicEffectPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LocalEpisodicEffect')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 124, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(localEpisodicEffectPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInserted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 31, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(localEpisodicEffectPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateDeleted')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 32, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(localEpisodicEffectPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'deletedReason')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 33, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
localEpisodicEffectPropertyType._Automaton = _BuildAutomaton_75()




AbstractMeasurementPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurement'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractMeasurementPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 25, 4)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 19, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractMeasurement')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 20, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractMeasurementPropertyType._Automaton = _BuildAutomaton_76()




AbstractMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=AbstractMeasurementType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

AbstractMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=AbstractMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

AbstractMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=AbstractMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

AbstractMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=AbstractMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

AbstractMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar'), ValueType, scope=AbstractMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20)))

AbstractMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fromProject'), ProjectPropertyType, scope=AbstractMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20)))

AbstractMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'source'), AbstractMeasurementSourcePropertyType, scope=AbstractMeasurementType, documentation='A reference to the source of the measurement. An example is a static GNSS baseline reduction from a pair of RINEX files via baseline processing software. Another example is atmospheric correction of a raw EDM measurement. Optional.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractMeasurementType._Automaton = _BuildAutomaton_77()




MeasurementPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=MeasurementPointType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

MeasurementPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=MeasurementPointType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

MeasurementPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=MeasurementPointType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

MeasurementPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atSetup'), SetupPropertyType, scope=MeasurementPointType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 100, 20)))

MeasurementPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atNode'), NodePropertyType, scope=MeasurementPointType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 101, 20)))

MeasurementPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atHeight'), pyxb.bundles.opengis.gml_3_2.MeasureType, scope=MeasurementPointType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 102, 20)))

MeasurementPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), CTD_ANON_7, scope=MeasurementPointType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 103, 20)))

MeasurementPointType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=MeasurementPointType, documentation='Abstract group for quality values.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 102, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 112, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atSetup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 100, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atNode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 101, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atHeight')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 102, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 103, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 112, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementPointType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MeasurementPointType._Automaton = _BuildAutomaton_78()




MeasurementLineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=MeasurementLineType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

MeasurementLineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=MeasurementLineType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

MeasurementLineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=MeasurementLineType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

MeasurementLineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atSetup'), SetupPropertyType, scope=MeasurementLineType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 123, 20)))

MeasurementLineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'toSetup'), SetupPropertyType, scope=MeasurementLineType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 124, 20)))

MeasurementLineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atNode'), NodePropertyType, scope=MeasurementLineType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 125, 20)))

MeasurementLineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atHeight'), pyxb.bundles.opengis.gml_3_2.MeasureType, scope=MeasurementLineType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 126, 20)))

MeasurementLineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'toNode'), NodePropertyType, scope=MeasurementLineType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 127, 20)))

MeasurementLineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'toHeight'), pyxb.bundles.opengis.gml_3_2.MeasureType, scope=MeasurementLineType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 128, 20)))

MeasurementLineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), CTD_ANON_8, scope=MeasurementLineType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 129, 20)))

MeasurementLineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=MeasurementLineType, documentation='Abstract group for quality values.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 123, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 124, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 126, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 128, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 138, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atSetup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 123, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'toSetup')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 124, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atNode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 125, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atHeight')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 126, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'toNode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 127, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'toHeight')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 128, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 129, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 138, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementLineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MeasurementLineType._Automaton = _BuildAutomaton_79()




MeasurementLineCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=MeasurementLineCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

MeasurementLineCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=MeasurementLineCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

MeasurementLineCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=MeasurementLineCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

MeasurementLineCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atLine'), pyxb.bundles.opengis.gml_3_2.ReferenceType, scope=MeasurementLineCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 152, 20)))

MeasurementLineCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'toLine'), pyxb.bundles.opengis.gml_3_2.ReferenceType, scope=MeasurementLineCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 153, 20)))

MeasurementLineCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=MeasurementLineCovarianceType, documentation='Abstract group for quality values.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atLine')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 152, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementLineCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'toLine')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 153, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MeasurementLineCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 154, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementLineCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementLineCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementLineCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MeasurementLineCovarianceType._Automaton = _BuildAutomaton_80()




MeasurementPointCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=MeasurementPointCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

MeasurementPointCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=MeasurementPointCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

MeasurementPointCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=MeasurementPointCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

MeasurementPointCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atPoint'), pyxb.bundles.opengis.gml_3_2.ReferenceType, scope=MeasurementPointCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 168, 20)))

MeasurementPointCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'toPoint'), pyxb.bundles.opengis.gml_3_2.ReferenceType, scope=MeasurementPointCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 169, 20)))

MeasurementPointCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=MeasurementPointCovarianceType, documentation='Abstract group for quality values.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atPoint')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 168, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementPointCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'toPoint')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 169, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MeasurementPointCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 170, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementPointCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementPointCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementPointCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MeasurementPointCovarianceType._Automaton = _BuildAutomaton_81()




formInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'preparedBy'), pyxb.binding.datatypes.string, scope=formInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 149, 12)))

formInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'datePrepared'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=formInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 150, 12)))

formInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'reportType'), pyxb.binding.datatypes.string, scope=formInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 151, 12)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(formInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'preparedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 149, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(formInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'datePrepared')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 150, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(formInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'reportType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 151, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
formInformationType._Automaton = _BuildAutomaton_82()




moreInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dataCenter'), pyxb.binding.datatypes.string, scope=moreInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 156, 12)))

moreInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'urlForMoreInformation'), pyxb.binding.datatypes.string, scope=moreInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 157, 12)))

moreInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteMap'), pyxb.binding.datatypes.string, scope=moreInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 158, 12)))

moreInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteDiagram'), pyxb.binding.datatypes.string, scope=moreInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 159, 12)))

moreInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'horizonMask'), pyxb.binding.datatypes.string, scope=moreInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 160, 12)))

moreInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monumentDescription'), pyxb.binding.datatypes.string, scope=moreInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 161, 12)))

moreInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sitePictures'), pyxb.binding.datatypes.string, scope=moreInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 162, 12)))

moreInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=moreInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 163, 12)))

moreInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'antennaGraphicsWithDimensions'), pyxb.binding.datatypes.string, scope=moreInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 164, 12)))

moreInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'insertTextGraphicFromAntenna'), pyxb.binding.datatypes.string, scope=moreInformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 165, 12)))

moreInformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DOI'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=moreInformationType, documentation='Data Digital Object Identifier', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 166, 12)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 163, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(moreInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dataCenter')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 156, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(moreInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'urlForMoreInformation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 157, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(moreInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteMap')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 158, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(moreInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteDiagram')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 159, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(moreInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'horizonMask')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 160, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(moreInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monumentDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 161, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(moreInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sitePictures')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 162, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(moreInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 163, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(moreInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'antennaGraphicsWithDimensions')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 164, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(moreInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'insertTextGraphicFromAntenna')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 165, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(moreInformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DOI')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 166, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
moreInformationType._Automaton = _BuildAutomaton_83()




siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteName'), pyxb.binding.datatypes.string, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 175, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fourCharacterID'), pyxb.binding.datatypes.string, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 176, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monumentNumber'), STD_ANON_8, scope=siteIdentificationType, documentation='Number of monuments at the site', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 177, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'receiverNumber'), STD_ANON_9, scope=siteIdentificationType, documentation='Number of receivers at the site', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 187, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monumentInscription'), pyxb.binding.datatypes.string, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 197, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'iersDOMESNumber'), pyxb.binding.datatypes.string, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 198, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cdpNumber'), pyxb.binding.datatypes.string, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 199, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monumentDescription'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 201, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heightOfTheMonument'), pyxb.binding.datatypes.double, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 202, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monumentFoundation'), pyxb.binding.datatypes.string, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 203, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'foundationDepth'), pyxb.binding.datatypes.double, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 204, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'markerDescription'), pyxb.binding.datatypes.string, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 205, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInstalled'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 206, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'geologicCharacteristic'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 208, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bedrockType'), pyxb.binding.datatypes.string, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 209, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bedrockCondition'), pyxb.binding.datatypes.string, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 210, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fractureSpacing'), pyxb.binding.datatypes.string, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 211, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'faultZonesNearby'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 213, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'distance-Activity'), pyxb.binding.datatypes.string, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 214, 12)))

siteIdentificationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=siteIdentificationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 215, 12)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 177, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 187, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 197, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 201, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 202, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 203, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 204, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 205, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 206, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 208, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 209, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 210, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 211, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 213, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 214, 12))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 215, 12))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteName')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 175, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fourCharacterID')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 176, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monumentNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 177, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'receiverNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 187, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monumentInscription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 197, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'iersDOMESNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 198, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cdpNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 199, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monumentDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 201, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heightOfTheMonument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 202, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monumentFoundation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 203, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'foundationDepth')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 204, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'markerDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 205, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInstalled')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 206, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geologicCharacteristic')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 208, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bedrockType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 209, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bedrockCondition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 210, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fractureSpacing')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 211, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'faultZonesNearby')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 213, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'distance-Activity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 214, 12))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(siteIdentificationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 215, 12))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
siteIdentificationType._Automaton = _BuildAutomaton_84()




cartesianPosition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'Point'), pyxb.bundles.opengis.gml_3_2.PointType, scope=cartesianPosition, documentation='A Point is defined by a single coordinate tuple. The direct position of a point is specified by the pos element which is of type DirectPositionType.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 189, 1)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(cartesianPosition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'Point')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 221, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
cartesianPosition._Automaton = _BuildAutomaton_85()




geodeticPosition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'Point'), pyxb.bundles.opengis.gml_3_2.PointType, scope=geodeticPosition, documentation='A Point is defined by a single coordinate tuple. The direct position of a point is specified by the pos element which is of type DirectPositionType.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/geometryBasic0d1d.xsd', 189, 1)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(geodeticPosition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'Point')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 226, 11))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
geodeticPosition._Automaton = _BuildAutomaton_86()




siteLocationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'city'), pyxb.binding.datatypes.string, scope=siteLocationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 232, 12)))

siteLocationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'state'), pyxb.binding.datatypes.string, scope=siteLocationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 233, 12)))

siteLocationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'countryCodeISO'), countryCodeType, scope=siteLocationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 234, 12)))

siteLocationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tectonicPlate'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=siteLocationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 236, 12)))

siteLocationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'approximatePositionITRF'), CTD_ANON_9, scope=siteLocationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 238, 12)))

siteLocationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=siteLocationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 248, 12)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(siteLocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'city')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 232, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(siteLocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'state')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 233, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(siteLocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'countryCodeISO')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 234, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(siteLocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tectonicPlate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 236, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(siteLocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'approximatePositionITRF')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 238, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(siteLocationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 248, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
siteLocationType._Automaton = _BuildAutomaton_87()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cartesianPosition'), cartesianPosition, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 242, 18)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'geodeticPosition'), geodeticPosition, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 243, 18)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 242, 18))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 243, 18))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cartesianPosition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 242, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geodeticPosition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/monumentInfo.xsd', 243, 18))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_88()




AbstractMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=AbstractMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

AbstractMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=AbstractMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

AbstractMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=AbstractMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

AbstractMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType, scope=AbstractMonumentType, documentation='Monument Type Code e.g. STEEL PILLAR', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 24, 20)))

AbstractMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'installedBy'), pyxb.bundles.opengis.iso19139.v20070417.gmd.CI_ResponsibleParty_PropertyType, scope=AbstractMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 34, 20)))

AbstractMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'installedDate'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=AbstractMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 35, 20)))

AbstractMonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Status'), FeatureStatusType, scope=AbstractMonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 29, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 34, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 35, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 24, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 29, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 34, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 35, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractMonumentType._Automaton = _BuildAutomaton_89()




SitePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Site'), SiteType, scope=SitePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 63, 4)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 43, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SitePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Site')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 44, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SitePropertyType._Automaton = _BuildAutomaton_90()




MonumentPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Monument'), MonumentType, scope=MonumentPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 79, 4)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 50, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MonumentPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Monument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 51, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MonumentPropertyType._Automaton = _BuildAutomaton_91()




SupplementaryMarkPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SupplementaryMark'), SupplementaryMarkType, scope=SupplementaryMarkPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 105, 4)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 57, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SupplementaryMark')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 58, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SupplementaryMarkPropertyType._Automaton = _BuildAutomaton_92()




AbstractSiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atSite'), SitePropertyType, scope=AbstractSiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 126, 20)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 126, 20))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AbstractSiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atSite')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 126, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractSiteLogType._Automaton = _BuildAutomaton_93()




SiteVisitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=SiteVisitType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

SiteVisitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=SiteVisitType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

SiteVisitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=SiteVisitType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

SiteVisitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atSite'), SitePropertyType, scope=SiteVisitType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 141, 20)))

SiteVisitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'visitDate'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=SiteVisitType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 142, 20)))

SiteVisitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'visitBy'), pyxb.bundles.opengis.iso19139.v20070417.gmd.CI_ResponsibleParty_PropertyType, scope=SiteVisitType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 143, 20)))

SiteVisitType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'condition'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=SiteVisitType, documentation='Condition of Site found during visit.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 144, 20)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 143, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atSite')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 141, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visitDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 142, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'visitBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 143, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'condition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 144, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SiteVisitType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SiteVisitType._Automaton = _BuildAutomaton_94()




NodePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Node'), NodeType, scope=NodePropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 203, 4)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 197, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(NodePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Node')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 198, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
NodePropertyType._Automaton = _BuildAutomaton_95()




NodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=NodeType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

NodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=NodeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

NodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=NodeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

NodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=NodeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

NodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'aggregationType'), pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType, scope=NodeType, documentation='The aggregation type specifically identifies the business rules that were used to determine the type of movement permissible at this Node for the valid time period.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 221, 20)))

NodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atSite'), SitePropertyType, scope=NodeType, documentation='A Schematron validation must be written to enforce the convention where a geodetic node can have only one atSite, but a cadastral node may have several.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 227, 20)))

NodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Status'), FeatureStatusType, scope=NodeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 220, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 220, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aggregationType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 221, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 226, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atSite')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 227, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(NodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NodeType._Automaton = _BuildAutomaton_96()




FeatureStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'currentStatus'), FeatureStatusInstanceType, scope=FeatureStatusType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 245, 12)))

FeatureStatusType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'history'), CTD_ANON_10, scope=FeatureStatusType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 246, 12)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 246, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FeatureStatusType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'currentStatus')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 245, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FeatureStatusType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'history')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 246, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FeatureStatusType._Automaton = _BuildAutomaton_97()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StatusInstance'), FeatureStatusInstanceType, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 256, 4)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StatusInstance')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 249, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_98()




FeatureStatusInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=FeatureStatusInstanceType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

FeatureStatusInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=FeatureStatusInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

FeatureStatusInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=FeatureStatusInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

FeatureStatusInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=FeatureStatusInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

FeatureStatusInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'statusCode'), pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType, scope=FeatureStatusInstanceType, documentation='Current status of position as sourced from the codeSpace.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 261, 12)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FeatureStatusInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 260, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FeatureStatusInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'statusCode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 261, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FeatureStatusInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FeatureStatusInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FeatureStatusInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FeatureStatusInstanceType._Automaton = _BuildAutomaton_99()




PositionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TimeSlice'), pyxb.bundles.opengis.gml_3_2.ReferenceType, scope=PositionPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 280, 16)))

PositionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Position'), PositionType, scope=PositionPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 366, 4)))

PositionPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PositionTimeSeries'), PositionTimeSeriesType, scope=PositionPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 384, 4)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 275, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 279, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PositionPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Position')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 276, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PositionTimeSeries')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 279, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PositionPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TimeSlice')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 280, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PositionPropertyType._Automaton = _BuildAutomaton_100()




PositionPairCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=PositionPairCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

PositionPairCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=PositionPairCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

PositionPairCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=PositionPairCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

PositionPairCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Status'), FeatureStatusType, scope=PositionPairCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4)))

PositionPairCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'source'), AbstractPositionSourcePropertyType, scope=PositionPairCovarianceType, documentation='Position estimation event that was used to generate the parameters for this position. In the case of a geo:PositionTimeSliceType, this element overrides the source specified in the geo:PositionTimeSeriesType complex type.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12)))

PositionPairCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atPosition'), PositionPropertyType, scope=PositionPairCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 307, 20)))

PositionPairCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'toPosition'), PositionPropertyType, scope=PositionPairCovarianceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 308, 20)))

PositionPairCovarianceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=PositionPairCovarianceType, documentation='Abstract group for quality values.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atPosition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 307, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'toPosition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 308, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 309, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 288, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PositionPairCovarianceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PositionPairCovarianceType._Automaton = _BuildAutomaton_101()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'source'), AbstractPositionSourcePropertyType, scope=CTD_ANON_11, documentation='Position estimation event that was used to generate the parameters for this position. In the case of a geo:PositionTimeSliceType, this element overrides the source specified in the geo:PositionTimeSeriesType complex type.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'velocity'), DirectVelocityType, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 338, 24)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=CTD_ANON_11, documentation='Abstract group for quality values.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'velocity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 338, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 288, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_102()




PositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource'), pyxb.bundles.opengis.gml_3_2.StringOrRefType, scope=PositionType, documentation='Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data. The remote link attributes of the gml:dataSource element have been deprecated along with its current type.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dynamicFeature.xsd', 17, 1)))

PositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=PositionType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

PositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=PositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

PositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=PositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

PositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=PositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

PositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Status'), FeatureStatusType, scope=PositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4)))

PositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'source'), AbstractPositionSourcePropertyType, scope=PositionType, documentation='Position estimation event that was used to generate the parameters for this position. In the case of a geo:PositionTimeSliceType, this element overrides the source specified in the geo:PositionTimeSeriesType complex type.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12)))

PositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coordinates'), pyxb.bundles.opengis.gml_3_2.DirectPositionType, scope=PositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 333, 12)))

PositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hasVelocity'), CTD_ANON_11, scope=PositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 335, 12)))

PositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atNode'), NodePropertyType, scope=PositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 375, 20)))

PositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=PositionType, documentation='Abstract group for quality values.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 55, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 335, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atNode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 375, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 376, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coordinates')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 333, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 54, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 55, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hasVelocity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 335, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 288, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(PositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PositionType._Automaton = _BuildAutomaton_103()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PositionTimeSlice'), PositionTimeSliceType, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 414, 4)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PositionTimeSlice')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 403, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_104()




PositionTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource'), pyxb.bundles.opengis.gml_3_2.StringOrRefType, scope=PositionTimeSliceType, documentation='Evidence is represented by a simple gml:dataSource or gml:dataSourceReference property that indicates the source of the temporal data. The remote link attributes of the gml:dataSource element have been deprecated along with its current type.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dynamicFeature.xsd', 17, 1)))

PositionTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=PositionTimeSliceType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

PositionTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=PositionTimeSliceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

PositionTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=PositionTimeSliceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

PositionTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=PositionTimeSliceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

PositionTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Status'), FeatureStatusType, scope=PositionTimeSliceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4)))

PositionTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'source'), AbstractPositionSourcePropertyType, scope=PositionTimeSliceType, documentation='Position estimation event that was used to generate the parameters for this position. In the case of a geo:PositionTimeSliceType, this element overrides the source specified in the geo:PositionTimeSeriesType complex type.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12)))

PositionTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'coordinates'), pyxb.bundles.opengis.gml_3_2.DirectPositionType, scope=PositionTimeSliceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 333, 12)))

PositionTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hasVelocity'), CTD_ANON_11, scope=PositionTimeSliceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 335, 12)))

PositionTimeSliceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=PositionTimeSliceType, documentation='Abstract group for quality values.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 423, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 55, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 335, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 423, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'coordinates')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 333, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 54, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 55, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hasVelocity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 335, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 288, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 289, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(PositionTimeSliceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PositionTimeSliceType._Automaton = _BuildAutomaton_105()




ProjectPropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Project'), ProjectType, scope=ProjectPropertyType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 22, 4)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 16, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProjectPropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Project')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 17, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProjectPropertyType._Automaton = _BuildAutomaton_106()




ProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=ProjectType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

ProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=ProjectType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

ProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=ProjectType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

ProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'status'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=ProjectType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 28, 20)))

ProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'managedBy'), pyxb.bundles.opengis.iso19139.v20070417.gmd.CI_ResponsibleParty_PropertyType, scope=ProjectType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 29, 20)))

ProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'specifiedBy'), pyxb.bundles.opengis.iso19139.v20070417.gmd.CI_ResponsibleParty_PropertyType, scope=ProjectType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 30, 20)))

ProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'initiatedDate'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=ProjectType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 31, 20)))

ProjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'completedDate'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=ProjectType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 32, 20)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 28, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 29, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 30, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 31, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 32, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_14)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 28, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'managedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 29, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'specifiedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 30, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'initiatedDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 31, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'completedDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/project.xsd', 32, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ProjectType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProjectType._Automaton = _BuildAutomaton_107()




TerrestrialReferenceFramePropertyType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TerrestrialReferenceFrame'), TerrestrialReferenceFrameType, scope=TerrestrialReferenceFramePropertyType, documentation='A terrestrial reference frame is a geodetic reference frame (or geodetic datum in previous GML parlance) in which the coordinates of reference or definition monuments are allowed to move. In essence, a terrestrial reference frame is continuously "realised" with the regular addition of new observations on a weekly or daily time scale. To use a terrestrial reference frame, up-to-date transformation products must be available to propagate coordinates and their uncertanties between epochs and between frames.\n            \n            To derive a static reference frame (a GML datum) from a terrestrial reference frame and a dynamic transformation, the source and target epochs of the dynamic transformation are required to compute coordinates in the realisation epoch of the static reference frame.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 21, 4)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 15, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TerrestrialReferenceFramePropertyType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TerrestrialReferenceFrame')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 16, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TerrestrialReferenceFramePropertyType._Automaton = _BuildAutomaton_108()




def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 34, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 35, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 36, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 38, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 41, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 44, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 46, 24))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TerrestrialReferenceFrameType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 34, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TerrestrialReferenceFrameType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 35, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TerrestrialReferenceFrameType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 36, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TerrestrialReferenceFrameType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 37, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TerrestrialReferenceFrameType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 38, 24))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TerrestrialReferenceFrameType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'remarks')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 41, 24))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TerrestrialReferenceFrameType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'domainOfValidity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 44, 24))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TerrestrialReferenceFrameType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'scope')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 45, 24))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TerrestrialReferenceFrameType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'anchorDefinition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 46, 24))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TerrestrialReferenceFrameType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'realizationEpoch')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 47, 24))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TerrestrialReferenceFrameType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'primeMeridian')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 54, 24))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TerrestrialReferenceFrameType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'ellipsoid')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 55, 24))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TerrestrialReferenceFrameType._Automaton = _BuildAutomaton_109()




DynamicTransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'parameterValue'), pyxb.bundles.opengis.gml_3_2.AbstractGeneralParameterValuePropertyType, scope=DynamicTransformationType, documentation='gml:parameterValue is a composition association to a parameter value or group of parameter values used by a coordinate operation.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 243, 1)))

DynamicTransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sourceEpoch'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=DynamicTransformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 75, 20)))

DynamicTransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'targetEpoch'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=DynamicTransformationType, documentation='The absence of a targetEpoch element implies that this transformation has time-dependent parameters. This is the standard configuration of a 14-parameter transformation whereby the latter 7 parameters are coefficients to a time parameter. A residual velocity map would also implicitly have time-dependent parameters. An example of a dynamic transformation that requires a targetEpoch is a 7-parameter transformation (implying no time-dependent parameters) between two dynamic frames, e.g. ITRF2014 to ITRF2008 at epochs 2014-01-01 and 2008-01-01 respectively.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 76, 20)))

DynamicTransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usesMethod'), pyxb.bundles.opengis.gml_3_2.OperationMethodType, scope=DynamicTransformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 81, 20)))

DynamicTransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'source'), AbstractDefinitionSourcePropertyType, scope=DynamicTransformationType, documentation='An unbounded list of references to the source of each parameter.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 83, 20)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 135, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 136, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 137, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 139, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 140, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 141, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 144, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 76, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 82, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 83, 20))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 135, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 136, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 137, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 138, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 139, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'remarks')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 140, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'domainOfValidity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 141, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'scope')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 142, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'operationVersion')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 143, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'coordinateOperationAccuracy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 144, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'sourceCRS')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 145, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'targetCRS')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 146, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sourceEpoch')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 75, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'targetEpoch')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 76, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usesMethod')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 81, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'parameterValue')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 82, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DynamicTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 83, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DynamicTransformationType._Automaton = _BuildAutomaton_110()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpolatedSingleValue'), InterpolatedSingleValueType, scope=CTD_ANON_13, documentation='The result of an interpolation operation on a gridded transformation or geoid.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 152, 4)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpolatedSingleValue')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 185, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_111()




def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SensorWithCodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SensorWithCodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SensorWithCodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SensorWithCodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SensorWithCodeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SensorWithCodeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 51, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SensorWithCodeType._Automaton = _BuildAutomaton_112()




OtherInstrumentationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=OtherInstrumentationType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

OtherInstrumentationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'instrumentation'), pyxb.binding.datatypes.string, scope=OtherInstrumentationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 212, 20)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherInstrumentationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherInstrumentationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherInstrumentationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherInstrumentationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherInstrumentationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherInstrumentationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherInstrumentationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherInstrumentationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherInstrumentationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OtherInstrumentationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'instrumentation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 212, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OtherInstrumentationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 213, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OtherInstrumentationType._Automaton = _BuildAutomaton_113()




TieMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Tie'), MeasurementLineType, scope=TieMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 273, 20)))

TieMeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'tiePairQuality'), MeasurementLineCovarianceType, scope=TieMeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 274, 20)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 274, 20))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Tie')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 273, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(TieMeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'tiePairQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 274, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TieMeasurementType._Automaton = _BuildAutomaton_114()




SetupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=SetupType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

SetupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=SetupType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

SetupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=SetupType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

SetupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atSite'), SitePropertyType, scope=SetupType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 30, 20)))

SetupType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'history'), CTD_ANON_2, scope=SetupType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 31, 20)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 67, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 68, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 71, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 72, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 73, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 30, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 31, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_14)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 67, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 68, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 71, 24))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 72, 24))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSourceReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 73, 24))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atSite')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 30, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'history')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 31, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SetupType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SetupType._Automaton = _BuildAutomaton_115()




SetupInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=SetupInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

SetupInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=SetupInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

SetupInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=SetupInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

SetupInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fromProject'), ProjectPropertyType, scope=SetupInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 53, 20)))

SetupInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'setupHeight'), ValueType, scope=SetupInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 54, 20)))

SetupInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'observedBy'), pyxb.bundles.opengis.iso19139.v20070417.gmd.CI_ResponsibleParty_PropertyType, scope=SetupInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 55, 20)))

SetupInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usesInstrument'), InstrumentPropertyType, scope=SetupInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 56, 20)))

SetupInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usesSensor'), SensorPropertyType, scope=SetupInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 57, 20)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 55, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 53, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 54, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 55, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 56, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 57, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 54, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 55, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 53, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'setupHeight')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 54, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'observedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 55, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usesInstrument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 56, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usesSensor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 57, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(SetupInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SetupInstanceType._Automaton = _BuildAutomaton_116()




AbstractObservationQualityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=AbstractObservationQualityType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

AbstractObservationQualityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=AbstractObservationQualityType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

AbstractObservationQualityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=AbstractObservationQualityType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

AbstractObservationQualityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atSite'), SitePropertyType, scope=AbstractObservationQualityType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 100, 20)))

AbstractObservationQualityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'source'), ObservationQualitySourcePropertyType, scope=AbstractObservationQualityType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 101, 20)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 67, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 68, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 71, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 72, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 73, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 101, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 67, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 68, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 71, 24))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 72, 24))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSourceReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 73, 24))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atSite')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 100, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 101, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(AbstractObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractObservationQualityType._Automaton = _BuildAutomaton_117()




GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FirstObservedEpoch'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=GNSSObservationQualityInstanceType, documentation='The function of this element and the next may overlap with the ValidTime TimePeriod element inherited by this complexType from AbstractTimeSliceType.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 139, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LastObservedEpoch'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 144, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PossibleEpochs'), pyxb.binding.datatypes.integer, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 145, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservedEpochs'), pyxb.binding.datatypes.integer, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 146, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EpochPercent'), pyxb.binding.datatypes.double, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 147, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'averageMultipathL1'), ValueType, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 148, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AverageMutlipathL2'), ValueType, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 149, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PossibleObservations'), pyxb.binding.datatypes.integer, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 150, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CompleteObservations'), pyxb.binding.datatypes.integer, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 151, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DeletedObservations'), pyxb.binding.datatypes.integer, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 152, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MaskedObservations'), pyxb.binding.datatypes.integer, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 153, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationRate'), ValueType, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 154, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationSlipRatio'), ValueType, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 155, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationsMissingL1'), pyxb.binding.datatypes.integer, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 156, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationsMissingL2'), pyxb.binding.datatypes.integer, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 157, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationsMissingP1orC1'), pyxb.binding.datatypes.integer, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 158, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservatinosMissingP2orC2'), pyxb.binding.datatypes.integer, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 159, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ReceiverTrackingCapability'), pyxb.binding.datatypes.integer, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 160, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TotalSatellites'), pyxb.binding.datatypes.integer, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 161, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MeanS1'), ValueType, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 162, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Means1'), ValueType, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 163, 20)))

GNSSObservationQualityInstanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'source'), ObservationQualitySourcePropertyType, scope=GNSSObservationQualityInstanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 164, 20)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 55, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 164, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 54, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 55, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FirstObservedEpoch')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 139, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LastObservedEpoch')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 144, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PossibleEpochs')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 145, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservedEpochs')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 146, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EpochPercent')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 147, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'averageMultipathL1')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 148, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AverageMutlipathL2')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 149, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PossibleObservations')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 150, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CompleteObservations')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 151, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DeletedObservations')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 152, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MaskedObservations')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 153, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationRate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 154, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationSlipRatio')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 155, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationsMissingL1')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 156, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationsMissingL2')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 157, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationsMissingP1orC1')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 158, 20))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservatinosMissingP2orC2')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 159, 20))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReceiverTrackingCapability')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 160, 20))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TotalSatellites')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 161, 20))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MeanS1')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 162, 20))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Means1')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 163, 20))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 164, 20))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_32 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityInstanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_33 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
         ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
         ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
         ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
         ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
         ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
         ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_33._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GNSSObservationQualityInstanceType._Automaton = _BuildAutomaton_118()




baseGeodeticEquipmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'manufacturerName'), pyxb.binding.datatypes.string, scope=baseGeodeticEquipmentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20)))

baseGeodeticEquipmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'manufacturerModel'), pyxb.binding.datatypes.string, scope=baseGeodeticEquipmentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20)))

baseGeodeticEquipmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'manufacturerPartNumber'), pyxb.binding.datatypes.string, scope=baseGeodeticEquipmentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20)))

baseGeodeticEquipmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'manufacturerDescription'), pyxb.binding.datatypes.string, scope=baseGeodeticEquipmentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20)))

baseGeodeticEquipmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'manufacturerSerialNumber'), pyxb.binding.datatypes.string, scope=baseGeodeticEquipmentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 82, 20)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerName')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerModel')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerPartNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(baseGeodeticEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerSerialNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 82, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
baseGeodeticEquipmentType._Automaton = _BuildAutomaton_119()




AbstractPositionSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'operation'), pyxb.bundles.opengis.gml_3_2.CoordinateOperationPropertyType, scope=AbstractPositionSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 87, 20)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 36, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operands')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'results')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractPositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 87, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractPositionSourceType._Automaton = _BuildAutomaton_120()




PositionEstimatorProcessType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'processStep'), CTD_ANON_6, scope=PositionEstimatorProcessType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 168, 20)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 104, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 105, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 106, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 108, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 111, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 114, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 116, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 117, 24))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionEstimatorProcessType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 104, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionEstimatorProcessType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 105, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionEstimatorProcessType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 106, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionEstimatorProcessType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 107, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionEstimatorProcessType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 108, 24))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionEstimatorProcessType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'remarks')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 111, 24))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionEstimatorProcessType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'domainOfValidity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 114, 24))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionEstimatorProcessType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'scope')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 115, 24))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionEstimatorProcessType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'operationVersion')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 116, 24))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionEstimatorProcessType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'coordinateOperationAccuracy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 117, 24))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PositionEstimatorProcessType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'processStep')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 168, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PositionEstimatorProcessType._Automaton = _BuildAutomaton_121()




adjustmentPositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=adjustmentPositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

adjustmentPositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=adjustmentPositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

adjustmentPositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=adjustmentPositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

adjustmentPositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usesPosition'), PositionPropertyType, scope=adjustmentPositionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 219, 12)))

adjustmentPositionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality'), pyxb.binding.datatypes.anyType, abstract=pyxb.binding.datatypes.boolean(1), scope=adjustmentPositionType, documentation='Abstract group for quality values.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 142, 4)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 220, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(adjustmentPositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usesPosition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 219, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(adjustmentPositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 220, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(adjustmentPositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(adjustmentPositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(adjustmentPositionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
adjustmentPositionType._Automaton = _BuildAutomaton_122()




AbstractMeasurementSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'operation'), MeasurementOperationPropertyType, scope=AbstractMeasurementSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 404, 20)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 36, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operands')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'results')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 404, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractMeasurementSourceType._Automaton = _BuildAutomaton_123()




def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 35, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 36, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 37, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 39, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 49, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 440, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 441, 20))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 35, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 36, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 37, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 38, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 39, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'remarks')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 49, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementEstimatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ReductionMethod')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 440, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AbstractMeasurementEstimatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'procedure')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 441, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractMeasurementEstimatorType._Automaton = _BuildAutomaton_124()




AbstractDefinitionSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionOperation'), AbstractDefinitionOperationType, abstract=pyxb.binding.datatypes.boolean(1), scope=AbstractDefinitionSourceType, documentation='Version 0.2.2: Mirrors the hierarchy of gml:AbstractCoordinateOperation for the purpose of the definition of definitons.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 521, 4)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 36, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operands')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'results')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionOperation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 498, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractDefinitionSourceType._Automaton = _BuildAutomaton_125()




def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 35, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 36, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 37, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 39, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 49, 5))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 35, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 36, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 37, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 38, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 39, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AbstractDefinitionEstimatorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'remarks')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/dictionary.xsd', 49, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractDefinitionEstimatorType._Automaton = _BuildAutomaton_126()




InterpolatedValueSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'definition'), pyxb.bundles.opengis.gml_3_2.DictionaryEntryType, scope=InterpolatedValueSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 582, 20)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 36, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operands')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'results')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterpolatedValueSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'definition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 582, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterpolatedValueSourceType._Automaton = _BuildAutomaton_127()




ObservationQualitySourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'definition'), pyxb.bundles.opengis.gml_3_2.DictionaryEntryType, scope=ObservationQualitySourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 608, 20)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 36, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operands')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'results')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ObservationQualitySourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'definition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 608, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ObservationQualitySourceType._Automaton = _BuildAutomaton_128()




def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multipathSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multipathSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multipathSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multipathSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multipathSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multipathSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multipathSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multipathSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'possibleProblemSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 32, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(multipathSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 33, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(multipathSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 34, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
multipathSourceType._Automaton = _BuildAutomaton_129()




def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(signalObstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(signalObstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(signalObstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(signalObstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(signalObstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(signalObstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(signalObstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(signalObstructionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'possibleProblemSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 32, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(signalObstructionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 33, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(signalObstructionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 34, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
signalObstructionType._Automaton = _BuildAutomaton_130()




radioInterferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'observedDegradation'), pyxb.binding.datatypes.string, scope=radioInterferenceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 69, 20)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(radioInterferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(radioInterferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(radioInterferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(radioInterferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(radioInterferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(radioInterferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(radioInterferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(radioInterferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'possibleProblemSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 32, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(radioInterferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 33, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(radioInterferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 34, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(radioInterferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'observedDegradation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/localInterferences.xsd', 69, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
radioInterferenceType._Automaton = _BuildAutomaton_131()




MeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'type'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=MeasurementType, documentation='Type of measurement. Typical examples (from the DynaNet manual) are:\n                                Measurement types\n                                A Horizontal angles (uncorrelated)\n                                B Geodetic azimuth (or bearing)\n                                C Ellipsoid chord distance\n                                D Direction set\n                                E Ellipsoid arc distance \n                                G Single GNSS baseline\n                                H Orthometric height\n                                I Astronomic latitude\n                                J Astronomic longitude\n                                K Astronomic (Laplace) azimuth\n                                L Orthometric height difference\n                                M Mean sea level (MSL) arc distance \n                                P Geodetic latitude\n                                Q Geodetic longitude\n                                R Ellipsoid height\n                                S Slope (direct) distance\n                                V Zenith distance\n                                X GNSS baseline cluster (full correlations)\n                                Y GNSS point cluster (full correlations)\n                                Z Vertical angle\n                            ', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 59, 20)))

MeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MeasurementLine'), MeasurementLineType, scope=MeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 86, 20)))

MeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'linePairQuality'), MeasurementLineCovarianceType, scope=MeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 87, 20)))

MeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPoint'), MeasurementPointType, scope=MeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 88, 20)))

MeasurementType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pointPairQuality'), MeasurementPointCovarianceType, scope=MeasurementType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 89, 20)))

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 86, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 87, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 88, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 89, 20))
    counters.add(cc_17)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 59, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MeasurementLine')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 86, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'linePairQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 87, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MeasurementPoint')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 88, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pointPairQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 89, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MeasurementType._Automaton = _BuildAutomaton_132()




HorizontalAngleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'base'), MeasurementPointType, scope=HorizontalAngleType, documentation='The base is a reference to the node at which the angle was measured (the instrument setup). The base/value element is ignored and by convention should be blank.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 183, 20)))

HorizontalAngleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'angle'), MeasurementLineType, scope=HorizontalAngleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 188, 20)))

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'base')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 183, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HorizontalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'angle')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 188, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
HorizontalAngleType._Automaton = _BuildAutomaton_133()




GeodeticAzimuthType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'azimuth'), MeasurementLineType, scope=GeodeticAzimuthType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 200, 20)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodeticAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'azimuth')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 200, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GeodeticAzimuthType._Automaton = _BuildAutomaton_134()




EllipsoidChordDistanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'distance'), MeasurementLineType, scope=EllipsoidChordDistanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 213, 20)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EllipsoidChordDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'distance')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 213, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EllipsoidChordDistanceType._Automaton = _BuildAutomaton_135()




DirectionSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'direction'), MeasurementLineType, scope=DirectionSetType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 237, 20)))

DirectionSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'directionPairQuality'), MeasurementLineCovarianceType, scope=DirectionSetType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 238, 20)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 238, 20))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'direction')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 237, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(DirectionSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'directionPairQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 238, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DirectionSetType._Automaton = _BuildAutomaton_136()




GNSSBaselineType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vector'), MeasurementLineType, scope=GNSSBaselineType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 250, 20)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vector')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 250, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GNSSBaselineType._Automaton = _BuildAutomaton_137()




OrthometricHeightType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'orthometricHeight'), MeasurementPointType, scope=OrthometricHeightType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 263, 20)))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'orthometricHeight')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 263, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OrthometricHeightType._Automaton = _BuildAutomaton_138()




HeightDifferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heightDifference'), MeasurementLineType, scope=HeightDifferenceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 276, 20)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heightDifference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 276, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
HeightDifferenceType._Automaton = _BuildAutomaton_139()




OrthometricHeightDifferenceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heightDifference'), MeasurementLineType, scope=OrthometricHeightDifferenceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 288, 20)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OrthometricHeightDifferenceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heightDifference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 288, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OrthometricHeightDifferenceType._Automaton = _BuildAutomaton_140()




AstronomicLatitudeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'latitude'), MeasurementPointType, scope=AstronomicLatitudeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 301, 20)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AstronomicLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'latitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 301, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AstronomicLatitudeType._Automaton = _BuildAutomaton_141()




AstronomicLongitudeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'longitude'), MeasurementPointType, scope=AstronomicLongitudeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 314, 20)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AstronomicLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'longitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 314, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AstronomicLongitudeType._Automaton = _BuildAutomaton_142()




AstronomicAzimuthType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'azimuth'), MeasurementLineType, scope=AstronomicAzimuthType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 327, 20)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AstronomicAzimuthType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'azimuth')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 327, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AstronomicAzimuthType._Automaton = _BuildAutomaton_143()




MeanSeaLevelArcDistanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'arcDistance'), MeasurementLineType, scope=MeanSeaLevelArcDistanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 356, 20)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MeanSeaLevelArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'arcDistance')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 356, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MeanSeaLevelArcDistanceType._Automaton = _BuildAutomaton_144()




SlopeDistanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'slopeDistance'), MeasurementLineType, scope=SlopeDistanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 369, 20)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SlopeDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'slopeDistance')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 369, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SlopeDistanceType._Automaton = _BuildAutomaton_145()




EllipsoidHeightType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ellipsoidHeight'), MeasurementPointType, scope=EllipsoidHeightType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 381, 20)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EllipsoidHeightType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ellipsoidHeight')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 381, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EllipsoidHeightType._Automaton = _BuildAutomaton_146()




ZenithDistanceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'zenithDistance'), MeasurementLineType, scope=ZenithDistanceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 394, 20)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ZenithDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'zenithDistance')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 394, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ZenithDistanceType._Automaton = _BuildAutomaton_147()




VerticalAngleType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'verticalAngle'), MeasurementLineType, scope=VerticalAngleType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 406, 20)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VerticalAngleType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'verticalAngle')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 406, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VerticalAngleType._Automaton = _BuildAutomaton_148()




GNSSBaselineClusterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Baseline'), MeasurementLineType, scope=GNSSBaselineClusterType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 418, 20)))

GNSSBaselineClusterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baselinePairQuality'), MeasurementLineCovarianceType, scope=GNSSBaselineClusterType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 419, 20)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 419, 20))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Baseline')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 418, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'baselinePairQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 419, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GNSSBaselineClusterType._Automaton = _BuildAutomaton_149()




GNSSPointClusterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'point'), MeasurementPointType, scope=GNSSPointClusterType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 432, 20)))

GNSSPointClusterType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pointPairQuality'), MeasurementPointCovarianceType, scope=GNSSPointClusterType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 433, 20)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 433, 20))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'point')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 432, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(GNSSPointClusterType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pointPairQuality')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 433, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GNSSPointClusterType._Automaton = _BuildAutomaton_150()




DInSARWrappedType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'RectifiedGridCoverage'), pyxb.bundles.opengis.gml_3_2.DiscreteCoverageType, scope=DInSARWrappedType, documentation='The gml:RectifiedGridCoverage is a discrete point coverage based on a rectified grid. It is similar to the grid coverage except that the points of the grid are geometrically referenced. The rectified grid coverage has a domain that is a gml:RectifiedGrid geometry.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coverage.xsd', 287, 1)))

DInSARWrappedType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'captureSystem'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=DInSARWrappedType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 446, 20)))

DInSARWrappedType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mFrame'), pyxb.binding.datatypes.decimal, scope=DInSARWrappedType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 448, 20)))

DInSARWrappedType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sFrame'), pyxb.binding.datatypes.decimal, scope=DInSARWrappedType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 449, 20)))

DInSARWrappedType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'temporalBaseline'), pyxb.binding.datatypes.decimal, scope=DInSARWrappedType, documentation='Decimal days', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 450, 20)))

DInSARWrappedType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'perpendicularBaseline'), ValueType, scope=DInSARWrappedType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 455, 20)))

DInSARWrappedType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'track'), pyxb.binding.datatypes.integer, scope=DInSARWrappedType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 456, 20)))

DInSARWrappedType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heading'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=DInSARWrappedType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 457, 20)))

DInSARWrappedType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'polarity'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=DInSARWrappedType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 458, 20)))

DInSARWrappedType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'centre'), ValueType, scope=DInSARWrappedType, documentation='Geodetic coordinate lat/lon', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 459, 20)))

DInSARWrappedType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'lookAngle'), ValueType, scope=DInSARWrappedType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 464, 20)))

DInSARWrappedType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'imageFormat'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=DInSARWrappedType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 465, 20)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 465, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 466, 20))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'captureSystem')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 446, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mFrame')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 448, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sFrame')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 449, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'temporalBaseline')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 450, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'perpendicularBaseline')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 455, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'track')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 456, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heading')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 457, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'polarity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 458, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'centre')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 459, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'lookAngle')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 464, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'imageFormat')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 465, 20))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(DInSARWrappedType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'RectifiedGridCoverage')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 466, 20))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
         ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DInSARWrappedType._Automaton = _BuildAutomaton_151()




SiteType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Monument'), MonumentPropertyType, scope=SiteType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 72, 20)))

SiteType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SupplementaryMark'), SupplementaryMarkPropertyType, scope=SiteType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 73, 20)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 29, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 34, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 35, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 72, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 73, 20))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 24, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 29, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 34, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 35, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Monument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 72, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SiteType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SupplementaryMark')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 73, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SiteType._Automaton = _BuildAutomaton_152()




MonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'inscription'), pyxb.binding.datatypes.string, scope=MonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 88, 20)))

MonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'monumentDescription'), pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType, scope=MonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 89, 20)))

MonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'height'), SingleValueType, scope=MonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 90, 20)))

MonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'foundation'), pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType, scope=MonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 91, 20)))

MonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'foundationDepth'), SingleValueType, scope=MonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 92, 20)))

MonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'markerDescription'), pyxb.binding.datatypes.string, scope=MonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 93, 20)))

MonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'geologicCharacteristic'), pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType, scope=MonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 94, 20)))

MonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bedrockType'), pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType, scope=MonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 95, 20)))

MonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bedrockCondition'), pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType, scope=MonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 96, 20)))

MonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fractureSpacing'), pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType, scope=MonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 97, 20)))

MonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'faultZonesNearby'), pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType, scope=MonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 98, 20)))

MonumentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'distanceActivity'), pyxb.bundles.opengis.gml_3_2.CodeWithAuthorityType, scope=MonumentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 99, 20)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 29, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 34, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 35, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 99, 20))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 24, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 29, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 34, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 35, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inscription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 88, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monumentDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 89, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'height')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 90, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'foundation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 91, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'foundationDepth')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 92, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'markerDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 93, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geologicCharacteristic')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 94, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bedrockType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 95, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bedrockCondition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 96, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fractureSpacing')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 97, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'faultZonesNearby')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 98, 20))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MonumentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'distanceActivity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 99, 20))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
         ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
         ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MonumentType._Automaton = _BuildAutomaton_153()




SiteCertificateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CORSName'), pyxb.binding.datatypes.string, scope=SiteCertificateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 164, 20)))

SiteCertificateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FourCharID'), STD_ANON_10, scope=SiteCertificateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 165, 20)))

SiteCertificateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Location'), pyxb.binding.datatypes.string, scope=SiteCertificateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 172, 20)))

SiteCertificateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LocalIDNumber'), pyxb.binding.datatypes.string, scope=SiteCertificateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 173, 20)))

SiteCertificateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MarkDescription'), pyxb.binding.datatypes.string, scope=SiteCertificateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 174, 20)))

SiteCertificateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNSSReceiver'), InstrumentPropertyType, scope=SiteCertificateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 175, 20)))

SiteCertificateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GNSSAntenna'), InstrumentPropertyType, scope=SiteCertificateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 176, 20)))

SiteCertificateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaOffset'), SingleValueType, scope=SiteCertificateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 177, 20)))

SiteCertificateType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Photo'), DocumentPropertyType, scope=SiteCertificateType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 178, 20)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 220, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 164, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 172, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 173, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 174, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 175, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 176, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 177, 20))
    counters.add(cc_17)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 220, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aggregationType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 221, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 226, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atSite')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 227, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CORSName')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 164, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FourCharID')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 165, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 172, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LocalIDNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 173, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MarkDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 174, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNSSReceiver')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 175, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GNSSAntenna')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 176, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaOffset')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 177, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SiteCertificateType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Photo')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 178, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    st_22._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SiteCertificateType._Automaton = _BuildAutomaton_154()




PositionTimeSeriesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=PositionTimeSeriesType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

PositionTimeSeriesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=PositionTimeSeriesType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

PositionTimeSeriesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=PositionTimeSeriesType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

PositionTimeSeriesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Status'), FeatureStatusType, scope=PositionTimeSeriesType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4)))

PositionTimeSeriesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'atNode'), NodePropertyType, scope=PositionTimeSeriesType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 393, 20)))

PositionTimeSeriesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'source'), AbstractPositionSourcePropertyType, scope=PositionTimeSeriesType, documentation='Estimation (adjustment) that defined position. As of GeodesyML 0.2 this can include any operation type. Retained (not deprecated) because this element can specify the default source for all elements in the history element', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 395, 20)))

PositionTimeSeriesType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'history'), CTD_ANON_12, scope=PositionTimeSeriesType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 400, 20)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 67, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 68, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 71, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 72, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 73, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 395, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 67, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 68, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 71, 24))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 72, 24))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSourceReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 73, 24))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atNode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 393, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 394, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 395, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'history')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 400, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(PositionTimeSeriesType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PositionTimeSeriesType._Automaton = _BuildAutomaton_155()




GridTransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'RectifiedGridCoverage'), pyxb.bundles.opengis.gml_3_2.DiscreteCoverageType, scope=GridTransformationType, documentation='The gml:RectifiedGridCoverage is a discrete point coverage based on a rectified grid. It is similar to the grid coverage except that the points of the grid are geometrically referenced. The rectified grid coverage has a domain that is a gml:RectifiedGrid geometry.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coverage.xsd', 287, 1)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 135, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 136, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 137, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 139, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 140, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 141, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 144, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 76, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 82, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 83, 20))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 135, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 136, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 137, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 138, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 139, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'remarks')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 140, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'domainOfValidity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 141, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'scope')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 142, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'operationVersion')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 143, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'coordinateOperationAccuracy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 144, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'sourceCRS')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 145, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'targetCRS')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/coordinateOperations.xsd', 146, 5))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sourceEpoch')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 75, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'targetEpoch')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 76, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usesMethod')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 81, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'parameterValue')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 82, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 83, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'RectifiedGridCoverage')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 103, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GridTransformationType._Automaton = _BuildAutomaton_156()




InterpolatedSingleValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Status'), FeatureStatusType, scope=InterpolatedSingleValueType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4)))

InterpolatedSingleValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Value'), ValueType, scope=InterpolatedSingleValueType, documentation='Generic property value holder', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/quality.xsd', 136, 4)))

InterpolatedSingleValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'source'), InterpolatedValueSourcePropertyType, scope=InterpolatedSingleValueType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 164, 20)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 55, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 162, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 164, 20))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedSingleValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedSingleValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedSingleValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedSingleValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedSingleValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedSingleValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedSingleValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedSingleValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 54, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedSingleValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 55, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedSingleValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 162, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterpolatedSingleValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Value')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 163, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(InterpolatedSingleValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 164, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterpolatedSingleValueType._Automaton = _BuildAutomaton_157()




InterpolatedDynamicValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Status'), FeatureStatusType, scope=InterpolatedDynamicValueType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4)))

InterpolatedDynamicValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'source'), InterpolatedValueSourcePropertyType, scope=InterpolatedDynamicValueType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 181, 20)))

InterpolatedDynamicValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'history'), CTD_ANON_13, scope=InterpolatedDynamicValueType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 182, 20)))

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 67, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 68, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 71, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 72, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 73, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 180, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 181, 20))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedDynamicValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedDynamicValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedDynamicValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedDynamicValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedDynamicValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedDynamicValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 67, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedDynamicValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 68, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedDynamicValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 71, 24))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedDynamicValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 72, 24))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedDynamicValueType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSourceReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 73, 24))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedDynamicValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 180, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(InterpolatedDynamicValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 181, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(InterpolatedDynamicValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'history')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 182, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
InterpolatedDynamicValueType._Automaton = _BuildAutomaton_158()




SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'formInformation'), formInformationType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 42, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteIdentification'), siteIdentificationType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 43, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteLocation'), siteLocationType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 44, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'gnssReceiver'), gnssReceiverPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 45, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'gnssAntenna'), gnssAntennaPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 46, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'surveyedLocalTie'), surveyedLocalTiePropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 47, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'frequencyStandard'), frequencyStandardPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 48, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'collocationInformation'), collocationInformationPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 49, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'humiditySensor'), humiditySensorPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 50, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pressureSensor'), pressureSensorPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 51, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'temperatureSensor'), temperatureSensorPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 52, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'waterVaporSensor'), waterVaporSensorPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 53, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'otherInstrumentation'), otherInstrumentationPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 54, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'radioInterference'), radioInterferencePropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 55, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'multipathSource'), multipathSourcePropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 56, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'signalObstruction'), signalObstructionPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 57, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'localEpisodicEffect'), localEpisodicEffectPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 58, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteOwner'), agencyPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 59, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteContact'), agencyPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 60, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteMetadataCustodian'), agencyPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 61, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteDataCenter'), agencyPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 62, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'siteDataSource'), agencyPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 63, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'moreInformation'), moreInformationType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 64, 20)))

SiteLogType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dataStream'), dataStreamPropertyType, scope=SiteLogType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 65, 20)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 126, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 45, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 46, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 47, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 48, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 49, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 50, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 51, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 52, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 53, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 54, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 55, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 56, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 57, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 58, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 59, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 60, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 62, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 63, 20))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 64, 20))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 65, 20))
    counters.add(cc_27)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atSite')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 126, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'formInformation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 42, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteIdentification')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 43, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteLocation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 44, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'gnssReceiver')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 45, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'gnssAntenna')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 46, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'surveyedLocalTie')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 47, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'frequencyStandard')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 48, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'collocationInformation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 49, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'humiditySensor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 50, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pressureSensor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 51, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'temperatureSensor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 52, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'waterVaporSensor')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 53, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'otherInstrumentation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 54, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'radioInterference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 55, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'multipathSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 56, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'signalObstruction')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 57, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'localEpisodicEffect')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 58, 20))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteOwner')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 59, 20))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteContact')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 60, 20))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteMetadataCustodian')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 61, 20))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteDataCenter')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 62, 20))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'siteDataSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 63, 20))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'moreInformation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 64, 20))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(SiteLogType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dataStream')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/siteLog.xsd', 65, 20))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_27, True) ]))
    st_31._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SiteLogType._Automaton = _BuildAutomaton_159()




BaseSensorEquipmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime'), pyxb.bundles.opengis.gml_3_2.TimePrimitivePropertyType, scope=BaseSensorEquipmentType, documentation='gml:validTime is a convenience property element.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/temporal.xsd', 52, 1)))

BaseSensorEquipmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'notes'), pyxb.binding.datatypes.string, scope=BaseSensorEquipmentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12)))

BaseSensorEquipmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument'), DocumentPropertyType, scope=BaseSensorEquipmentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12)))

BaseSensorEquipmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extension'), pyxb.binding.datatypes.anyType, scope=BaseSensorEquipmentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12)))

BaseSensorEquipmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'manufacturer'), pyxb.binding.datatypes.string, scope=BaseSensorEquipmentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 63, 20)))

BaseSensorEquipmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'serialNumber'), pyxb.binding.datatypes.string, scope=BaseSensorEquipmentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 64, 20)))

BaseSensorEquipmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'heightDiffToAntenna'), pyxb.binding.datatypes.double, scope=BaseSensorEquipmentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 65, 20)))

BaseSensorEquipmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'calibrationDate'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=BaseSensorEquipmentType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 66, 20)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 51, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturer')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 63, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serialNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 64, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heightDiffToAntenna')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 65, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'calibrationDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 66, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BaseSensorEquipmentType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 67, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BaseSensorEquipmentType._Automaton = _BuildAutomaton_160()




GNSSObservationQualityType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'history'), CTD_ANON_3, scope=GNSSObservationQualityType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 118, 20)))

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 67, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 68, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 71, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 72, 24))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 73, 24))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 101, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 118, 20))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 67, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 68, 24))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 71, 24))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSource')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 72, 24))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'dataSourceReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 73, 24))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'atSite')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 100, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 101, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(GNSSObservationQualityType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'history')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/fieldMeasurement.xsd', 118, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GNSSObservationQualityType._Automaton = _BuildAutomaton_161()




AbstractGNSSAntennaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'igsModelCode'), igsAntennaModelCodeType, scope=AbstractGNSSAntennaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 103, 20)))

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 103, 20))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerName')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerModel')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerPartNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerSerialNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 82, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'igsModelCode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 103, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractGNSSAntennaType._Automaton = _BuildAutomaton_162()




GnssRadomeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'igsModelCode'), igsRadomeModelCodeType, scope=GnssRadomeType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 198, 20)))

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 198, 20))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerName')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerModel')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerPartNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerSerialNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 82, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(GnssRadomeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'igsModelCode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 198, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GnssRadomeType._Automaton = _BuildAutomaton_163()




AbstractGNSSReceiverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'igsModelCode'), igsReceiverModelCodeType, scope=AbstractGNSSReceiverType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 251, 20)))

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 251, 20))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerName')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerModel')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerPartNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerSerialNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 82, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(AbstractGNSSReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'igsModelCode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 251, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AbstractGNSSReceiverType._Automaton = _BuildAutomaton_164()




PositionSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EstimationType'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=PositionSourceType, documentation='For clarity and identification purposes, some vendors may choose to denote the type of position estimation using a code supplied by a third party dictionary. A typical entry might be one of an enumeration of "Geodetic Adjustment", "National Adjustment" and "Campaign Adjustment" or could refer to a SINEX solution produced by Bernese "Daily Bernese SINEX" or "Weekly Bernese SINEX". This type is flexible enough to refer to both the business purpose for the estimation as well as infer the technique used in the estimation process.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 135, 20)))

PositionSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.string, scope=PositionSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 140, 20)))

PositionSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'epoch'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=PositionSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 141, 20)))

PositionSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configureValue'), ValueType, scope=PositionSourceType, documentation='In a geodetic adjustment a typical configureValue codeSpace would be the confidence interval for the t-test or f-test, or the computed degrees of freedom, number of measurements or positions, or estimator type.', location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 143, 20)))

PositionSourceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Status'), FeatureStatusType, scope=PositionSourceType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 238, 4)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 135, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 140, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 141, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 142, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 143, 20))
    counters.add(cc_18)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 36, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operands')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'results')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 87, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EstimationType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 135, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 140, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'epoch')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 141, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 142, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(PositionSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'configureValue')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 143, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PositionSourceType._Automaton = _BuildAutomaton_165()




TransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.string, scope=TransformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 304, 20)))

TransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'epoch'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=TransformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 305, 20)))

TransformationType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'status'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=TransformationType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 306, 20)))

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 304, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 305, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_18)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 36, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operands')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'results')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 87, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 304, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'epoch')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 305, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 306, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(TransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TransformationType._Automaton = _BuildAutomaton_166()




GNSSBaselineReductionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.string, scope=GNSSBaselineReductionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 466, 20)))

GNSSBaselineReductionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'status'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=GNSSBaselineReductionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 467, 20)))

GNSSBaselineReductionType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configureValue'), ValueType, scope=GNSSBaselineReductionType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 468, 20)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 466, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 468, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_18)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 36, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operands')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'results')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 404, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 466, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 467, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'configureValue')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 468, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(GNSSBaselineReductionType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GNSSBaselineReductionType._Automaton = _BuildAutomaton_167()




def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 36, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 41, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'runBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 46, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'operands')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 47, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'results')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 54, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReferenceFrameSourceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbstractDefinitionOperation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/lineage.xsd', 498, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReferenceFrameSourceType._Automaton = _BuildAutomaton_168()




def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EllipsoidArcDistanceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'distance')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 213, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EllipsoidArcDistanceType._Automaton = _BuildAutomaton_169()




def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodeticLatitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'latitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 301, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GeodeticLatitudeType._Automaton = _BuildAutomaton_170()




def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 31, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aprioriScalar')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 36, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fromProject')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 37, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 38, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GeodeticLongitudeType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'longitude')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/measurement.xsd', 314, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GeodeticLongitudeType._Automaton = _BuildAutomaton_171()




SupplementaryMarkType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'relativeOffset'), RelativeOffsetType, scope=SupplementaryMarkType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 114, 20)))

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 29, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 34, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 35, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 99, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 114, 20))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'boundedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 26, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'location')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/feature.xsd', 27, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 24, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Status')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 29, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedBy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 34, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'installedDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 35, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'inscription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 88, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'monumentDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 89, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'height')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 90, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'foundation')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 91, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'foundationDepth')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 92, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'markerDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 93, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'geologicCharacteristic')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 94, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bedrockType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 95, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bedrockCondition')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 96, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fractureSpacing')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 97, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'faultZonesNearby')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 98, 20))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'distanceActivity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 99, 20))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SupplementaryMarkType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'relativeOffset')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/observationSystem.xsd', 114, 20))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
         ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SupplementaryMarkType._Automaton = _BuildAutomaton_172()




def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 120, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 121, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 122, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 124, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 125, 24))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 126, 24))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 129, 24))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 137, 24))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 138, 24))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 120, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 121, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 122, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 123, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 124, 24))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'remarks')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 125, 24))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'domainOfValidity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 126, 24))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'scope')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 127, 24))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'operationVersion')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 128, 24))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'coordinateOperationAccuracy')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 129, 24))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'sourceCRS')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 130, 24))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'targetCRS')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 131, 24))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sourceEpoch')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 134, 24))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'targetEpoch')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 135, 24))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usesMethod')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 136, 24))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'parameterValue')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 137, 24))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'source')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 138, 24))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DeformationGridTransformationType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'RectifiedGridCoverage')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/referenceFrame.xsd', 145, 24))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DeformationGridTransformationType._Automaton = _BuildAutomaton_173()




GnssAntennaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'antennaReferencePoint'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=GnssAntennaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 156, 20)))

GnssAntennaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'marker-arpUpEcc.'), pyxb.binding.datatypes.double, nillable=pyxb.binding.datatypes.boolean(1), scope=GnssAntennaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 157, 20)))

GnssAntennaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'marker-arpNorthEcc.'), pyxb.binding.datatypes.double, nillable=pyxb.binding.datatypes.boolean(1), scope=GnssAntennaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 158, 20)))

GnssAntennaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'marker-arpEastEcc.'), pyxb.binding.datatypes.double, nillable=pyxb.binding.datatypes.boolean(1), scope=GnssAntennaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 159, 20)))

GnssAntennaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'alignmentFromTrueNorth'), pyxb.binding.datatypes.double, nillable=pyxb.binding.datatypes.boolean(1), scope=GnssAntennaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 160, 20)))

GnssAntennaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'antennaRadomeType'), igsRadomeModelCodeType, scope=GnssAntennaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 161, 20)))

GnssAntennaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'radomeSerialNumber'), pyxb.binding.datatypes.string, scope=GnssAntennaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 162, 20)))

GnssAntennaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'antennaCableType'), pyxb.binding.datatypes.string, scope=GnssAntennaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 163, 20)))

GnssAntennaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'antennaCableLength'), pyxb.binding.datatypes.double, nillable=pyxb.binding.datatypes.boolean(1), scope=GnssAntennaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 164, 20)))

GnssAntennaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInstalled'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=GnssAntennaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 165, 20)))

GnssAntennaType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateRemoved'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=GnssAntennaType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 166, 20)))

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 103, 20))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerName')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerModel')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerPartNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerSerialNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 82, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'igsModelCode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 103, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'antennaReferencePoint')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 156, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'marker-arpUpEcc.')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 157, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'marker-arpNorthEcc.')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 158, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'marker-arpEastEcc.')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 159, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'alignmentFromTrueNorth')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 160, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'antennaRadomeType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 161, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'radomeSerialNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 162, 20))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'antennaCableType')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 163, 20))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'antennaCableLength')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 164, 20))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInstalled')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 165, 20))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GnssAntennaType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateRemoved')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 166, 20))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
         ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
         ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GnssAntennaType._Automaton = _BuildAutomaton_174()




HumiditySensorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dataSamplingInterval'), pyxb.binding.datatypes.double, scope=HumiditySensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 201, 20)))

HumiditySensorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accuracy-percentRelativeHumidity'), pyxb.binding.datatypes.double, scope=HumiditySensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 202, 20)))

HumiditySensorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'aspiration'), pyxb.binding.datatypes.string, scope=HumiditySensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 203, 20)))

def _BuildAutomaton_175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 51, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturer')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 63, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serialNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 64, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heightDiffToAntenna')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 65, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'calibrationDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 66, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 67, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dataSamplingInterval')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 201, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accuracy-percentRelativeHumidity')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 202, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HumiditySensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aspiration')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 203, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
HumiditySensorType._Automaton = _BuildAutomaton_175()




PressureSensorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dataSamplingInterval'), pyxb.binding.datatypes.double, scope=PressureSensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 222, 20)))

PressureSensorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accuracy-hPa'), pyxb.binding.datatypes.double, scope=PressureSensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 223, 20)))

def _BuildAutomaton_176 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 51, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturer')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 63, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serialNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 64, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heightDiffToAntenna')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 65, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'calibrationDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 66, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 67, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dataSamplingInterval')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 222, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PressureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accuracy-hPa')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 223, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PressureSensorType._Automaton = _BuildAutomaton_176()




GnssReceiverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'satelliteSystem'), pyxb.bundles.opengis.gml_3_2.CodeType, scope=GnssReceiverType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 233, 20)))

GnssReceiverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'firmwareVersion'), pyxb.binding.datatypes.string, scope=GnssReceiverType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 234, 20)))

GnssReceiverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'elevationCutoffSetting'), pyxb.binding.datatypes.double, nillable=pyxb.binding.datatypes.boolean(1), scope=GnssReceiverType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 235, 20)))

GnssReceiverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateInstalled'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=GnssReceiverType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 236, 20)))

GnssReceiverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dateRemoved'), pyxb.bundles.opengis.gml_3_2.TimePositionType, scope=GnssReceiverType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 237, 20)))

GnssReceiverType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'temperatureStabilization'), pyxb.binding.datatypes.double, nillable=pyxb.binding.datatypes.boolean(1), scope=GnssReceiverType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 238, 20)))

def _BuildAutomaton_177 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_177
    del _BuildAutomaton_177
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 251, 20))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 116, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerName')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 66, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerModel')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 70, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerPartNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 74, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerDescription')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 78, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturerSerialNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 82, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'igsModelCode')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/geodeticEquipment.xsd', 251, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'satelliteSystem')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 233, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'firmwareVersion')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 234, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'elevationCutoffSetting')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 235, 20))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateInstalled')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 236, 20))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dateRemoved')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 237, 20))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GnssReceiverType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'temperatureStabilization')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 238, 20))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GnssReceiverType._Automaton = _BuildAutomaton_177()




TemperatureSensorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dataSamplingInterval'), pyxb.binding.datatypes.double, scope=TemperatureSensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 284, 20)))

TemperatureSensorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accuracy-degreesCelcius'), pyxb.binding.datatypes.double, scope=TemperatureSensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 285, 20)))

TemperatureSensorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'aspiration'), pyxb.binding.datatypes.string, scope=TemperatureSensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 286, 20)))

def _BuildAutomaton_178 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_178
    del _BuildAutomaton_178
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 51, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturer')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 63, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serialNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 64, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heightDiffToAntenna')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 65, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'calibrationDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 66, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 67, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dataSamplingInterval')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 284, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accuracy-degreesCelcius')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 285, 20))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TemperatureSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aspiration')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 286, 20))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TemperatureSensorType._Automaton = _BuildAutomaton_178()




WaterVaporSensorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'distanceToAntenna'), pyxb.binding.datatypes.double, scope=WaterVaporSensorType, location=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 295, 20)))

def _BuildAutomaton_179 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_179
    del _BuildAutomaton_179
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'metaDataProperty')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'description')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'descriptionReference')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 41, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'identifier')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 42, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'name')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/tools/converter/pyxb-test/PyXB-1.2.5/pyxb/bundles/opengis/schemas/gml/3.2.1/gmlBase.xsd', 43, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'type')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 51, 24))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'notes')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 19, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'associatedDocument')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 20, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extension')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/commonTypes.xsd', 21, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'manufacturer')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 63, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'serialNumber')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 64, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'heightDiffToAntenna')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 65, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'calibrationDate')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 66, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(_Namespace_gml, 'validTime')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 67, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(WaterVaporSensorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'distanceToAntenna')), pyxb.utils.utility.Location('/home/ec2-user/proj/GeodesyML/schemas/equipment.xsd', 295, 20))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
WaterVaporSensorType._Automaton = _BuildAutomaton_179()


AbstractMeasurement._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

AbstractPosition._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

DescriptiveQuality._setSubstitutionGroup(AbstractQuality)

DynamicFeature._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

AbstractTimeSlice._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

Instrument._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractGML)

Document._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

SurveyedLocalTie._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

FrequencyStandard._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractGML)

CollocationInformation._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractGML)

Sensor._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractGML)

GeodesyML._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

geodeticMonument._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

AbstractSource._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

AbstractPositionEstimator._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractCoordinateOperation)

operand._setSubstitutionGroup(AbstractOperand)

result._setSubstitutionGroup(AbstractResult)

adjustmentMeasurement._setSubstitutionGroup(AbstractOperand)

adjustedPosition._setSubstitutionGroup(AbstractResult)

adjustedPositionQuality._setSubstitutionGroup(AbstractResult)

adjustedMeasurement._setSubstitutionGroup(AbstractResult)

transformationPosition._setSubstitutionGroup(AbstractOperand)

transformationMeasurement._setSubstitutionGroup(AbstractOperand)

transformedPosition._setSubstitutionGroup(AbstractResult)

transformedMeasurement._setSubstitutionGroup(AbstractResult)

AbstractMeasurementOperation._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.Definition)

AbstractDefinitionOperation._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.Definition)

LocalEpisodicEffect._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

AbstractSiteLog._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

siteVisit._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

Node._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

PositionPairCovariance._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

Position._setSubstitutionGroup(AbstractPosition)

Project._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

TerrestrialReferenceFrame._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.GeodeticDatum)

DynamicTransformation._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractGeneralTransformation)

OtherInstrumentation._setSubstitutionGroup(Instrument)

TieMeasurement._setSubstitutionGroup(AbstractMeasurement)

Setup._setSubstitutionGroup(DynamicFeature)

SetupInstance._setSubstitutionGroup(AbstractTimeSlice)

AbstractObservationQuality._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

GNSSObservationQualityInstance._setSubstitutionGroup(AbstractTimeSlice)

AbstractPositionSource._setSubstitutionGroup(AbstractSource)

PositionEstimatorProcess._setSubstitutionGroup(AbstractPositionEstimator)

adjustmentPosition._setSubstitutionGroup(AbstractOperand)

adjustmentValue._setSubstitutionGroup(AbstractResult)

AbstractMeasurementSource._setSubstitutionGroup(AbstractSource)

AbstractMeasurementEstimator._setSubstitutionGroup(AbstractMeasurementOperation)

AbstractDefinitionSource._setSubstitutionGroup(AbstractSource)

AbstractDefinitionEstimator._setSubstitutionGroup(AbstractDefinitionOperation)

InterpolatedValueSource._setSubstitutionGroup(AbstractSource)

ObservationQualitySource._setSubstitutionGroup(AbstractSource)

MultipathSource._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

SignalObstruction._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

RadioInterference._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

Measurement._setSubstitutionGroup(AbstractMeasurement)

HorizontalAngle._setSubstitutionGroup(AbstractMeasurement)

GeodeticAzimuth._setSubstitutionGroup(AbstractMeasurement)

EllipsoidChordDistance._setSubstitutionGroup(AbstractMeasurement)

DirectionSet._setSubstitutionGroup(AbstractMeasurement)

GNSSBaseline._setSubstitutionGroup(AbstractMeasurement)

OrthometricHeight._setSubstitutionGroup(AbstractMeasurement)

HeightDifference._setSubstitutionGroup(AbstractMeasurement)

OrthometricHeightDifference._setSubstitutionGroup(AbstractMeasurement)

AstronomicLatitude._setSubstitutionGroup(AbstractMeasurement)

AstronomicLongitude._setSubstitutionGroup(AbstractMeasurement)

AstronomicAzimuth._setSubstitutionGroup(AbstractMeasurement)

MeanSeaLevelArcDistance._setSubstitutionGroup(AbstractMeasurement)

SlopeDistance._setSubstitutionGroup(AbstractMeasurement)

EllipsoidHeight._setSubstitutionGroup(AbstractMeasurement)

ZenithDistance._setSubstitutionGroup(AbstractMeasurement)

VerticalAngle._setSubstitutionGroup(AbstractMeasurement)

GNSSBaselineCluster._setSubstitutionGroup(AbstractMeasurement)

GNSSPointCluster._setSubstitutionGroup(AbstractMeasurement)

DInSARWrapped._setSubstitutionGroup(AbstractMeasurement)

Site._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

Monument._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

SiteCertificate._setSubstitutionGroup(Node)

PositionTimeSeries._setSubstitutionGroup(AbstractPosition)

NumericSingleQuality._setSubstitutionGroup(AbstractQuality)

NumericQualityList._setSubstitutionGroup(AbstractQuality)

GridTransformation._setSubstitutionGroup(DynamicTransformation)

InterpolatedSingleValue._setSubstitutionGroup(AbstractTimeSlice)

InterpolatedDynamicValue._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

siteLog._setSubstitutionGroup(AbstractSiteLog)

GnssRadome._setSubstitutionGroup(Instrument)

GNSSObservationQuality._setSubstitutionGroup(AbstractObservationQuality)

PositionSource._setSubstitutionGroup(AbstractPositionSource)

Transformation._setSubstitutionGroup(AbstractPositionSource)

GNSSBaselineReduction._setSubstitutionGroup(AbstractMeasurementSource)

ReferenceFrameSource._setSubstitutionGroup(AbstractDefinitionSource)

EllipsoidArcDistance._setSubstitutionGroup(AbstractMeasurement)

GeodeticLatitude._setSubstitutionGroup(AbstractMeasurement)

GeodeticLongitude._setSubstitutionGroup(AbstractMeasurement)

SupplementaryMark._setSubstitutionGroup(pyxb.bundles.opengis.gml_3_2.AbstractFeature)

VCV3D._setSubstitutionGroup(AbstractQuality)

VCV2D._setSubstitutionGroup(AbstractQuality)

DeformationGridTransformation._setSubstitutionGroup(GridTransformation)

GnssReceiver._setSubstitutionGroup(Instrument)

GnssAntenna._setSubstitutionGroup(Instrument)

HumiditySensor._setSubstitutionGroup(Sensor)

PressureSensor._setSubstitutionGroup(Sensor)

TemperatureSensor._setSubstitutionGroup(Sensor)

WaterVaporSensor._setSubstitutionGroup(Sensor)
